// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915"},"updated":{"$t":"2018-05-08T15:07:47.380+07:00"},"category":[{"term":"Android UI"},{"term":"library"},{"term":"data loading"},{"term":"android basic"},{"term":"material design"},{"term":"listview"},{"term":"tutorials"},{"term":"viewpager"},{"term":"animation"},{"term":"recyclerview"},{"term":"activity"},{"term":"gridview"},{"term":"static image"},{"term":"TOP useful library"},{"term":"lollipop"},{"term":"actionbar"},{"term":"google playservices"},{"term":"cardview"},{"term":"android tabs"},{"term":"api"},{"term":"intent"},{"term":"Firebase"},{"term":"facebook"},{"term":"toolbar"},{"term":"Gmail style"},{"term":"database"},{"term":"dialog"},{"term":"edittext"},{"term":"services"},{"term":"slidingmenu"},{"term":"BroadcastReceiver"},{"term":"android studio"},{"term":"asynctask"},{"term":"floating action button"},{"term":"picasso"},{"term":"scroll event"},{"term":"views"},{"term":"widget"},{"term":"Bottom Sheet"},{"term":"Data Binding"},{"term":"QR code"},{"term":"barcodescanner"},{"term":"bubble layout"},{"term":"content provider"},{"term":"device information"},{"term":"files"},{"term":"lock screen"},{"term":"menu"},{"term":"notification"},{"term":"pull to refresh"},{"term":"sharedpreference"},{"term":"sqlite"},{"term":"textview"},{"term":"vision API"},{"term":"webservice"},{"term":"Bottom Navigation View"},{"term":"DateTime picker"},{"term":"Input Method Framework"},{"term":"Permission"},{"term":"StackView"},{"term":"butterknife"},{"term":"camera"},{"term":"carousel layout"},{"term":"chart"},{"term":"chat application"},{"term":"checkbox"},{"term":"chip"},{"term":"downloadManager"},{"term":"event bus"},{"term":"handler"},{"term":"json"},{"term":"location"},{"term":"navigationdrawer"},{"term":"parcelable"},{"term":"progressbar"},{"term":"resources"},{"term":"searchview"},{"term":"serializable"},{"term":"soap"},{"term":"telephony API"},{"term":"volley"},{"term":"xml parser"},{"term":"Android M"},{"term":"CountdownTimer"},{"term":"JobScheduler"},{"term":"MediaPlayer"},{"term":"NestedScrollView"},{"term":"REST"},{"term":"actionbarsherlock"},{"term":"battery"},{"term":"bluetooth"},{"term":"captcha"},{"term":"chrome custom tab"},{"term":"color picker"},{"term":"crouton"},{"term":"device rotation"},{"term":"download"},{"term":"draggablepanel"},{"term":"drawing"},{"term":"expandable listview"},{"term":"font"},{"term":"fragment"},{"term":"fresco"},{"term":"gifs"},{"term":"google map"},{"term":"google plus"},{"term":"gson"},{"term":"horizontal scrollview"},{"term":"imageloader"},{"term":"jar"},{"term":"java basic"},{"term":"loader manager"},{"term":"matrix"},{"term":"nearby API"},{"term":"network info"},{"term":"ormlite"},{"term":"palette"},{"term":"pdf"},{"term":"pdfrenderer"},{"term":"popupwindow"},{"term":"ratingbar"},{"term":"scratch view"},{"term":"sensor"},{"term":"skew layout"},{"term":"slidinguppanel"},{"term":"sparkline"},{"term":"spinner"},{"term":"style"},{"term":"swipeable listview"},{"term":"switch"},{"term":"theme"},{"term":"touch"},{"term":"twitter"},{"term":"video record"},{"term":"webview"},{"term":"youtubeplayer"}],"title":{"type":"text","$t":"Learn Programming Together"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/-\/material+design?alt=json-in-script\u0026max-results=5"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/search\/label\/material%20design"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/-\/material+design\/-\/material+design?alt=json-in-script\u0026start-index=6\u0026max-results=5"}],"author":[{"name":{"$t":"Hồng Thái"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"31"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"5"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3766378631087651446"},"published":{"$t":"2017-01-12T08:47:00.000+07:00"},"updated":{"$t":"2017-01-12T08:47:16.758+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"chip"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Gmail style"},{"scheme":"http://www.blogger.com/atom/ns#","term":"library"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Android Material Design component: Chip - Part 2: AutoCompleteTextView with chips (like Gmail)"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html\" target=\"_blank\"\u003EPart 1\u003C\/a\u003E\u003C\/b\u003E, you've learned how to make a chip layout by customizing in XML resources. The fact that the most popular apply of this component is putting into an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAutoCompleteTextview\u003C\/code\u003E to perform \u003Ci\u003Ehint\/selected\u003C\/i\u003E information. For example, we can see this design in \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.google.android.gm\" target=\"_blank\"\u003EGmail application\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/newxxdT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/newxxdT.png\" height=\"400\" width=\"331\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this post, I will present the way to make this design by using a third-pary library! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding library dependencies\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As noted above, because this design is very popular so there are a lot of libraries are available on \u003Cb\u003EGithub\u003C\/b\u003E which able to help us to do this work easily. I will use \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\" target=\"_blank\"\u003ETokenAutoComplete\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, in my opinion, this is good library and has a clearly document. So, in order to use it in your project, please add it's dependency to your application level\u0026nbsp;\u003Cb\u003Ebuild.gradle\u003C\/b\u003E first: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile \"com.splitwise:tokenautocomplete:2.0.8@aar\"\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom an AutoCompleteTextView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; First of all, suppose we have a POJO class (contact data) simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ESimpleContact.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class SimpleContact {\u003Cbr \/\u003E    private int drawableId;\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E    private String email;\u003Cbr \/\u003E\u003Cbr \/\u003E    public SimpleContact(int drawableId, String name, String email) {\u003Cbr \/\u003E        this.drawableId = drawableId;\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E        this.email = email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public int getDrawableId() {\u003Cbr \/\u003E        return drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getName() {\u003Cbr \/\u003E        return name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setName(String name) {\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getEmail() {\u003Cbr \/\u003E        return email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public String toString() {\u003Cbr \/\u003E        return getName() + \"|\" + getEmail();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We now must create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenCompleteTextView\u0026lt;T\u0026gt;\u003C\/code\u003E to make a layout for \"chips item\" inside the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E. For simplicity, just make a class look like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\/blob\/master\/example\/src\/main\/java\/com\/tokenautocomplete\/ContactsCompletionView.java\" target=\"_blank\"\u003EContactsCompletionView.java\u003C\/a\u003E\u003C\/code\u003E in the library \u003Ci\u003E\u003Cb\u003Esample module\u003C\/b\u003E\u003C\/i\u003E. In this project, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003ET\u003C\/b\u003E\u003C\/code\u003E is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESimpleContact\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EContactsCompletionView.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.util.AttributeSet;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.TokenCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003E\/**\u003Cbr \/\u003E * Sample token completion view for basic contact info\u003Cbr \/\u003E * \u0026lt;p\u0026gt;\u003Cbr \/\u003E * Created on 9\/12\/13.\u003Cbr \/\u003E *\u003Cbr \/\u003E * @author mgod\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class ContactsCompletionView extends TokenCompleteTextView\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context) {\u003Cbr \/\u003E        super(context);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context, AttributeSet attrs) {\u003Cbr \/\u003E        super(context, attrs);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context, AttributeSet attrs, int defStyle) {\u003Cbr \/\u003E        super(context, attrs, defStyle);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected View getViewForObject(SimpleContact contact) {\u003Cbr \/\u003E        LayoutInflater l = (LayoutInflater) getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E        View tokenView = l.inflate(R.layout.item_autocomplete_contact, (ViewGroup) getParent(), false);\u003Cbr \/\u003E        TokenTextView textView = (TokenTextView) tokenView.findViewById(R.id.token_text);\u003Cbr \/\u003E        ImageView icon = (ImageView) tokenView.findViewById(R.id.icon);\u003Cbr \/\u003E        textView.setText(contact.getName());\u003Cbr \/\u003E        icon.setImageResource(contact.getDrawableId());\u003Cbr \/\u003E\u003Cbr \/\u003E        return tokenView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected SimpleContact defaultObject(String completionText) {\u003Cbr \/\u003E        \/\/Stupid simple example of guessing if we have an email or not\u003Cbr \/\u003E        int index = completionText.indexOf('@');\u003Cbr \/\u003E        if (index == -1) {\u003Cbr \/\u003E            return new SimpleContact(R.drawable.male, completionText, completionText.replace(\" \", \"\") + \"@example.com\");\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            return new SimpleContact(R.drawable.female, completionText.substring(0, index), completionText);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is each chip layout (XML) file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_autocomplete_contact.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:background=\"@drawable\/chip_drawable\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:id=\"@+id\/icon\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:contentDescription=\"@null\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;info.devexchanges.chipedittext.TokenTextView\u003Cbr \/\u003E        android:id=\"@+id\/token_text\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:paddingLeft=\"8dp\"\u003Cbr \/\u003E        android:paddingRight=\"8dp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, there is an class named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenTextView\u003C\/code\u003E, this is a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E which \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonSelected()\u003C\/code\u003E method was overridden to set it's state when user \u003Cb\u003E\u003Ci\u003Eselected\/clicked\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ETokenTextView.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.util.AttributeSet;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003E\/**\u003Cbr \/\u003E * Created by mgod on 5\/27\/15.\u003Cbr \/\u003E *\u003Cbr \/\u003E * Simple custom view example to show how to get selected events from the token\u003Cbr \/\u003E * view. See ContactsCompletionView and contact_token.xml for usage\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class TokenTextView extends TextView {\u003Cbr \/\u003E\u003Cbr \/\u003E    public TokenTextView(Context context) {\u003Cbr \/\u003E        super(context);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public TokenTextView(Context context, AttributeSet attrs) {\u003Cbr \/\u003E        super(context, attrs);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void setSelected(boolean selected) {\u003Cbr \/\u003E        super.setSelected(selected);\u003Cbr \/\u003E        setCompoundDrawablesWithIntrinsicBounds(0, 0, selected ? R.drawable.ic_clear_white_18dp : 0, 0);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I took this class from \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\/blob\/master\/example\/src\/main\/java\/com\/tokenautocomplete\/TokenTextView.java\" target=\"_blank\"\u003Eoriginal file\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E in the \u003Ci\u003Elibrary sample module\u003C\/i\u003E. This is the background drawable for the root view of item_autocomplete_contact.xml file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\/drawable\/chip_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@android:color\/darker_gray\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPutting the AutoCompleteTextView to activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Up to now, we created a auto completed view object named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactsCompletionView\u003C\/code\u003E, so put an instance to the main activity layout file like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chipedittext.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;info.devexchanges.chipedittext.ContactsCompletionView\u003Cbr \/\u003E        android:id=\"@+id\/autocomplete_textview\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:focusableInTouchMode=\"true\"\u003Cbr \/\u003E        android:imeOptions=\"actionDone\"\u003Cbr \/\u003E        android:inputType=\"text|textNoSuggestions|textMultiLine\"\u003Cbr \/\u003E        android:nextFocusDown=\"@+id\/editText\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/darker_gray\"\u003Cbr \/\u003E        android:textSize=\"19sp\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_get\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"Get Input Data\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/input_content\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate adapter class for AutoCompleteTextView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The next work is making a filter adapter for the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactsCompletionView\u003C\/code\u003E by making a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFilteredArrayAdapter\u003C\/code\u003E, I'll create a my own adapter class by overriding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetView()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EkeepObject()\u003C\/code\u003E methods:  \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EFilterAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.support.annotation.NonNull;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.FilteredArrayAdapter;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class FilterAdapter extends FilteredArrayAdapter\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    public FilterAdapter(Context context, int resource, List\u0026lt;SimpleContact\u0026gt; objects) {\u003Cbr \/\u003E        super(context, resource,  objects);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @NonNull\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View getView(int position, View convertView, @NonNull ViewGroup parent) {\u003Cbr \/\u003E        if (convertView == null) {\u003Cbr \/\u003E\u003Cbr \/\u003E            LayoutInflater layoutInflater = (LayoutInflater) getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E            convertView = layoutInflater.inflate(R.layout.item_contact, parent, false);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        SimpleContact contact = getItem(position);\u003Cbr \/\u003E        ((TextView) convertView.findViewById(R.id.name)).setText(contact != null ? contact.getName() : null);\u003Cbr \/\u003E        ((TextView) convertView.findViewById(R.id.email)).setText(contact != null ? contact.getEmail() : null);\u003Cbr \/\u003E        assert contact != null;\u003Cbr \/\u003E        ((ImageView) convertView.findViewById(R.id.icon)).setImageResource(contact.getDrawableId());\u003Cbr \/\u003E\u003Cbr \/\u003E        return convertView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected boolean keepObject(SimpleContact person, String mask) {\u003Cbr \/\u003E        mask = mask.toLowerCase();\u003Cbr \/\u003E        return person.getName().toLowerCase().startsWith(mask) || person.getEmail().toLowerCase().startsWith(mask);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see at the adapter class code, each \"hint row\" of auto completion view layout was inflated from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem_contact\u003C\/code\u003E (XML) file. This is it's code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_contact.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:padding=\"5dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:id=\"@+id\/icon\"\u003Cbr \/\u003E        android:src=\"@drawable\/male\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/name\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:text=\"Large Text\"\u003Cbr \/\u003E        android:textAppearance=\"?android:attr\/textAppearanceMedium\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/email\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/name\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:text=\"Small Text\"\u003Cbr \/\u003E        android:textAppearance=\"?android:attr\/textAppearanceSmall\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EActivity programmatically code configuration\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to make a responding to user selections in the auto completion view items (chip object), your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E must implements \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenListener\u003C\/code\u003E interface. By this, there are 2 methods you must override: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonTokenAdded()\u003C\/code\u003E: called when a chip item added\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonTokenRemoved\u003C\/code\u003E: called when user remove a chip item from auto completion view\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; This is simple source code the main activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.util.Log;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.TokenCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity implements TokenCompleteTextView.TokenListener\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    private ArrayList\u0026lt;SimpleContact\u0026gt; contacts;\u003Cbr \/\u003E    private FilterAdapter filterAdapter;\u003Cbr \/\u003E    private ContactsCompletionView autoCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E        setSampleContact();\u003Cbr \/\u003E\u003Cbr \/\u003E        autoCompleteTextView = (ContactsCompletionView) findViewById(R.id.autocomplete_textview);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Initializing and attaching adapter for AutocompleteTextView\u003Cbr \/\u003E        filterAdapter = new FilterAdapter(this, R.layout.item_contact, contacts);\u003Cbr \/\u003E        autoCompleteTextView.setAdapter(filterAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Set the listener that will be notified of changes in the Tokenlist\u003Cbr \/\u003E        autoCompleteTextView.setTokenListener(this);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Set the action to be taken when a Token is clicked\u003Cbr \/\u003E        autoCompleteTextView.setTokenClickStyle(TokenCompleteTextView.TokenClickStyle.Select);\u003Cbr \/\u003E\u003Cbr \/\u003E        final TextView inputContent = (TextView) findViewById(R.id.input_content);\u003Cbr \/\u003E        View btnGet = findViewById(R.id.btn_get);\u003Cbr \/\u003E        btnGet.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                List\u0026lt;SimpleContact\u0026gt; tokens = autoCompleteTextView.getObjects();\u003Cbr \/\u003E                StringBuilder content = new StringBuilder();\u003Cbr \/\u003E                for (int i = 0; i \u0026lt; tokens.size(); i++) {\u003Cbr \/\u003E                    content.append(tokens.get(i)).append(\"; \");\u003Cbr \/\u003E                }\u003Cbr \/\u003E                inputContent.setText(String.format(\"You choose: %s\", content.toString()));\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setSampleContact() {\u003Cbr \/\u003E        contacts = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Thanh Ngan\", \"ngan@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Quang Minh\", \"minh@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Tran Tinh\", \"thanh_67@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Phan Hoa\", \"hoa@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Pham Trang\", \"trang@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Dinh Tuan\", \"dtuan@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Kim Chi\", \"kimchi@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Quoc Cuong\", \"cuong@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Hai Yen\", \"hai_yen@gmail.com\"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onTokenAdded(SimpleContact token) {\u003Cbr \/\u003E        Log.d(\"Main\", \"A Token added\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onTokenRemoved(SimpleContact token) {\u003Cbr \/\u003E        Log.d(\"Main\", \"A Token removed\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the application - some screen shots\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; A chip in the auto completion view is simple like this: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/GW1gXab.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/GW1gXab.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When you are typing in the auto completion view, suggestion results will be displayed:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ViVJ6kc.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ViVJ6kc.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When user select and delete a chip item:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/z2i2azs.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/z2i2azs.gif\" height=\"400\" width=\"221\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After click \"\u003Cb\u003E\u003Cspan style=\"color: #999999;\"\u003EGet Input Data\u003C\/span\u003E\u003C\/b\u003E\" button:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Ry416mR.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Ry416mR.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; By using a third-party library, we now can creating an auto completion view with chip, a good design that you can see at Gmail Android app. For more details, you can read at \u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete#creating-your-auto-complete-view\" target=\"_blank\"\u003Ethis library document\u003C\/a\u003E. By searching on the Internet, you can find out that there are a lot of other libraries which able to resolved this problem easily you can try. For examples:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/klinker41\/android-chips\" target=\"_blank\"\u003EAndroid Chip\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by\u0026nbsp;Jake Klinker\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/DoodleScheduling\/android-material-chips\" target=\"_blank\"\u003EMaterial-design-chip\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by\u0026nbsp;Doodle AG (Chip with Material design style)\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/kpbird\/chips-edittext-library\" target=\"_blank\"\u003EAn another one\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by KPBird\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qoc9fN\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3766378631087651446\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3766378631087651446"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3766378631087651446"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html","title":"Android Material Design component: Chip - Part 2: AutoCompleteTextView with chips (like Gmail)"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-332271109960358139"},"published":{"$t":"2017-01-05T11:05:00.000+07:00"},"updated":{"$t":"2017-01-14T10:25:58.309+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"chip"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Android Material Design component: Chip - Part 1: Creating chips layout"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Chip is a Material Design component which presented by Google developers. It represents complex entities in small blocks, such as a contact. From guideline on \u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html#\" target=\"_blank\"\u003EGoogle design\u003C\/a\u003E\u003C\/i\u003E, a chip may:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003Econtain entities such as a photo, text, rules, an icon, or a contact.\u003C\/li\u003E\u003Cli\u003Erepresent contact information in a compact way.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; For a popular example, we can see this component on Google Play:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eFTOPyO.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eFTOPyO.png\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In Android SDK and Design Support library, there is no \u003Cb\u003E\u003Ci\u003Eofficial widget\u003C\/i\u003E\u003C\/b\u003E to make a chip layout, so we must custom it ourselves. Moreover, there are tons of third-party libraries can help us to deal with this problem.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, in this post, I will present a solution to make some chip styles by custom in xml files. For making a \u003Cb\u003E\u003Ci\u003EChip \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E\u003C\/i\u003E\u003C\/b\u003E, please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring some dimension resources\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just take a glance at \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html#chips-specs\" target=\"_blank\"\u003Especs entry\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E of the chip guideline, you will noticed some required dimensions when making a chip layout. So, before starting, I provide some dimension resources first: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Edimens.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Default screen margins, per the Android Design guidelines. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"activity_horizontal_margin\"\u0026gt;16dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"activity_vertical_margin\"\u0026gt;16dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"chip_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"icon_height\"\u0026gt;36dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"remove_icon_dimen\"\u0026gt;24dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"remove_icon_margin\"\u0026gt;4dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"deletable_chip_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"contact_chip_left_padding\"\u0026gt;8dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"contact_chip_right_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;dimen name=\"padding_top\"\u0026gt;8dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating a simple chip layout (only text label)\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There are nothing unfamiliar here at all, we just only make a background with round corner for \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E to make a chip. Firstly, defining a new \u003Ci\u003Edrawable resource file\u003C\/i\u003E with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eshape\u003C\/code\u003E as the root attribute: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\drawable\\shape_chip_simple_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@color\/colorAccent\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;padding\u003Cbr \/\u003E        android:bottom=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:left=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:right=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:top=\"@dimen\/chip_padding\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In your activity layout file, just define this drawable resource file as the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E background like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chiplayout.SimpleChipActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_simple_drawable\"\u003Cbr \/\u003E        android:text=\"Hello, I'm a simple Chip!\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this activity, we'll have this simple chip layout: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/rJdNZTC.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/rJdNZTC.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating a deletable chip\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; A deleteable chip contains a \u003Ci\u003E\u003Cb\u003Edelete icon\u003C\/b\u003E\u003C\/i\u003E on the right side. When click at this icon, the chip will be deleted. In order to design this layout, wrapping a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E and an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERelativeLayout\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_cross_chips.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:id=\"@+id\/chip_layout\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_drawable\"\u003Cbr \/\u003E        android:paddingBottom=\"@dimen\/padding_top\"\u003Cbr \/\u003E        android:paddingTop=\"@dimen\/padding_top\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:paddingLeft=\"@dimen\/chip_padding\"\u003Cbr \/\u003E            android:text=\"Example chip\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/delete\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/text\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:padding=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginRight=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:src=\"@drawable\/delete\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is drawable resource file to set as \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E background: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eshape_chip_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@color\/gray_light\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: You should use this design instead of defining a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E with a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdrawableRight\u003C\/code\u003E because you must handle delete icon click event in programmatically code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EDeleteChipActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chiplayout;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.annotation.Nullable;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class DeleteChipActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(@Nullable Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_cross_chip);\u003Cbr \/\u003E\u003Cbr \/\u003E        View deleteIcon = findViewById(R.id.delete);\u003Cbr \/\u003E        final View chipLayout = findViewById(R.id.chip_layout);\u003Cbr \/\u003E        deleteIcon.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                \/\/gone chip layout\u003Cbr \/\u003E                \/\/if it a list or an adapter, please remove it!\u003Cbr \/\u003E                chipLayout.setVisibility(View.GONE);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this activity, we'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/9xfnsqz.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/9xfnsqz.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When click the delete icon:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/kbdTaPg.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/kbdTaPg.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EChip with text and icon (image)\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; It may be called contact chip, which have an icon on the left side of label. Moreover, it may have a remove icon on the right. The icon is always a round \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E, wrapping them in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERelativeLayout\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_icon_chip.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_icon_chip\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chiplayout.IconChipActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_icon_drawable\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;de.hdodenhof.circleimageview.CircleImageView\u003Cbr \/\u003E            android:id=\"@+id\/icon\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/icon_height\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/icon_height\"\u003Cbr \/\u003E            android:src=\"@drawable\/midu\"\u003Cbr \/\u003E            app:civ_border_color=\"#FF000000\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E            android:paddingTop=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:paddingLeft=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:paddingBottom=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:text=\"Đặng Thị Mỹ Dung\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/delete\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/text\"\u003Cbr \/\u003E            android:padding=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginLeft=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginRight=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/delete\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The round \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E can be created by a third-party library. In this example, I use \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/hdodenhof\/CircleImageView\" target=\"_blank\"\u003ECircleImageView\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, so please add this dependency to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Edependencies\u003C\/code\u003E scope in your application level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'de.hdodenhof:circleimageview:2.1.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; The hardest work is fixing sizes for each widget, I use dimension resources like noted above. Running this activity, we'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/vErVZAA.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/vErVZAA.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Chip component can be created easily with some configuration in the resources and layout files. From now, you can use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EHorizontalScrollView\u003C\/code\u003E to display a row of chips (like GooglePlay application) or use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStaggeredGridLayoutManager\u003C\/code\u003E to build a staggered grid of chips layout (named \u003Cb\u003E\u003Ci\u003Etag layout\u003C\/i\u003E\u003C\/b\u003E),...\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Up to \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, I will talk about putting chip into \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E (\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAutoCompleteTextView\u003C\/code\u003E with chips inside) like Gmail app does, this is popular design that you can see on many applications (coming soon!). \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html\" target=\"_blank\"\u003EChip component guideline\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E on Google Design\u003C\/li\u003E\u003Cli\u003ERound \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E library page on \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/hdodenhof\/CircleImageView\" target=\"_blank\"\u003EGithub\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003ERead more\u003C\/b\u003E: \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/07\/android-tip-staggered-grid-view-by.html\" target=\"_blank\"\u003Emy post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E about using\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStaggeredGridLayoutManager\u003C\/code\u003E to build a staggered grid layout.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/quGHrQ\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/332271109960358139\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/332271109960358139"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/332271109960358139"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html","title":"Android Material Design component: Chip - Part 1: Creating chips layout"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3249909341871619719"},"published":{"$t":"2016-11-11T14:09:00.001+07:00"},"updated":{"$t":"2016-11-11T14:17:53.099+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Bottom Navigation View"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Bottom Navigation View by Design Support Library in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Bottom Navigation View was introduced for a long time ago in \u003Ca href=\"https:\/\/material.google.com\/components\/bottom-navigation.html\" target=\"_blank\"\u003EMaterial design guideline\u003C\/a\u003E but it hasn’t been easy for us to implement it into our apps. Some applications have built their own solutions, whilst others have used a third-party open-source libraries to get the job done. I also had a post about using a library to make this design, you should take a glance \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/bottom-navigation-bar-in-android.html\" target=\"_blank\"\u003Ehere\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E!\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/mql3eyX.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/mql3eyX.png\" height=\"265\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; But now, with the release of Design Support Library version \u003Cb\u003E\u003Ci\u003E25.0.0\u003C\/i\u003E\u003C\/b\u003E, Google now provide an \u003Cb\u003E\u003Ci\u003Eofficial widget\u003C\/i\u003E\u003C\/b\u003E to make this design. This is a good new for Android developers, from now on, we have not depended on any third-party library anymore, just only need to use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E\u0026nbsp;in your layout design. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/if6OyNkl1MM\/default.jpg?sqp=CKSelcEF\u0026amp;rs=AOn4CLDtOKyNRY0cL1eB-26Ghd5X3jL1lg\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/if6OyNkl1MM?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding Design Support Library dependency\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; It is included in the Design Support Library, starting with version \u003Cb\u003E\u003Ci\u003E25.0.0\u003C\/i\u003E\u003C\/b\u003E. You can include it in your \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E file with the following line (you'll also need the AppCompat Support Library as the Design Support Library's dependency): \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile 'com.android.support:appcompat-v7:25.0.0'  \u003Cbr \/\u003Ecompile 'com.android.support:design:25.0.0' \u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring in activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Next we simply need to add the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E widget to our desired layout file. Remember that this should be aligned with the bottom of the screen with all content displaying above it. We can add this view like so: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.bottomnavigationview.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;FrameLayout\u003Cbr \/\u003E        android:id=\"@+id\/fragment\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:padding=\"@dimen\/activity_horizontal_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;\/FrameLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.design.widget.BottomNavigationView\u003Cbr \/\u003E        android:id=\"@+id\/bottom_navigation_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        app:itemBackground=\"@color\/colorPrimaryDark\"\u003Cbr \/\u003E        app:itemIconTint=\"@color\/white\"\u003Cbr \/\u003E        app:itemTextColor=\"@color\/white\"\u003Cbr \/\u003E        app:menu=\"@menu\/menu_bottom_navigation\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, there are 4 important attributes of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemBackground\u003C\/code\u003E: the background color or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EDrawable\u003C\/code\u003E of the items. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemBackgroundResource()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemIconTint\u003C\/code\u003E: the icon tint for items. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemIconTintList()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemTextColor\u003C\/code\u003E: the text color for the item labels. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemTextColor()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Emenu\u003C\/code\u003E: the menu resource to be used to display items in the bottom navigation menu. Can be set from code with\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EinflateMenu()\u003C\/code\u003E method.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; If you add this to your app and run it on your device, you’ll see a shiny new bottom navigation view like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/jZxIt8c.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/jZxIt8c.png\" height=\"61\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a menu for Bottom Navigation View\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; At the XML code above, we provided a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Emenu\u003C\/code\u003E attribute for our \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E. It looks exactly the same as any other menu that we’d use throughout our app, let put a menu resource file in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/menu\u003C\/code\u003E folder: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emenu_bottom_navigation.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;menu xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/songs\"\u003Cbr \/\u003E        android:icon=\"@drawable\/song\"\u003Cbr \/\u003E        android:title=\"All songs\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/genre\"\u003Cbr \/\u003E        android:icon=\"@drawable\/genre\"\u003Cbr \/\u003E        android:title=\"Genres\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/album\"\u003Cbr \/\u003E        android:icon=\"@drawable\/album\"\u003Cbr \/\u003E        android:title=\"Albums\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/artist\"\u003Cbr \/\u003E        android:icon=\"@drawable\/artist\"\u003Cbr \/\u003E        android:title=\"Artists\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/menu\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003EImportant Note\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: the maximum number of items we can display now is 5. You can check it through call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetMaxItem()\u003C\/code\u003E method. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle selected\/unselected states\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Using the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E we can easily handle the display of both selected and unselected menu items. Firstly, create a selector file for our selected\/unselected colors (this file is put in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/color\u003C\/code\u003E folder): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecolor_states.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;selector xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:color=\"#757575\"\u003Cbr \/\u003E        android:state_checked=\"false\"\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:color=\"@color\/colorAccent\"\u003Cbr \/\u003E        android:state_checked=\"true\"\/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/selector\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, change the\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemIconTint\u003C\/code\u003E attribute value of your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.design.widget.BottomNavigationView\u003Cbr \/\u003E        android:id=\"@+id\/bottom_navigation_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        app:itemBackground=\"@color\/colorPrimaryDark\"\u003Cbr \/\u003E        app:itemIconTint=\"@color\/color_states\"\u003Cbr \/\u003E        app:itemTextColor=\"@color\/white\"\u003Cbr \/\u003E        app:menu=\"@menu\/menu_bottom_navigation\" \/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; You will have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eJOL8jq.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eJOL8jq.png\" height=\"61\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle menu items click event\u003C\/h3\u003E\u003C\/div\u003ENow we’ve implemented our menu we need to be able to react when it’s interacted with. In programmatically code, we can use the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetOnNavigationItemSelectedListener()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E to set a listener for menu item events: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EbottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\u003Cbr \/\u003E                switch (item.getItemId()) {\u003Cbr \/\u003E                    case R.id.artist:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.genre:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.album:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.songs:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    default:\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                }\u003Cbr \/\u003E                return true;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I hope you can see now just how straight forward it is to implement the Bottom Navigation view using the design support library. At this time, this widget is still not perfect. For example, we now cannot custom it's behavior to show\/hide it when scrolling screen, hope that Google will make it better soon!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Of course, if you need more code of this project, please check it out on \u003Cb\u003E\u003Ca href=\"http:\/\/viid.me\/9v0Jk\" target=\"_blank\"\u003E@Github\u003C\/a\u003E\u003C\/b\u003E, I will replace corresponding fragments when menu items clicked, output of my sample project like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/hacz6jI.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/hacz6jI.gif\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003ERead more\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/material.google.com\/components\/bottom-navigation.html\" target=\"_blank\"\u003EMaterial design guidelines\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EMy \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/bottom-navigation-bar-in-android.html\" target=\"_blank\"\u003Eprevious post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E about Bottom Navigation View\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/9v0Jk\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3249909341871619719\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/bottom-navigation-view-by-design.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3249909341871619719"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3249909341871619719"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/bottom-navigation-view-by-design.html","title":"Bottom Navigation View by Design Support Library in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/if6OyNkl1MM\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-2484353432100110388"},"published":{"$t":"2016-11-07T22:43:00.000+07:00"},"updated":{"$t":"2017-02-07T11:54:58.849+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"cardview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"library"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"},{"scheme":"http://www.blogger.com/atom/ns#","term":"StackView"}],"title":{"type":"text","$t":"Cards stack like Tinder application in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Card stack is an exciting UI in mobile development, it provides an intuitive view of the \"paper stack\". There are a lot of applications in Google Play have this design, \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.tinder\" target=\"_blank\"\u003ETinder\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E is a typical example.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In Android, each card stack element will be created by using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ECardView\u003C\/code\u003E - a class from Design Support Library - but in order to make whole view look like a stack, we must use a third-party library which provide a custom view to hold data and\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Through this post, I would like to present a library called \u003Cb\u003E\u003Ca href=\"https:\/\/github.com\/flschweiger\/SwipeStack\" target=\"_blank\"\u003ESwipeStack\u003C\/a\u003E\u003C\/b\u003E which developed by \u003Ca href=\"http:\/\/frederik.link\/\" target=\"_blank\"\u003EFrederik Schweiger\u003C\/a\u003E. It's can help us to build a swipe cards stack easily through some simple steps.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/nhP956s6C-0\/default.jpg?sqp=CJipgsEF\u0026amp;rs=AOn4CLDQFubv35HFU-L1JwAnkcneuGhFWg\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/nhP956s6C-0?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EImport library to Android Studio Project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The simplest way to use this library is add this dependency to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003Edependencies\u003C\/code\u003E scope of your app-level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'link.fls:swipestack:0.3.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring in Activity\/Fragment layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The class used to make cards stack layout is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ESwipeStack\u003C\/code\u003E, you must put an instance to your activity\/fragment layout (xml) file like this: \u003Cbr \/\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:weightSum=\"1\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;link.fls.swipestack.SwipeStack\u003Cbr \/\u003E        android:id=\"@+id\/container\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"500dp\"\u003Cbr \/\u003E        app:stack_rotation=\"0\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/empty\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerInParent=\"true\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/love\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerInParent=\"true\"\u003Cbr \/\u003E            android:layout_marginLeft=\"10dp\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/empty\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/love\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/cancel\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerInParent=\"true\"\u003Cbr \/\u003E            android:layout_marginRight=\"10dp\"\u003Cbr \/\u003E            android:layout_toLeftOf=\"@id\/empty\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/cancel\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; For more customizing XML attributes (like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003Estack_rotation\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003Eswipe_rotation\u003C\/code\u003E,...) of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ESwipeStack\u003C\/code\u003E, please view \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/flschweiger\/SwipeStack#attributes\" target=\"_blank\"\u003Ethis entry\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E of it's library page. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating an adapter class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ESwipeStack\u003C\/code\u003E work like a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E, so you must make an adapter class (based on \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EBaseAdapter\u003C\/code\u003E) which holds the data and creates the views for the stack. In this sample project, I will load a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EBitmap\u003C\/code\u003E to each stack element so I use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EdecodeSampledBitmapFromResource()\u003C\/code\u003E method to scaled down version to memory, avoid \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EOutOfMemory\u003C\/code\u003E error.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Source code of this adapter class: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ECardsAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.cardsstack;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.content.res.Resources;\u003Cbr \/\u003Eimport android.graphics.Bitmap;\u003Cbr \/\u003Eimport android.graphics.BitmapFactory;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.BaseAdapter;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class CardsAdapter extends BaseAdapter {\u003Cbr \/\u003E\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E    private final static int AVATAR_WIDTH = 150;\u003Cbr \/\u003E    private final static int AVATAR_HEIGHT = 300;\u003Cbr \/\u003E    private List\u0026lt;CardItem\u0026gt; data;\u003Cbr \/\u003E\u003Cbr \/\u003E    public CardsAdapter(Activity activity, List\u0026lt;CardItem\u0026gt; data) {\u003Cbr \/\u003E        this.data = data;\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getCount() {\u003Cbr \/\u003E        return data.size();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public CardItem getItem(int position) {\u003Cbr \/\u003E        return data.get(position);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public long getItemId(int position) {\u003Cbr \/\u003E        return position;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View getView(final int position, View convertView, ViewGroup parent) {\u003Cbr \/\u003E        ViewHolder holder;\u003Cbr \/\u003E        LayoutInflater inflater = (LayoutInflater) activity.getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E        \/\/ If holder not exist then locate all view from UI file.\u003Cbr \/\u003E        if (convertView == null) {\u003Cbr \/\u003E            \/\/ inflate UI from XML file\u003Cbr \/\u003E            convertView = inflater.inflate(R.layout.item_card, parent, false);\u003Cbr \/\u003E            \/\/ get all UI view\u003Cbr \/\u003E            holder = new ViewHolder(convertView);\u003Cbr \/\u003E            \/\/ set tag for holder\u003Cbr \/\u003E            convertView.setTag(holder);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            \/\/ if holder created, get tag from view\u003Cbr \/\u003E            holder = (ViewHolder) convertView.getTag();\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/setting data to views\u003Cbr \/\u003E        holder.name.setText(getItem(position).getName());\u003Cbr \/\u003E        holder.location.setText(getItem(position).getLocation());\u003Cbr \/\u003E        holder.avatar.setImageBitmap(decodeSampledBitmapFromResource(activity.getResources(),\u003Cbr \/\u003E                getItem(position).getDrawableId(), AVATAR_WIDTH, AVATAR_HEIGHT));\u003Cbr \/\u003E\u003Cbr \/\u003E        return convertView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private class ViewHolder{\u003Cbr \/\u003E        private ImageView avatar;\u003Cbr \/\u003E        private TextView name;\u003Cbr \/\u003E        private TextView location;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            avatar = (ImageView)view.findViewById(R.id.avatar);\u003Cbr \/\u003E            name = (TextView)view.findViewById(R.id.name);\u003Cbr \/\u003E            location = (TextView)view.findViewById(R.id.location);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public static Bitmap decodeSampledBitmapFromResource(Resources res, int resId, int reqWidth, int reqHeight) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ First decode with inJustDecodeBounds=true to check dimensions\u003Cbr \/\u003E        final BitmapFactory.Options options = new BitmapFactory.Options();\u003Cbr \/\u003E        options.inJustDecodeBounds = true;\u003Cbr \/\u003E        BitmapFactory.decodeResource(res, resId, options);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Calculate inSampleSize\u003Cbr \/\u003E        options.inSampleSize = calculateInSampleSize(options, reqWidth, reqHeight);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Decode bitmap with inSampleSize set\u003Cbr \/\u003E        options.inJustDecodeBounds = false;\u003Cbr \/\u003E        return BitmapFactory.decodeResource(res, resId, options);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\u003Cbr \/\u003E        \/\/ Raw height and width of image\u003Cbr \/\u003E        final int height = options.outHeight;\u003Cbr \/\u003E        final int width = options.outWidth;\u003Cbr \/\u003E        int inSampleSize = 1;\u003Cbr \/\u003E\u003Cbr \/\u003E        if (height \u0026gt; reqHeight || width \u0026gt; reqWidth) {\u003Cbr \/\u003E\u003Cbr \/\u003E            final int halfHeight = height \/ 2;\u003Cbr \/\u003E            final int halfWidth = width \/ 2;\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/ Calculate the largest inSampleSize value that is a power of 2 and keeps both\u003Cbr \/\u003E            \/\/ height and width larger than the requested height and width.\u003Cbr \/\u003E            while ((halfHeight \/ inSampleSize) \u0026gt;= reqHeight\u003Cbr \/\u003E                    \u0026amp;\u0026amp; (halfWidth \/ inSampleSize) \u0026gt;= reqWidth) {\u003Cbr \/\u003E                inSampleSize *= 2;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        return inSampleSize;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfiguration in Activity\/Fragment java code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We've done the most important work: building an adapter class for \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ESwipeStack\u003C\/code\u003E. Now, paying attention to some of it's necessary methods: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EHandling swipe event of Cards stack by use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetListener(SwipeStackListener())\u003C\/code\u003E method and overriding 3 methods \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EonStackEmpty()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EonViewSwipedToLeft()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EonViewSwipedToRight()\u003C\/code\u003E of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ESwipeStack.SwipeStackListener\u003C\/code\u003E interface.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EswipeTopViewToRight()\u003C\/code\u003E\/\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EswipeTopViewToLeft()\u003C\/code\u003E: programmatically dismiss the top view to the right\/left.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EresetStack()\u003C\/code\u003E: Resets the current adapter position and repopulates the stack.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; Source code for the activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.cardsstack;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.Menu;\u003Cbr \/\u003Eimport android.view.MenuItem;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.Toast;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport link.fls.swipestack.SwipeStack;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private SwipeStack cardStack;\u003Cbr \/\u003E    private CardsAdapter cardsAdapter;\u003Cbr \/\u003E    private ArrayList\u0026lt;CardItem\u0026gt; cardItems;\u003Cbr \/\u003E    private View btnCancel;\u003Cbr \/\u003E    private View btnLove;\u003Cbr \/\u003E    private int currentPosition;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        cardStack = (SwipeStack) findViewById(R.id.container);\u003Cbr \/\u003E        btnCancel = findViewById(R.id.cancel);\u003Cbr \/\u003E        btnLove = findViewById(R.id.love);\u003Cbr \/\u003E\u003Cbr \/\u003E        setCardStackAdapter();\u003Cbr \/\u003E        currentPosition = 0;\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Handling swipe event of Cards stack\u003Cbr \/\u003E        cardStack.setListener(new SwipeStack.SwipeStackListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onViewSwipedToLeft(int position) {\u003Cbr \/\u003E                currentPosition = position + 1;\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onViewSwipedToRight(int position) {\u003Cbr \/\u003E                currentPosition = position + 1;\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onStackEmpty() {\u003Cbr \/\u003E\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        btnCancel.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                cardStack.swipeTopViewToRight();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        btnLove.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                Toast.makeText(MainActivity.this, \"You liked \" + cardItems.get(currentPosition).getName(),\u003Cbr \/\u003E                        Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                cardStack.swipeTopViewToLeft();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setCardStackAdapter() {\u003Cbr \/\u003E        cardItems = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.a, \"Huyen My\", \"Hanoi\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.f, \"Do Ha\", \"Nghe An\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.g, \"Dong Nhi\", \"Hue\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.e, \"Le Quyen\", \"Sai Gon\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.c, \"Phuong Linh\", \"Thanh Hoa\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.d, \"Phuong Vy\", \"Hanoi\"));\u003Cbr \/\u003E        cardItems.add(new CardItem(R.drawable.b, \"Ha Ho\", \"Da Nang\"));\u003Cbr \/\u003E\u003Cbr \/\u003E        cardsAdapter = new CardsAdapter(this, cardItems);\u003Cbr \/\u003E        cardStack.setAdapter(cardsAdapter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public boolean onCreateOptionsMenu(Menu menu) {\u003Cbr \/\u003E        getMenuInflater().inflate(R.menu.menu_main, menu);\u003Cbr \/\u003E        return true;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public boolean onOptionsItemSelected(MenuItem item) {\u003Cbr \/\u003E        if (item.getItemId() == R.id.reset) {\u003Cbr \/\u003E            cardStack.resetStack();\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return super.onOptionsItemSelected(item);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ESome necessary files\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The POJO class of project, the model of a stack view element: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ECardItem.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.cardsstack;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class CardItem {\u003Cbr \/\u003E\u003Cbr \/\u003E    private int drawableId;\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E    private String location;\u003Cbr \/\u003E\u003Cbr \/\u003E    public CardItem(int drawableId, String name, String location) {\u003Cbr \/\u003E        this.drawableId = drawableId;\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E        this.location = location;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public int getDrawableId() {\u003Cbr \/\u003E        return drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setDrawableId(int drawableId) {\u003Cbr \/\u003E        this.drawableId = drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getName() {\u003Cbr \/\u003E        return name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setName(String name) {\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getLocation() {\u003Cbr \/\u003E        return location;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The menu file, containing a label to reset data of the stack: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\/menu\/menu_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;menu xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    tools:context=\".MyActivity\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/reset\"\u003Cbr \/\u003E        android:title=\"Reset\"\u003Cbr \/\u003E        app:showAsAction=\"always\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/menu\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this application, you'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/dvsa9Od.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/dvsa9Od.gif\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Up to now, you may realized that we are able to make a cards stack with swipe animation like Tinder application easily by using a third-party library. By searching on the Internet, you may find out a lot similar libraries:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/github.com\/aaronbond\/Swipe-Deck\"\u003Ehttps:\/\/github.com\/aaronbond\/Swipe-Deck\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/github.com\/wenchaojiang\/AndroidSwipeableCardStack\"\u003Ehttps:\/\/github.com\/wenchaojiang\/AndroidSwipeableCardStack\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; Finally, for more details, please go to the library page on \u003Cb\u003E\u003Ca href=\"https:\/\/github.com\/flschweiger\/SwipeStack\" target=\"_blank\"\u003E@Github\u003C\/a\u003E\u003C\/b\u003E to read it's document and post your issues! \u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/8gh62\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/2484353432100110388\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/cards-stack-like-tinder-application-in.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2484353432100110388"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2484353432100110388"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/cards-stack-like-tinder-application-in.html","title":"Cards stack like Tinder application in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/nhP956s6C-0\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-7169371403355054888"},"published":{"$t":"2016-09-14T15:44:00.000+07:00"},"updated":{"$t":"2016-09-22T11:11:11.696+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"activity"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"animation"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Meaningful motion for Activities transition in Android Lollipop"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; As we can see at Material Design specs:\u003Cbr \/\u003E\u003Cblockquote style=\"background-color: white; border-left-color: rgb(0, 188, 213); border-left-style: solid; border-width: 0px 0px 0px 2px; color: #444444; font-family: 'Open Sans', Arial, Verdana; font-size: 16px; font-style: italic; line-height: 27.4286px; margin: 0px 2rem 1rem; padding: 0.5rem; quotes: none; text-align: justify; vertical-align: baseline;\"\u003E\u003Cdiv style=\"border: 0px; line-height: 1.8; padding: 0px; vertical-align: baseline;\"\u003E\u003Cspan style=\"line-height: 1.8;\"\u003EMotion in the world of material design is used to describe spatial relationships, functionality, and intention with beauty and fluidity. Motion design can effectively guide the user’s attention in ways that both inform and delight. Use motion to smoothly transport users between navigational contexts, explain changes in the arrangement of elements on a screen, and reinforce element hierarchy.\u003C\/span\u003E\u003C\/div\u003E\u003C\/blockquote\u003E\u0026nbsp; \u0026nbsp; From API 21, Material Design has bring us the new way to switch \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActivity\u003C\/code\u003E (activity transition) with animations and of course, the element located on these screen\u0026nbsp;are also affected by this transition process.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We must apply those animations carefully to avoid the app become a true \u003Cb\u003EPixar animation movie\u003C\/b\u003E. In this post, I will present some customizing of Material meaningful motion, make our application look smoothly.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/AMqybxvEjp4\/default.jpg?sqp=CMCW474F\u0026amp;rs=AOn4CLCifoFN7cAp6wS3UnXFnNtxnjaiRA\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/AMqybxvEjp4?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPrerequisites\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to custom\u003Ci\u003E activity transition \u003C\/i\u003Eand other \u003Ci\u003Erelated animations\u003C\/i\u003E, make sure that your \u003Ci\u003Emin-sdk\u003C\/i\u003E of your project is \u003Cb\u003E\u003Ci\u003E21 \u003C\/i\u003E\u003C\/b\u003Eor higher. I also add some necessary dependencies which use for my sample project later: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eapp\/build.gradle\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Eapply plugin: 'com.android.application'\u003Cbr \/\u003E\u003Cbr \/\u003Eandroid {\u003Cbr \/\u003E    compileSdkVersion 24\u003Cbr \/\u003E    buildToolsVersion \"24.0.2\"\u003Cbr \/\u003E\u003Cbr \/\u003E    defaultConfig {\u003Cbr \/\u003E        applicationId \"info.devexchanges.uimotion\"\u003Cbr \/\u003E        minSdkVersion 21\u003Cbr \/\u003E        targetSdkVersion 24\u003Cbr \/\u003E        versionCode 1\u003Cbr \/\u003E        versionName \"1.0\"\u003Cbr \/\u003E    }\u003Cbr \/\u003E    buildTypes {\u003Cbr \/\u003E        release {\u003Cbr \/\u003E            minifyEnabled false\u003Cbr \/\u003E            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Edependencies {\u003Cbr \/\u003E    compile fileTree(dir: 'libs', include: ['*.jar'])\u003Cbr \/\u003E    compile 'com.android.support:appcompat-v7:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:design:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:gridlayout-v7:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:cardview-v7:24.2.0'\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom Activity Transitions in xml\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Before Android Lollipop (API Level 21) we could only customize the activity transition animation over entire activity. All views were animated together. But now we can specify how each view is animated during that transition.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Suppose I have 3 activities: the first called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E which display \u003Ci\u003E3 pictures\u003C\/i\u003E and after click at any one, app will redirect user to second activity to show selected picture descriptions (called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E). This activity contains a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EFloatingActionButton\u003C\/code\u003E, when click on it, a translucent activity (\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E) appears which give some options to shared the content. It has a yellow shape which is a drawable defined as image source of a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E. Now, we'll custom some animations based on xml resources.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Create a folder named \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Etransaction\u003C\/code\u003E in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eres\u003C\/code\u003E directory, all animations xml files will put here.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We can specify custom animations for \u003Ci\u003Eenter\u003C\/i\u003E and \u003Ci\u003Eexit\u003C\/i\u003E transitions and for transitions of \u003Ci\u003Eshared elements\u003C\/i\u003E\u0026nbsp;between activities.\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EAn \u003Ci\u003Eenter\u003C\/i\u003E transition determines how views move into the initial scene of the started activity.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EAn \u003Ci\u003Eexit\u003C\/i\u003E transition determines how views move out of the scene when starting a new activity.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EA \u003Ci\u003Eshared elements\u003C\/i\u003E transition determines how views are shared between two activities transition.\u003C\/li\u003E\u003C\/ul\u003EThese are all xml files that defining animation for transacting from \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E: and showing translucent \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E:\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emain_reenter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;slide xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:slideEdge=\"top\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;targets\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E\u0026lt;\/slide\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emain_exit.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;explode xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;targets\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E\u0026lt;\/explode\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Edetail_enter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E               android:transitionOrdering=\"together\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;slide\u003Cbr \/\u003E        android:slideEdge=\"bottom\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:targetId=\"@id\/cardview\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/slide\u0026gt;\u003Cbr \/\u003E    \u0026lt;fade\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\"\/\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\"\/\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@id\/cardview\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/fade\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Esharing_shared_element_enter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E               android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeBounds\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;arcMotion\u003Cbr \/\u003E        android:maximumAngle=\"90\"\u003Cbr \/\u003E        android:minimumHorizontalAngle=\"90\"\u003Cbr \/\u003E        android:minimumVerticalAngle=\"0\"\/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Esharing_item_chosen.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeBounds\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;fade\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@id\/content_root\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/fade\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeImageTransform android:startDelay=\"@android:integer\/config_mediumAnimTime\"\/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Activity transition definitions can be declared into theme style and our \u003Cb\u003Eres\/values\/styles.xml\u003C\/b\u003E contains all this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Estyles.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimary\"\u0026gt;@color\/colorPrimary\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimaryDark\"\u0026gt;@color\/colorPrimaryDark\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorAccent\"\u0026gt;@color\/colorAccent\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Main\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowExitTransition\"\u0026gt;@transition\/main_exit\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowReenterTransition\"\u0026gt;@transition\/main_reenter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Detail\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowTranslucentStatus\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowAllowEnterTransitionOverlap\"\u0026gt;false\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowEnterTransition\"\u0026gt;@transition\/detail_enter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Sharing\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowIsTranslucent\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowBackground\"\u0026gt;@color\/black\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowTranslucentStatus\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowSharedElementEnterTransition\"\u0026gt;@transition\/sharing_shared_element_enter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"ShareItemView\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:layout_width\"\u0026gt;wrap_content\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:layout_height\"\u0026gt;wrap_content\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:background\"\u0026gt;?android:attr\/selectableItemBackgroundBorderless\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:textAppearance\"\u0026gt;@style\/TextAppearance.AppCompat.Medium.Inverse\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And never forget to use the correct theme for each activity in AndroidManifest.xml: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    package=\"info.devexchanges.uimotion\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;application\u003Cbr \/\u003E        android:allowBackup=\"true\"\u003Cbr \/\u003E        android:icon=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E        android:label=\"@string\/app_name\"\u003Cbr \/\u003E        android:supportsRtl=\"true\"\u003Cbr \/\u003E        android:theme=\"@style\/AppTheme.Main\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MAIN\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E                \u0026lt;category android:name=\"android.intent.category.LAUNCHER\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".DetailsActivity\"\u003Cbr \/\u003E            android:theme=\"@style\/AppTheme.Detail\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".SharingActivity\"\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/application\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/manifest\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETransition from Main screen to Detail screen\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When user clicks on some image item, we must start the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E with some information that indicates we’re starting a Customized Activity Transition. In \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E we have: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onClick(View view) {\u003Cbr \/\u003E        if (view.getId() == R.id.rose) {\u003Cbr \/\u003E            openDetailActivity(R.drawable.rose, \"Rose\", view);\u003Cbr \/\u003E        } else if (view.getId() == R.id.sunflower) {\u003Cbr \/\u003E            openDetailActivity(R.drawable.sunflower, \"Sunflower\", view);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            openDetailActivity(R.drawable.tulip, \"Tulip\", view);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void openDetailActivity(int drawable, String title, View view) {\u003Cbr \/\u003E        ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(this, view, getString(R.string.picture_transition_name));\u003Cbr \/\u003E        Intent intent = new Intent(this, DetailsActivity.class);\u003Cbr \/\u003E        intent.putExtra(DetailsActivity.EXTRA_DRAWABLE, drawable);\u003Cbr \/\u003E        intent.putExtra(DetailsActivity.EXTRA_TITLE, title);\u003Cbr \/\u003E\u003Cbr \/\u003E        startActivity(intent, options.toBundle());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The most important method is \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActivityOptions.makeSceneTransitionAnimation()\u003C\/code\u003E. It create an object containing information about our scene transition animation.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; As you see, I pass \u003Ci\u003Edrawable id\u003C\/i\u003E\u0026nbsp;and string title \u0026nbsp;from \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E to setup \u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECollapsingToolbarLayout\u003C\/code\u003E and \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E. To finish the our motion from main to details screen we just scale up the share button when the transition is ended: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_details);\u003Cbr \/\u003E        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));\u003Cbr \/\u003E\u003Cbr \/\u003E        int drawable = getIntent().getExtras().getInt(EXTRA_DRAWABLE);\u003Cbr \/\u003E        CharSequence title = getIntent().getExtras().getCharSequence(EXTRA_TITLE);\u003Cbr \/\u003E\u003Cbr \/\u003E        CollapsingToolbarLayout collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\u003Cbr \/\u003E        collapsingToolbarLayout.setTitle(title);\u003Cbr \/\u003E\u003Cbr \/\u003E        ImageView pictureView = (ImageView) findViewById(R.id.picture);\u003Cbr \/\u003E        pictureView.setImageResource(drawable);\u003Cbr \/\u003E        pictureView.setContentDescription(title);\u003Cbr \/\u003E\u003Cbr \/\u003E        btnShare = findViewById(R.id.btn_share);\u003Cbr \/\u003E        textView = (TextView) findViewById(R.id.text);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (drawable == R.drawable.rose) {\u003Cbr \/\u003E            textView.setText(getString(R.string.rose));\u003Cbr \/\u003E        } else if (drawable == R.drawable.tulip) {\u003Cbr \/\u003E            textView.setText(getString(R.string.tulip));\u003Cbr \/\u003E        } else textView.setText(getString(R.string.sunflower));\u003Cbr \/\u003E\u003Cbr \/\u003E        if (savedInstanceState == null) {\u003Cbr \/\u003E            btnShare.setScaleX(0);\u003Cbr \/\u003E            btnShare.setScaleY(0);\u003Cbr \/\u003E            getWindow().getEnterTransition().addListener(new TransitionAdapter() {\u003Cbr \/\u003E                @Override\u003Cbr \/\u003E                public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                    getWindow().getEnterTransition().removeListener(this);\u003Cbr \/\u003E                    btnShare.animate().scaleX(1).scaleY(1);\u003Cbr \/\u003E                }\u003Cbr \/\u003E            });\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; But if we are scaling up the share button when the Activity is opened then we have to scale down when the activity is finished: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onBackPressed() {\u003Cbr \/\u003E        btnShare.animate().scaleX(0).scaleY(0).setListener(new AnimatorListenerAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onAnimationEnd(Animator animation) {\u003Cbr \/\u003E                supportFinishAfterTransition();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And when running app, we have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/KcSVd0b.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/KcSVd0b.gif\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETransition from Detail screen to Sharing screen\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Launching \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E after click on the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EFloatingActionButton\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EbtnShare.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(DetailsActivity.this,\u003Cbr \/\u003E                        btnShare, getString(R.string.share_transition_name));\u003Cbr \/\u003E                Intent intent = new Intent(DetailsActivity.this, SharingActivity.class);\u003Cbr \/\u003E                startActivity(intent, options.toBundle());\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E, we have to setup initial states before the animation begin: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        rootView = (ViewGroup) findViewById(R.id.content_root);\u003Cbr \/\u003E        backgroundView = (ImageView) findViewById(R.id.background);\u003Cbr \/\u003E        btnFacebook = findViewById(R.id.facebook);\u003Cbr \/\u003E        btnInstagram = findViewById(R.id.instagram);\u003Cbr \/\u003E        btnTwitter = findViewById(R.id.twitter);\u003Cbr \/\u003E        btnGoogle = findViewById(R.id.google_plus);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (savedInstanceState == null) {\u003Cbr \/\u003E            \/\/ Setup initial states\u003Cbr \/\u003E            backgroundView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E            btnGoogle.setAlpha(0);\u003Cbr \/\u003E            btnTwitter.setAlpha(0);\u003Cbr \/\u003E            btnFacebook.setAlpha(0);\u003Cbr \/\u003E            btnInstagram.setAlpha(0);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        getWindow().getSharedElementEnterTransition().addListener(new TransitionAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                getWindow().getSharedElementEnterTransition().removeListener(this);\u003Cbr \/\u003E                revealTheBackground();\u003Cbr \/\u003E                showTheItems();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        ...\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The main work in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E is handling share items (buttons) click. The pure Transition Framework was added since Android API 19. This framework animates the views at runtime by changing some of their property values over time. One of the features is the ability of running animations based on the changes between starting and ending view property values: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onClick(View view) {\u003Cbr \/\u003E        showToast(view.getId());\u003Cbr \/\u003E        \/\/ Load the transition\u003Cbr \/\u003E        Transition transition = TransitionInflater.from(this).inflateTransition(R.transition.sharing_item_chosen);\u003Cbr \/\u003E        \/\/ Finish this Activity when the transition is ended\u003Cbr \/\u003E        transition.addListener(new TransitionAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E                \/\/ Override default transition to fade out\u003Cbr \/\u003E                overridePendingTransition(0, android.R.anim.fade_out);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E        \/\/ Capture current values in the scene root and then post a request to run a transition on the next frame\u003Cbr \/\u003E        TransitionManager.beginDelayedTransition(rootView, transition);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 1. Item chosen\u003Cbr \/\u003E        RelativeLayout.LayoutParams layoutParams =\u003Cbr \/\u003E                new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\u003Cbr \/\u003E        layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\u003Cbr \/\u003E        view.setLayoutParams(layoutParams);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 2. Rest of items\u003Cbr \/\u003E        View[] itemViews = {btnFacebook, btnInstagram, btnTwitter, btnGoogle};\u003Cbr \/\u003E        for (View itemView : itemViews) {\u003Cbr \/\u003E            if (itemView != view) {\u003Cbr \/\u003E                itemView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 3. Background\u003Cbr \/\u003E        double diagonal = Math.sqrt(rootView.getHeight() * rootView.getHeight() + rootView.getWidth() * rootView.getWidth());\u003Cbr \/\u003E        float radius = (float) (diagonal \/ 2f);\u003Cbr \/\u003E        int h = backgroundView.getDrawable().getIntrinsicHeight();\u003Cbr \/\u003E        float scale = radius \/ (h \/ 2f);\u003Cbr \/\u003E        Matrix matrix = new Matrix(backgroundView.getImageMatrix());\u003Cbr \/\u003E        matrix.postScale(scale, scale, backgroundView.getWidth() \/ 2f, backgroundView.getHeight() \/ 2f);\u003Cbr \/\u003E        backgroundView.setScaleType(ImageView.ScaleType.MATRIX);\u003Cbr \/\u003E        backgroundView.setImageMatrix(matrix);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Moreover, override \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EonBackPressed()\u003C\/code\u003E to start the hide animation of item and background: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate void hideTheBackground() {\u003Cbr \/\u003E        Animator hide = createRevealAnimator(false);\u003Cbr \/\u003E        hide.setStartDelay(defaultAnimDuration);\u003Cbr \/\u003E        hide.addListener(new AnimatorListenerAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onAnimationEnd(Animator animation) {\u003Cbr \/\u003E                backgroundView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E                supportFinishAfterTransition();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E        hide.start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBackPressed() {\u003Cbr \/\u003E        hideTheItems();\u003Cbr \/\u003E        hideTheBackground();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void hideTheItems() {\u003Cbr \/\u003E        View[] itemViews = {btnFacebook, btnInstagram, btnTwitter, btnGoogle};\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; itemViews.length; i++) {\u003Cbr \/\u003E            View itemView = itemViews[i];\u003Cbr \/\u003E            long startDelay = (defaultAnimDuration \/ itemViews.length) * (itemViews.length - i);\u003Cbr \/\u003E            itemView.animate().alpha(0).setStartDelay(startDelay);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And we'll have this result: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/v8vL6BF.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/v8vL6BF.gif\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFinal thoughts\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I have presented a simple project about applying motion in our application to avoid a bad User Experience. In this sample app, we saw how to build beautiful apps with meaningful and delightful motion. And below are some links where you can go deeper into Android Motion:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EDefining Custom Animation in \u003Ca href=\"https:\/\/developer.android.com\/training\/material\/animations.html\" target=\"_blank\"\u003EGoogle training\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EMaterial design motion in \u003Ca href=\"https:\/\/material.google.com\/motion\/material-motion.html\" target=\"_blank\"\u003EGoogle design\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/MPuwx\" target=\"_blank\"\u003EView on Github\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/7169371403355054888\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/09\/meaningful-transition-motion-for.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7169371403355054888"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7169371403355054888"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/09\/meaningful-transition-motion-for.html","title":"Meaningful motion for Activities transition in Android Lollipop"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/AMqybxvEjp4\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]}]}});