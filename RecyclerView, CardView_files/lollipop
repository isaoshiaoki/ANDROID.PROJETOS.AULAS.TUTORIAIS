// API callback
related_results_labels_thumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915"},"updated":{"$t":"2018-05-08T15:07:47.380+07:00"},"category":[{"term":"Android UI"},{"term":"library"},{"term":"data loading"},{"term":"android basic"},{"term":"material design"},{"term":"listview"},{"term":"tutorials"},{"term":"viewpager"},{"term":"animation"},{"term":"recyclerview"},{"term":"activity"},{"term":"gridview"},{"term":"static image"},{"term":"TOP useful library"},{"term":"lollipop"},{"term":"actionbar"},{"term":"google playservices"},{"term":"cardview"},{"term":"android tabs"},{"term":"api"},{"term":"intent"},{"term":"Firebase"},{"term":"facebook"},{"term":"toolbar"},{"term":"Gmail style"},{"term":"database"},{"term":"dialog"},{"term":"edittext"},{"term":"services"},{"term":"slidingmenu"},{"term":"BroadcastReceiver"},{"term":"android studio"},{"term":"asynctask"},{"term":"floating action button"},{"term":"picasso"},{"term":"scroll event"},{"term":"views"},{"term":"widget"},{"term":"Bottom Sheet"},{"term":"Data Binding"},{"term":"QR code"},{"term":"barcodescanner"},{"term":"bubble layout"},{"term":"content provider"},{"term":"device information"},{"term":"files"},{"term":"lock screen"},{"term":"menu"},{"term":"notification"},{"term":"pull to refresh"},{"term":"sharedpreference"},{"term":"sqlite"},{"term":"textview"},{"term":"vision API"},{"term":"webservice"},{"term":"Bottom Navigation View"},{"term":"DateTime picker"},{"term":"Input Method Framework"},{"term":"Permission"},{"term":"StackView"},{"term":"butterknife"},{"term":"camera"},{"term":"carousel layout"},{"term":"chart"},{"term":"chat application"},{"term":"checkbox"},{"term":"chip"},{"term":"downloadManager"},{"term":"event bus"},{"term":"handler"},{"term":"json"},{"term":"location"},{"term":"navigationdrawer"},{"term":"parcelable"},{"term":"progressbar"},{"term":"resources"},{"term":"searchview"},{"term":"serializable"},{"term":"soap"},{"term":"telephony API"},{"term":"volley"},{"term":"xml parser"},{"term":"Android M"},{"term":"CountdownTimer"},{"term":"JobScheduler"},{"term":"MediaPlayer"},{"term":"NestedScrollView"},{"term":"REST"},{"term":"actionbarsherlock"},{"term":"battery"},{"term":"bluetooth"},{"term":"captcha"},{"term":"chrome custom tab"},{"term":"color picker"},{"term":"crouton"},{"term":"device rotation"},{"term":"download"},{"term":"draggablepanel"},{"term":"drawing"},{"term":"expandable listview"},{"term":"font"},{"term":"fragment"},{"term":"fresco"},{"term":"gifs"},{"term":"google map"},{"term":"google plus"},{"term":"gson"},{"term":"horizontal scrollview"},{"term":"imageloader"},{"term":"jar"},{"term":"java basic"},{"term":"loader manager"},{"term":"matrix"},{"term":"nearby API"},{"term":"network info"},{"term":"ormlite"},{"term":"palette"},{"term":"pdf"},{"term":"pdfrenderer"},{"term":"popupwindow"},{"term":"ratingbar"},{"term":"scratch view"},{"term":"sensor"},{"term":"skew layout"},{"term":"slidinguppanel"},{"term":"sparkline"},{"term":"spinner"},{"term":"style"},{"term":"swipeable listview"},{"term":"switch"},{"term":"theme"},{"term":"touch"},{"term":"twitter"},{"term":"video record"},{"term":"webview"},{"term":"youtubeplayer"}],"title":{"type":"text","$t":"Learn Programming Together"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/-\/lollipop?alt=json-in-script\u0026max-results=5"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/search\/label\/lollipop"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/-\/lollipop\/-\/lollipop?alt=json-in-script\u0026start-index=6\u0026max-results=5"}],"author":[{"name":{"$t":"Hồng Thái"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"10"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"5"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-7169371403355054888"},"published":{"$t":"2016-09-14T15:44:00.000+07:00"},"updated":{"$t":"2016-09-22T11:11:11.696+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"activity"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"animation"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Meaningful motion for Activities transition in Android Lollipop"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; As we can see at Material Design specs:\u003Cbr \/\u003E\u003Cblockquote style=\"background-color: white; border-left-color: rgb(0, 188, 213); border-left-style: solid; border-width: 0px 0px 0px 2px; color: #444444; font-family: 'Open Sans', Arial, Verdana; font-size: 16px; font-style: italic; line-height: 27.4286px; margin: 0px 2rem 1rem; padding: 0.5rem; quotes: none; text-align: justify; vertical-align: baseline;\"\u003E\u003Cdiv style=\"border: 0px; line-height: 1.8; padding: 0px; vertical-align: baseline;\"\u003E\u003Cspan style=\"line-height: 1.8;\"\u003EMotion in the world of material design is used to describe spatial relationships, functionality, and intention with beauty and fluidity. Motion design can effectively guide the user’s attention in ways that both inform and delight. Use motion to smoothly transport users between navigational contexts, explain changes in the arrangement of elements on a screen, and reinforce element hierarchy.\u003C\/span\u003E\u003C\/div\u003E\u003C\/blockquote\u003E\u0026nbsp; \u0026nbsp; From API 21, Material Design has bring us the new way to switch \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActivity\u003C\/code\u003E (activity transition) with animations and of course, the element located on these screen\u0026nbsp;are also affected by this transition process.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We must apply those animations carefully to avoid the app become a true \u003Cb\u003EPixar animation movie\u003C\/b\u003E. In this post, I will present some customizing of Material meaningful motion, make our application look smoothly.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/AMqybxvEjp4\/default.jpg?sqp=CMCW474F\u0026amp;rs=AOn4CLCifoFN7cAp6wS3UnXFnNtxnjaiRA\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/AMqybxvEjp4?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPrerequisites\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to custom\u003Ci\u003E activity transition \u003C\/i\u003Eand other \u003Ci\u003Erelated animations\u003C\/i\u003E, make sure that your \u003Ci\u003Emin-sdk\u003C\/i\u003E of your project is \u003Cb\u003E\u003Ci\u003E21 \u003C\/i\u003E\u003C\/b\u003Eor higher. I also add some necessary dependencies which use for my sample project later: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eapp\/build.gradle\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Eapply plugin: 'com.android.application'\u003Cbr \/\u003E\u003Cbr \/\u003Eandroid {\u003Cbr \/\u003E    compileSdkVersion 24\u003Cbr \/\u003E    buildToolsVersion \"24.0.2\"\u003Cbr \/\u003E\u003Cbr \/\u003E    defaultConfig {\u003Cbr \/\u003E        applicationId \"info.devexchanges.uimotion\"\u003Cbr \/\u003E        minSdkVersion 21\u003Cbr \/\u003E        targetSdkVersion 24\u003Cbr \/\u003E        versionCode 1\u003Cbr \/\u003E        versionName \"1.0\"\u003Cbr \/\u003E    }\u003Cbr \/\u003E    buildTypes {\u003Cbr \/\u003E        release {\u003Cbr \/\u003E            minifyEnabled false\u003Cbr \/\u003E            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003Cbr \/\u003Edependencies {\u003Cbr \/\u003E    compile fileTree(dir: 'libs', include: ['*.jar'])\u003Cbr \/\u003E    compile 'com.android.support:appcompat-v7:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:design:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:gridlayout-v7:24.2.0'\u003Cbr \/\u003E    compile 'com.android.support:cardview-v7:24.2.0'\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom Activity Transitions in xml\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Before Android Lollipop (API Level 21) we could only customize the activity transition animation over entire activity. All views were animated together. But now we can specify how each view is animated during that transition.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Suppose I have 3 activities: the first called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E which display \u003Ci\u003E3 pictures\u003C\/i\u003E and after click at any one, app will redirect user to second activity to show selected picture descriptions (called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E). This activity contains a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EFloatingActionButton\u003C\/code\u003E, when click on it, a translucent activity (\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E) appears which give some options to shared the content. It has a yellow shape which is a drawable defined as image source of a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E. Now, we'll custom some animations based on xml resources.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Create a folder named \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Etransaction\u003C\/code\u003E in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eres\u003C\/code\u003E directory, all animations xml files will put here.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We can specify custom animations for \u003Ci\u003Eenter\u003C\/i\u003E and \u003Ci\u003Eexit\u003C\/i\u003E transitions and for transitions of \u003Ci\u003Eshared elements\u003C\/i\u003E\u0026nbsp;between activities.\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EAn \u003Ci\u003Eenter\u003C\/i\u003E transition determines how views move into the initial scene of the started activity.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EAn \u003Ci\u003Eexit\u003C\/i\u003E transition determines how views move out of the scene when starting a new activity.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EA \u003Ci\u003Eshared elements\u003C\/i\u003E transition determines how views are shared between two activities transition.\u003C\/li\u003E\u003C\/ul\u003EThese are all xml files that defining animation for transacting from \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E: and showing translucent \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E:\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emain_reenter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;slide xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:slideEdge=\"top\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;targets\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E\u0026lt;\/slide\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emain_exit.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;explode xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;targets\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E\u0026lt;\/explode\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Edetail_enter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E               android:transitionOrdering=\"together\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;slide\u003Cbr \/\u003E        android:slideEdge=\"bottom\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:targetId=\"@id\/cardview\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/slide\u0026gt;\u003Cbr \/\u003E    \u0026lt;fade\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@android:id\/statusBarBackground\"\/\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@android:id\/navigationBarBackground\"\/\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@id\/cardview\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/fade\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Esharing_shared_element_enter.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E               android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeBounds\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;arcMotion\u003Cbr \/\u003E        android:maximumAngle=\"90\"\u003Cbr \/\u003E        android:minimumHorizontalAngle=\"90\"\u003Cbr \/\u003E        android:minimumVerticalAngle=\"0\"\/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Esharing_item_chosen.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;transitionSet xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeBounds\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;fade\u0026gt;\u003Cbr \/\u003E        \u0026lt;targets\u0026gt;\u003Cbr \/\u003E            \u0026lt;target android:excludeId=\"@id\/content_root\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/targets\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/fade\u0026gt;\u003Cbr \/\u003E    \u0026lt;changeImageTransform android:startDelay=\"@android:integer\/config_mediumAnimTime\"\/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/transitionSet\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Activity transition definitions can be declared into theme style and our \u003Cb\u003Eres\/values\/styles.xml\u003C\/b\u003E contains all this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Estyles.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimary\"\u0026gt;@color\/colorPrimary\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimaryDark\"\u0026gt;@color\/colorPrimaryDark\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorAccent\"\u0026gt;@color\/colorAccent\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Main\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowExitTransition\"\u0026gt;@transition\/main_exit\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowReenterTransition\"\u0026gt;@transition\/main_reenter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Detail\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowTranslucentStatus\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowAllowEnterTransitionOverlap\"\u0026gt;false\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowEnterTransition\"\u0026gt;@transition\/detail_enter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme.Sharing\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowIsTranslucent\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowBackground\"\u0026gt;@color\/black\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowTranslucentStatus\"\u0026gt;true\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowSharedElementEnterTransition\"\u0026gt;@transition\/sharing_shared_element_enter\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"ShareItemView\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:layout_width\"\u0026gt;wrap_content\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:layout_height\"\u0026gt;wrap_content\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:background\"\u0026gt;?android:attr\/selectableItemBackgroundBorderless\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:textAppearance\"\u0026gt;@style\/TextAppearance.AppCompat.Medium.Inverse\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And never forget to use the correct theme for each activity in AndroidManifest.xml: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    package=\"info.devexchanges.uimotion\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;application\u003Cbr \/\u003E        android:allowBackup=\"true\"\u003Cbr \/\u003E        android:icon=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E        android:label=\"@string\/app_name\"\u003Cbr \/\u003E        android:supportsRtl=\"true\"\u003Cbr \/\u003E        android:theme=\"@style\/AppTheme.Main\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MAIN\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E                \u0026lt;category android:name=\"android.intent.category.LAUNCHER\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".DetailsActivity\"\u003Cbr \/\u003E            android:theme=\"@style\/AppTheme.Detail\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".SharingActivity\"\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/application\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/manifest\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETransition from Main screen to Detail screen\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When user clicks on some image item, we must start the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E with some information that indicates we’re starting a Customized Activity Transition. In \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E we have: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onClick(View view) {\u003Cbr \/\u003E        if (view.getId() == R.id.rose) {\u003Cbr \/\u003E            openDetailActivity(R.drawable.rose, \"Rose\", view);\u003Cbr \/\u003E        } else if (view.getId() == R.id.sunflower) {\u003Cbr \/\u003E            openDetailActivity(R.drawable.sunflower, \"Sunflower\", view);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            openDetailActivity(R.drawable.tulip, \"Tulip\", view);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void openDetailActivity(int drawable, String title, View view) {\u003Cbr \/\u003E        ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(this, view, getString(R.string.picture_transition_name));\u003Cbr \/\u003E        Intent intent = new Intent(this, DetailsActivity.class);\u003Cbr \/\u003E        intent.putExtra(DetailsActivity.EXTRA_DRAWABLE, drawable);\u003Cbr \/\u003E        intent.putExtra(DetailsActivity.EXTRA_TITLE, title);\u003Cbr \/\u003E\u003Cbr \/\u003E        startActivity(intent, options.toBundle());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The most important method is \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActivityOptions.makeSceneTransitionAnimation()\u003C\/code\u003E. It create an object containing information about our scene transition animation.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; As you see, I pass \u003Ci\u003Edrawable id\u003C\/i\u003E\u0026nbsp;and string title \u0026nbsp;from \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EMainActivity\u003C\/code\u003E to setup \u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECollapsingToolbarLayout\u003C\/code\u003E and \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EDetailsActivity\u003C\/code\u003E. To finish the our motion from main to details screen we just scale up the share button when the transition is ended: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_details);\u003Cbr \/\u003E        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));\u003Cbr \/\u003E\u003Cbr \/\u003E        int drawable = getIntent().getExtras().getInt(EXTRA_DRAWABLE);\u003Cbr \/\u003E        CharSequence title = getIntent().getExtras().getCharSequence(EXTRA_TITLE);\u003Cbr \/\u003E\u003Cbr \/\u003E        CollapsingToolbarLayout collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\u003Cbr \/\u003E        collapsingToolbarLayout.setTitle(title);\u003Cbr \/\u003E\u003Cbr \/\u003E        ImageView pictureView = (ImageView) findViewById(R.id.picture);\u003Cbr \/\u003E        pictureView.setImageResource(drawable);\u003Cbr \/\u003E        pictureView.setContentDescription(title);\u003Cbr \/\u003E\u003Cbr \/\u003E        btnShare = findViewById(R.id.btn_share);\u003Cbr \/\u003E        textView = (TextView) findViewById(R.id.text);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (drawable == R.drawable.rose) {\u003Cbr \/\u003E            textView.setText(getString(R.string.rose));\u003Cbr \/\u003E        } else if (drawable == R.drawable.tulip) {\u003Cbr \/\u003E            textView.setText(getString(R.string.tulip));\u003Cbr \/\u003E        } else textView.setText(getString(R.string.sunflower));\u003Cbr \/\u003E\u003Cbr \/\u003E        if (savedInstanceState == null) {\u003Cbr \/\u003E            btnShare.setScaleX(0);\u003Cbr \/\u003E            btnShare.setScaleY(0);\u003Cbr \/\u003E            getWindow().getEnterTransition().addListener(new TransitionAdapter() {\u003Cbr \/\u003E                @Override\u003Cbr \/\u003E                public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                    getWindow().getEnterTransition().removeListener(this);\u003Cbr \/\u003E                    btnShare.animate().scaleX(1).scaleY(1);\u003Cbr \/\u003E                }\u003Cbr \/\u003E            });\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; But if we are scaling up the share button when the Activity is opened then we have to scale down when the activity is finished: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onBackPressed() {\u003Cbr \/\u003E        btnShare.animate().scaleX(0).scaleY(0).setListener(new AnimatorListenerAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onAnimationEnd(Animator animation) {\u003Cbr \/\u003E                supportFinishAfterTransition();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And when running app, we have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/KcSVd0b.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/KcSVd0b.gif\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETransition from Detail screen to Sharing screen\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Launching \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E after click on the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EFloatingActionButton\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EbtnShare.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                ActivityOptions options = ActivityOptions.makeSceneTransitionAnimation(DetailsActivity.this,\u003Cbr \/\u003E                        btnShare, getString(R.string.share_transition_name));\u003Cbr \/\u003E                Intent intent = new Intent(DetailsActivity.this, SharingActivity.class);\u003Cbr \/\u003E                startActivity(intent, options.toBundle());\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E, we have to setup initial states before the animation begin: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        rootView = (ViewGroup) findViewById(R.id.content_root);\u003Cbr \/\u003E        backgroundView = (ImageView) findViewById(R.id.background);\u003Cbr \/\u003E        btnFacebook = findViewById(R.id.facebook);\u003Cbr \/\u003E        btnInstagram = findViewById(R.id.instagram);\u003Cbr \/\u003E        btnTwitter = findViewById(R.id.twitter);\u003Cbr \/\u003E        btnGoogle = findViewById(R.id.google_plus);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (savedInstanceState == null) {\u003Cbr \/\u003E            \/\/ Setup initial states\u003Cbr \/\u003E            backgroundView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E            btnGoogle.setAlpha(0);\u003Cbr \/\u003E            btnTwitter.setAlpha(0);\u003Cbr \/\u003E            btnFacebook.setAlpha(0);\u003Cbr \/\u003E            btnInstagram.setAlpha(0);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        getWindow().getSharedElementEnterTransition().addListener(new TransitionAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                getWindow().getSharedElementEnterTransition().removeListener(this);\u003Cbr \/\u003E                revealTheBackground();\u003Cbr \/\u003E                showTheItems();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        ...\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The main work in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESharingActivity\u003C\/code\u003E is handling share items (buttons) click. The pure Transition Framework was added since Android API 19. This framework animates the views at runtime by changing some of their property values over time. One of the features is the ability of running animations based on the changes between starting and ending view property values: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onClick(View view) {\u003Cbr \/\u003E        showToast(view.getId());\u003Cbr \/\u003E        \/\/ Load the transition\u003Cbr \/\u003E        Transition transition = TransitionInflater.from(this).inflateTransition(R.transition.sharing_item_chosen);\u003Cbr \/\u003E        \/\/ Finish this Activity when the transition is ended\u003Cbr \/\u003E        transition.addListener(new TransitionAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onTransitionEnd(Transition transition) {\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E                \/\/ Override default transition to fade out\u003Cbr \/\u003E                overridePendingTransition(0, android.R.anim.fade_out);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E        \/\/ Capture current values in the scene root and then post a request to run a transition on the next frame\u003Cbr \/\u003E        TransitionManager.beginDelayedTransition(rootView, transition);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 1. Item chosen\u003Cbr \/\u003E        RelativeLayout.LayoutParams layoutParams =\u003Cbr \/\u003E                new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT, RelativeLayout.LayoutParams.WRAP_CONTENT);\u003Cbr \/\u003E        layoutParams.addRule(RelativeLayout.CENTER_IN_PARENT);\u003Cbr \/\u003E        view.setLayoutParams(layoutParams);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 2. Rest of items\u003Cbr \/\u003E        View[] itemViews = {btnFacebook, btnInstagram, btnTwitter, btnGoogle};\u003Cbr \/\u003E        for (View itemView : itemViews) {\u003Cbr \/\u003E            if (itemView != view) {\u003Cbr \/\u003E                itemView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ 3. Background\u003Cbr \/\u003E        double diagonal = Math.sqrt(rootView.getHeight() * rootView.getHeight() + rootView.getWidth() * rootView.getWidth());\u003Cbr \/\u003E        float radius = (float) (diagonal \/ 2f);\u003Cbr \/\u003E        int h = backgroundView.getDrawable().getIntrinsicHeight();\u003Cbr \/\u003E        float scale = radius \/ (h \/ 2f);\u003Cbr \/\u003E        Matrix matrix = new Matrix(backgroundView.getImageMatrix());\u003Cbr \/\u003E        matrix.postScale(scale, scale, backgroundView.getWidth() \/ 2f, backgroundView.getHeight() \/ 2f);\u003Cbr \/\u003E        backgroundView.setScaleType(ImageView.ScaleType.MATRIX);\u003Cbr \/\u003E        backgroundView.setImageMatrix(matrix);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Moreover, override \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EonBackPressed()\u003C\/code\u003E to start the hide animation of item and background: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate void hideTheBackground() {\u003Cbr \/\u003E        Animator hide = createRevealAnimator(false);\u003Cbr \/\u003E        hide.setStartDelay(defaultAnimDuration);\u003Cbr \/\u003E        hide.addListener(new AnimatorListenerAdapter() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onAnimationEnd(Animator animation) {\u003Cbr \/\u003E                backgroundView.setVisibility(View.INVISIBLE);\u003Cbr \/\u003E                supportFinishAfterTransition();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E        hide.start();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBackPressed() {\u003Cbr \/\u003E        hideTheItems();\u003Cbr \/\u003E        hideTheBackground();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void hideTheItems() {\u003Cbr \/\u003E        View[] itemViews = {btnFacebook, btnInstagram, btnTwitter, btnGoogle};\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; itemViews.length; i++) {\u003Cbr \/\u003E            View itemView = itemViews[i];\u003Cbr \/\u003E            long startDelay = (defaultAnimDuration \/ itemViews.length) * (itemViews.length - i);\u003Cbr \/\u003E            itemView.animate().alpha(0).setStartDelay(startDelay);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And we'll have this result: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/v8vL6BF.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/v8vL6BF.gif\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFinal thoughts\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I have presented a simple project about applying motion in our application to avoid a bad User Experience. In this sample app, we saw how to build beautiful apps with meaningful and delightful motion. And below are some links where you can go deeper into Android Motion:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EDefining Custom Animation in \u003Ca href=\"https:\/\/developer.android.com\/training\/material\/animations.html\" target=\"_blank\"\u003EGoogle training\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EMaterial design motion in \u003Ca href=\"https:\/\/material.google.com\/motion\/material-motion.html\" target=\"_blank\"\u003EGoogle design\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/MPuwx\" target=\"_blank\"\u003EView on Github\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/7169371403355054888\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/09\/meaningful-transition-motion-for.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7169371403355054888"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7169371403355054888"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/09\/meaningful-transition-motion-for.html","title":"Meaningful motion for Activities transition in Android Lollipop"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/AMqybxvEjp4\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-539474343090457267"},"published":{"$t":"2016-08-22T16:47:00.000+07:00"},"updated":{"$t":"2016-09-22T11:23:15.889+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"library"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"},{"scheme":"http://www.blogger.com/atom/ns#","term":"palette"},{"scheme":"http://www.blogger.com/atom/ns#","term":"static image"}],"title":{"type":"text","$t":"Pick colors from Images by Palette in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Android Lollipop has bring us a lot of new APIs through Material design technology. One of the defining features of Material design is the use of color to compliment and emphasize content on the screen. Today, I would like to present a new library called \u003Cb\u003EPalette\u003C\/b\u003E which can help you to pick colors from an image dynamically. For example if you are building an image intensive app, where user experience is of prime importance you can use \u003Ci\u003EPalette\u003C\/i\u003E to extract colors from the image on screen. Further these colors could be used at prominent spaces on your screen to blend the image into your app screen. Now days a lot of effort is being spent on building a good user experience for android apps. This Palette library is something completely new which could revolutionize the user experience in Android apps.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; As we think, extracting colors from an image is very much complicated but now with Palette library, it become  very simple to pick relevant colors from it. Now, let's take a studying in it!\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EImporting Palette\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; To get started, you will need to import the palette support library into your project by including the following line in the dependencies node of your application level \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Ebuild.gradle\u003C\/code\u003E file: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'com.android.support:palette-v7:24.1.1'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EGenerating Palette from Bitmap\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There are two ways to make a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette\u003C\/code\u003E object from Bitmap. This can be done using the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette.Builder\u003C\/code\u003E either synchronously by calling the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Egenerate()\u003C\/code\u003E method without any parameters, or asynchronously by calling \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Egenerate(Palette.PaletteAsyncListener listener)\u003C\/code\u003E. Because it can take time to create the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette\u003C\/code\u003E, it is recommended that the synchronous method only be called from a background thread.\u003Cbr \/\u003ECode may be like this: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EBitmap bitmap = BitmapFactory.decodeResource( getResources(), R.drawable.hanoi_capital);\u003Cbr \/\u003EPalette.from(imageBitmap).generate(new PaletteAsyncListener() {\u003Cbr \/\u003E    public void onGenerated(Palette p) {\u003Cbr \/\u003E        \/\/ Use generated palette\u003Cbr \/\u003E    }\u003Cbr \/\u003E});\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ESwatches\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Contained within each \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette\u003C\/code\u003E is a set of \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatch\u003C\/code\u003E objects that will allow you to work with specific color profiles and a list of visible colors from the image. When an image is used to generate a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette\u003C\/code\u003E we can optionally specify the number of \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatches\u003C\/code\u003E we want from that image. In case we don’t specify the number (like this example), \u003Cb\u003E\u003Ci\u003E16\u003C\/i\u003E\u003C\/b\u003E \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatches\u003C\/code\u003E would be returned. But, there are some important \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatches\u003C\/code\u003E which have name:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003EVibrant\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EPalette.getVibrantSwatch()\u003C\/code\u003E method to get it.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EVibrant dark\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetDarkVibrantSwatch()\u003C\/code\u003E\u0026nbsp; to get it.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EVibrant light\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetLightVibrantSwatch()\u003C\/code\u003E\u0026nbsp; to get it.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EMute\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetMutedSwatch()\u003C\/code\u003E\u0026nbsp; to get it.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EMuted dark\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetDarkMutedSwatch()\u003C\/code\u003E\u0026nbsp; to get it.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EMuted light\u003C\/b\u003E: called \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetLightMutedSwatch()\u003C\/code\u003E to get it.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; There are some important methods in the\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatch\u003C\/code\u003E class:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetRgb()\u003C\/code\u003E: Returns the color in RGB value.\u003C\/li\u003E\u003Cli\u003E\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetPopulation()\u003C\/code\u003E: return\u0026nbsp;the quantity of pixels represented by this swatch.\u003C\/li\u003E\u003Cli\u003E\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetTitleTextColor()\u003C\/code\u003E: returns the title color in RGB value. A color in contrast with the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatch\u003C\/code\u003E color, safe to use on top of swatch as title text color.\u003C\/li\u003E\u003Cli\u003E\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EgetBodyTextColor()\u003C\/code\u003E: Returns an appropriate color to use for any 'body' text which is displayed over this \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatch\u003C\/code\u003E color. This color is guaranteed to have sufficient contrast.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EThe sample project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, I provide an example project about using this library on Android UI. Firstly, declaring a main activity layout simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.androidpalette.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:src=\"@drawable\/hanoi_capital\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"300dp\"\u003Cbr \/\u003E        android:scaleType=\"fitXY\"\u003Cbr \/\u003E        android:text=\"Hello World!\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ListView\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:id=\"@+id\/list_color\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And it's Java code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidpalette;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.graphics.Bitmap;\u003Cbr \/\u003Eimport android.graphics.BitmapFactory;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.graphics.Palette;\u003Cbr \/\u003Eimport android.widget.ListView;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private ListView listView;\u003Cbr \/\u003E    private SwatchesAdapter swatchesAdapter;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E        listView = (ListView) findViewById(R.id.list_color);\u003Cbr \/\u003E\u003Cbr \/\u003E        swatchesAdapter = new SwatchesAdapter(this);\u003Cbr \/\u003E        listView.setAdapter(swatchesAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/get bitmap from drawable resource\u003Cbr \/\u003E        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.hanoi_capital);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/generating Palette from this bitmap\u003Cbr \/\u003E        Palette.from(bitmap).generate(new Palette.PaletteAsyncListener() {\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onGenerated(Palette palette) {\u003Cbr \/\u003E                for (Palette.Swatch swatch : palette.getSwatches()) {\u003Cbr \/\u003E                    swatchesAdapter.add(swatch);\u003Cbr \/\u003E                }\u003Cbr \/\u003E                swatchesAdapter.sortSwatches();\u003Cbr \/\u003E                swatchesAdapter.notifyDataSetChanged();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, I display the \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ESwatches\u003C\/code\u003E collection into a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EListView\u003C\/code\u003E, so this is it's adapter: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ESwatchesAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidpalette;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.support.v7.graphics.Palette;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ArrayAdapter;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Comparator;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class SwatchesAdapter extends ArrayAdapter\u003Cpalette .swatch=\"\"\u003E {\u003Cbr \/\u003E\u003Cbr \/\u003E    public SwatchesAdapter(Context context) {\u003Cbr \/\u003E        super(context, 0);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View getView(int position, View convertView, ViewGroup parent) {\u003Cbr \/\u003E        ViewHolder holder;\u003Cbr \/\u003E        if (convertView == null) {\u003Cbr \/\u003E            holder = new ViewHolder();\u003Cbr \/\u003E            convertView = LayoutInflater.from(getContext()).inflate(R.layout.color_item, parent, false);\u003Cbr \/\u003E            holder.view = (TextView) convertView.findViewById(R.id.view);\u003Cbr \/\u003E            convertView.setTag(holder);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            holder = (ViewHolder) convertView.getTag();\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        holder.view.setBackgroundColor(getItem(position).getRgb());\u003Cbr \/\u003E        holder.view.setTextColor(getItem(position).getBodyTextColor());\u003Cbr \/\u003E        holder.view.setText(String.format(\"Population: %d\", getItem(position).getPopulation()));\u003Cbr \/\u003E\u003Cbr \/\u003E        return convertView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void sortSwatches() {\u003Cbr \/\u003E        sort(new Comparator\u003Cpalette .swatch=\"\"\u003E() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public int compare(Palette.Swatch lhs, Palette.Swatch rhs) {\u003Cbr \/\u003E                return rhs.getPopulation() - lhs.getPopulation();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public class ViewHolder {\u003Cbr \/\u003E        TextView view;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/palette\u003E\u003C\/palette\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this activity, we have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/zIkexer.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/zIkexer.gif\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Through this post, you have learned one more widget in Material design technology, which can help us extracting swatches of color from a bitmap. This will allow you to customize your user interface elements, such as backgrounds and text, so that they compliment images within your application. To deep understanding about this API, you can read the \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/support\/v7\/graphics\/Palette.html\" target=\"_blank\"\u003Eofficial document\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E from Google to learn more! Thanks for reading! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/MPovy\" target=\"_blank\"\u003EView source code on Github\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/539474343090457267\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/08\/pick-colors-from-images-by-palette-in.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/539474343090457267"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/539474343090457267"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/08\/pick-colors-from-images-by-palette-in.html","title":"Pick colors from Images by Palette in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-7154769843568185314"},"published":{"$t":"2016-01-28T11:28:00.002+07:00"},"updated":{"$t":"2016-02-29T10:04:24.312+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"dialog"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Android tip: AlertDialog with Material Design style in pre-Lollipop devices"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; With the appearance of Material Design, we - the Android developers - always would like to bring this design style to the pre-Lollipop devices. \u003Cb\u003E\u003Ci\u003EAppcompat support library\u003C\/i\u003E\u003C\/b\u003E was released, it's very helpful with us with this problem.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In this small tip, I would like to guide about building a AlertDialog with Material Design in Android KitKat and lower by using\u0026nbsp;\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/developer.android.com\/tools\/support-library\/features.html#v7\" target=\"_blank\"\u003Ev7 appcompat library\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/rCfqxqf.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/rCfqxqf.png\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDefault Material Design Dialog\u003C\/h3\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Usually, we use \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eandroid.app.AlertDialog\u003C\/code\u003E with \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EBuilder\u003C\/code\u003E to initializing an alert dialog in Android. For example, see below code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003EMainActivity.java\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.materialalertdialog;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.AlertDialog;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.Button;\u003Cbr \/\u003Eimport android.widget.LinearLayout.LayoutParams;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        LayoutParams params = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);\u003Cbr \/\u003E        Button button = new Button(this);\u003Cbr \/\u003E        button.setText(\"Show AlertDialog\");\u003Cbr \/\u003E        button.setLayoutParams(params);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(button);\u003Cbr \/\u003E\u003Cbr \/\u003E        button.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);\u003Cbr \/\u003E                builder.setTitle(\"Material Style Dialog\");\u003Cbr \/\u003E                builder.setCancelable(true);\u003Cbr \/\u003E                builder.setMessage(getResources().getString(R.string.lorem_ipsum));\u003Cbr \/\u003E                builder.setPositiveButton(\"OK\", null);\u003Cbr \/\u003E                builder.setNegativeButton(\"Cancel\", null);\u003Cbr \/\u003E                builder.show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Our \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActivity\u003C\/code\u003E contains only a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EButton\u003C\/code\u003E and after click, an \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAlertDialog\u003C\/code\u003E with\u0026nbsp;familiar style will appear:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/31G9Xbn.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/31G9Xbn.png\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp;Now, we go to the main story, by change the importing line: \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: 'source code pro', monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cspan style=\"color: #990000;\"\u003Eimport android.app.AlertDialog\u003C\/span\u003E\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: 'source code pro', monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cspan style=\"color: #990000;\"\u003Eimport android.support.v7.app.AlertDialog\u003C\/span\u003E\u003C\/code\u003E and re-run project, we will have a Material Design \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAlertDialog\u003C\/code\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/kqf8eC2.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/kqf8eC2.png\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EImportant NOTE\u003C\/u\u003E\u003C\/b\u003E: In Lollipop devices, \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAlertDialogs\u003C\/code\u003E are always in Material Design style.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EStyling Material Design style Dialog\u003C\/h3\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Styling it like other Dialog themes (like \u003Ci\u003EHolo theme\u003C\/i\u003E, \u003Ci\u003ETranslucent theme\u003C\/i\u003E,...) by customizing \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Estyles.xml\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003Estyles.xml\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimary\"\u0026gt;@color\/colorPrimary\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimaryDark\"\u0026gt;@color\/colorPrimaryDark\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorAccent\"\u0026gt;@color\/colorAccent\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"alertDialogTheme\"\u0026gt;@style\/AppCompatAlertDialogStyle\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"AppCompatAlertDialogStyle\" parent=\"Theme.AppCompat.Light.Dialog.Alert\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorAccent\"\u0026gt;@color\/dialog_button\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:textColorPrimary\"\u0026gt;@android:color\/white\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:windowTitleStyle\"\u0026gt;@style\/WindowTitleStyle\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:background\"\u0026gt;@color\/dialog_background\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;style name=\"WindowTitleStyle\" parent=\"TextAppearance.AppCompat.Title\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:textColor\"\u0026gt;@color\/dialog_title\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"android:textStyle\"\u0026gt;bold\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003Ecolors.xml\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"colorPrimary\"\u0026gt;#0aaf0f\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"colorPrimaryDark\"\u0026gt;#225e1a\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"colorAccent\"\u0026gt;#FF4081\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"dialog_background\"\u0026gt;#5fa3d0\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"dialog_button\"\u0026gt;#f5ef3c\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"dialog_title\"\u0026gt;#be3c08\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003Cbr \/\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And the output was changed:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/f21bZN4.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/f21bZN4.png\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now it’s over, you’re ready to style your alert dialogs like a pro! Please design something nicer than this ugly rectangle I came up with. Moreover, you can look at 3rd-libraries like \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/afollestad\/material-dialogs\" target=\"_blank\"\u003Ematerial-dialogs\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/drakeet\/MaterialDialog\" target=\"_blank\"\u003EMaterialDialog\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E,... I think they're quite well!\u0026nbsp;As a final word, did I use this \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAlertDialog\u003C\/code\u003E style in my app? No, because in my opinion, I feel Holo dialogs theme is best,\u0026nbsp;it looks much better than the Material Design one. :("},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/7154769843568185314\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/01\/android-tip-alertdialog-with-material.html#comment-form","title":"1 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7154769843568185314"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7154769843568185314"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/01\/android-tip-alertdialog-with-material.html","title":"Android tip: AlertDialog with Material Design style in pre-Lollipop devices"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"1"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5280558127322132612"},"published":{"$t":"2015-10-12T11:09:00.006+07:00"},"updated":{"$t":"2016-10-06T10:35:11.394+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"actionbar"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"},{"scheme":"http://www.blogger.com/atom/ns#","term":"recyclerview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"toolbar"}],"title":{"type":"text","$t":"Android Material Design: Expanding\/Collapsing ActionBar\/Toolbar and more animations when scrolling screen"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; \u0026nbsp;With Meterial Design technology, it has become easier for us to create some great animations with minimal effort. By this, \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E is alternative to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EActionBar\u003C\/code\u003E, this change provides a lot of customizing options. Moreover, some new widgets like \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECoordinatorLayout\u003C\/code\u003E,\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECollapsingToolbarLayout\u003C\/code\u003E,\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAppBarLayout\u003C\/code\u003E,... will help us to make a \u003Ci\u003Eparallax\u003C\/i\u003E \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E, \u003Ci\u003Eexpansible\/collapsible\u003C\/i\u003E \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E and other animations.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;In this post, I will present the way to make above design, please watch my \u003Cb\u003E\u003Cspan style=\"color: #38761d;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E first:\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i.ytimg.com\/vi\/lF1ztIw3E6w\/0.jpg\" frameborder=\"0\" height=\"366\" src=\"https:\/\/www.youtube.com\/embed\/lF1ztIw3E6w?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EExpansible\/Collapsible Toolbar\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We design layout in xml file. The widget which use to set \"Action Bar area\" is \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAppBarLayout\u003C\/code\u003E. First, putting a \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E object in it: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.design.widget.AppBarLayout\u003Cbr \/\u003E       android:layout_width=\"match_parent\"\u003Cbr \/\u003E       android:layout_height=\"180dp\"\u003Cbr \/\u003E       android:theme=\"@style\/ThemeOverlay.AppCompat.Dark\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E       \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E           android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E           android:layout_width=\"match_parent\"\u003Cbr \/\u003E           android:layout_height=\"?attr\/actionBarSize\"\/\u0026gt;\u003Cbr \/\u003E     \u003Cbr \/\u003E   \u0026lt;\/android.support.design.widget.AppBarLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to make a Collapsible \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E, use \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECollapsingToolbarLayout\u003C\/code\u003E to wrap our own \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.design.widget.AppBarLayout\u003Cbr \/\u003E       android:layout_width=\"match_parent\"\u003Cbr \/\u003E       android:layout_height=\"180dp\"\u003Cbr \/\u003E       android:theme=\"@style\/ThemeOverlay.AppCompat.Dark\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E       \u0026lt;android.support.design.widget.CollapsingToolbarLayout\u003Cbr \/\u003E           android:id=\"@+id\/collapse_toolbar\"\u003Cbr \/\u003E           android:layout_width=\"match_parent\"\u003Cbr \/\u003E           android:layout_height=\"match_parent\"\u003Cbr \/\u003E           app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E           \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E               android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E               android:layout_width=\"match_parent\"\u003Cbr \/\u003E               android:layout_height=\"?attr\/actionBarSize\"\u003Cbr \/\u003E               app:layout_collapseMode=\"pin\" \/\u0026gt;\u003Cbr \/\u003E       \u0026lt;\/android.support.design.widget.CollapsingToolbarLayout\u0026gt;\u003Cbr \/\u003E   \u0026lt;\/android.support.design.widget.AppBarLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, set\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eapp:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\u003C\/code\u003E property to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECollapsingToolbarLayout\u003C\/code\u003E and\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eapp:layout_collapseMode=\"pin\"\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E to make this effect. Finally, put root container layout is \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECoordinatorLayout\u003C\/code\u003E (A powerful \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EFrameLayout\u003C\/code\u003E that specifies behavior for child views for various interactions. Allows floating views to be anchored in layout), we've completed our xml design: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_expand_toolbar.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:id=\"@+id\/main_content\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:fitsSystemWindows=\"true\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E        android:id=\"@+id\/recycler\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        app:layout_behavior=\"@string\/appbar_scrolling_view_behavior\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.design.widget.AppBarLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"180dp\"\u003Cbr \/\u003E        android:theme=\"@style\/ThemeOverlay.AppCompat.Dark\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E        \u0026lt;android.support.design.widget.CollapsingToolbarLayout\u003Cbr \/\u003E            android:id=\"@+id\/collapse_toolbar\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"match_parent\"\u003Cbr \/\u003E            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E            \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E                android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E                android:layout_width=\"match_parent\"\u003Cbr \/\u003E                android:layout_height=\"?attr\/actionBarSize\"\u003Cbr \/\u003E                app:layout_collapseMode=\"pin\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/android.support.design.widget.CollapsingToolbarLayout\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/android.support.design.widget.AppBarLayout\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E\u0026lt;\/android.support.design.widget.CoordinatorLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EImportant\u0026nbsp;note\u003C\/u\u003E\u003C\/b\u003E: put\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eandroid:fitsSystemWindows=\"true\"\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECoordinatorLayout\u003C\/code\u003E is final design step and use \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ERecyclerView\u003C\/code\u003E instead of \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EListView\u003C\/code\u003E (this design not support for it), this effect will be active.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In the activity programmatically code, set dummy data, layout manager for our \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ERecyclerView\u003C\/code\u003E to get running: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EExpandableToolBarActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage devexchanges.info.expandcollapseactionbar.activities;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.design.widget.CollapsingToolbarLayout;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.support.v7.widget.Toolbar;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport devexchanges.info.expandcollapseactionbar.R;\u003Cbr \/\u003Eimport devexchanges.info.expandcollapseactionbar.adapter.RecyclerAdapter;\u003Cbr \/\u003E \u003Cbr \/\u003Epublic class ExpandableToolBarActivity extends AppCompatActivity {\u003Cbr \/\u003E \u003Cbr \/\u003E    private ArrayList\u0026lt;String\u0026gt; stringArrayList;\u003Cbr \/\u003E    private RecyclerView recyclerView;\u003Cbr \/\u003E    private RecyclerAdapter adapter;\u003Cbr \/\u003E \u003Cbr \/\u003E    @SuppressWarnings(\"ConstantConditions\")\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_expand_toolbar);\u003Cbr \/\u003E \u003Cbr \/\u003E        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\u003Cbr \/\u003E        setSupportActionBar(toolbar);\u003Cbr \/\u003E        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\u003Cbr \/\u003E \u003Cbr \/\u003E        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapse_toolbar);\u003Cbr \/\u003E        collapsingToolbar.setTitle(getString(R.string.expand));\u003Cbr \/\u003E \u003Cbr \/\u003E        recyclerView = (RecyclerView) findViewById(R.id.recycler);\u003Cbr \/\u003E        recyclerView.setHasFixedSize(true);\u003Cbr \/\u003E        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E        recyclerView.setLayoutManager(layoutManager);\u003Cbr \/\u003E \u003Cbr \/\u003E        setData(); \/\/adding data to array list\u003Cbr \/\u003E        adapter = new RecyclerAdapter(this, stringArrayList);\u003Cbr \/\u003E        recyclerView.setAdapter(adapter);\u003Cbr \/\u003E \u003Cbr \/\u003E    }\u003Cbr \/\u003E \u003Cbr \/\u003E    private void setData() {\u003Cbr \/\u003E        stringArrayList = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E \u003Cbr \/\u003E        for (int i = 0; i \u0026lt; 100; i++) {\u003Cbr \/\u003E            stringArrayList.add(\"Item \" + (i + 1));\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After running, this screen will like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/dLBB1mB.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/dLBB1mB.gif\" height=\"400\" width=\"255\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EParallax Toolbar\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With above \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E style, if we insert an \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E to\u0026nbsp;extended area, we can make a prettier \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E with animations which called \u003Ci\u003EParallax\u003C\/i\u003E \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E. Our design xml file with this style: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_paralax_toolbar.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:fitsSystemWindows=\"true\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E        android:id=\"@+id\/recycler\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        app:layout_behavior=\"@string\/appbar_scrolling_view_behavior\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.design.widget.AppBarLayout\u003Cbr \/\u003E        android:id=\"@+id\/appbar\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"192dp\"\u003Cbr \/\u003E        android:fitsSystemWindows=\"true\"\u003Cbr \/\u003E        android:theme=\"@style\/ThemeOverlay.AppCompat.Dark.ActionBar\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E        \u0026lt;android.support.design.widget.CollapsingToolbarLayout\u003Cbr \/\u003E            android:id=\"@+id\/collapsing_toolbar\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"match_parent\"\u003Cbr \/\u003E            android:fitsSystemWindows=\"true\"\u003Cbr \/\u003E            app:contentScrim=\"?attr\/colorPrimary\"\u003Cbr \/\u003E            app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E            \u0026lt;ImageView\u003Cbr \/\u003E                android:id=\"@+id\/header\"\u003Cbr \/\u003E                android:layout_width=\"match_parent\"\u003Cbr \/\u003E                android:layout_height=\"match_parent\"\u003Cbr \/\u003E                android:background=\"@mipmap\/midu_cover\"\u003Cbr \/\u003E                android:contentDescription=\"@string\/paralax\"\u003Cbr \/\u003E                android:fitsSystemWindows=\"true\"\u003Cbr \/\u003E                android:scaleType=\"centerCrop\"\u003Cbr \/\u003E                app:layout_collapseMode=\"parallax\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E            \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E                android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E                android:layout_width=\"match_parent\"\u003Cbr \/\u003E                android:layout_height=\"?attr\/actionBarSize\"\u003Cbr \/\u003E                app:layout_collapseMode=\"pin\"\u003Cbr \/\u003E                app:popupTheme=\"@style\/ThemeOverlay.AppCompat.Light\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E        \u0026lt;\/android.support.design.widget.CollapsingToolbarLayout\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;\/android.support.design.widget.AppBarLayout\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.design.widget.FloatingActionButton\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_margin=\"10dp\"\u003Cbr \/\u003E        app:layout_anchor=\"@+id\/appbar\"\u003Cbr \/\u003E        app:layout_anchorGravity=\"bottom|right|end\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E\u0026lt;\/android.support.design.widget.CoordinatorLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003ENote\u003C\/u\u003E\u003C\/b\u003E: Remember to add\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eapp:layout_collapseMode=\"parallax\"\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EImageView\u003C\/code\u003E with this design.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Like above activity, put some programmatically code to java file to complete this screen: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EParalaxToobarActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage devexchanges.info.expandcollapseactionbar.activities;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.design.widget.CollapsingToolbarLayout;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.support.v7.widget.Toolbar;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E \u003Cbr \/\u003Eimport devexchanges.info.expandcollapseactionbar.R;\u003Cbr \/\u003Eimport devexchanges.info.expandcollapseactionbar.adapter.RecyclerAdapter;\u003Cbr \/\u003E \u003Cbr \/\u003Epublic class ParalaxToobarActivity extends AppCompatActivity {\u003Cbr \/\u003E \u003Cbr \/\u003E    private ArrayList\u0026lt;String\u0026gt; stringArrayList;\u003Cbr \/\u003E    private RecyclerView recyclerView;\u003Cbr \/\u003E    private RecyclerAdapter adapter;\u003Cbr \/\u003E \u003Cbr \/\u003E    @SuppressWarnings(\"ConstantConditions\")\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_paralax_toolbar);\u003Cbr \/\u003E \u003Cbr \/\u003E        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\u003Cbr \/\u003E        setSupportActionBar(toolbar);\u003Cbr \/\u003E        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\u003Cbr \/\u003E \u003Cbr \/\u003E        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);\u003Cbr \/\u003E        collapsingToolbar.setTitle(getString(R.string.expand));\u003Cbr \/\u003E \u003Cbr \/\u003E        recyclerView = (RecyclerView) findViewById(R.id.recycler);\u003Cbr \/\u003E        recyclerView.setHasFixedSize(true);\u003Cbr \/\u003E        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E        recyclerView.setLayoutManager(layoutManager);\u003Cbr \/\u003E \u003Cbr \/\u003E        setData(); \/\/adding data to array list\u003Cbr \/\u003E        adapter = new RecyclerAdapter(this, stringArrayList);\u003Cbr \/\u003E        recyclerView.setAdapter(adapter);\u003Cbr \/\u003E \u003Cbr \/\u003E    }\u003Cbr \/\u003E \u003Cbr \/\u003E    private void setData() {\u003Cbr \/\u003E        stringArrayList = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E \u003Cbr \/\u003E        for (int i = 0; i \u0026lt; 100; i++) {\u003Cbr \/\u003E            stringArrayList.add(\"Item \" + (i + 1));\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Output of this screen when app run:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/cjGfjNH.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/cjGfjNH.gif\" height=\"400\" width=\"251\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAuto hide Toolbar when scroll screen\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;With Material Design, we can auto hide Action Bar (\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E) without using any \"trick\" or any other external library. Of course, only need:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003ESet \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECoordinatorLayout\u003C\/code\u003E as root view (container layout) (Don't forget to set \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eandroid:fitsSystemWindows=\"true\"\u003C\/code\u003E to it).\u003C\/li\u003E\u003Cli\u003EWrap \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E in \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EAppBarLayout\u003C\/code\u003E and set \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eapp:layout_scrollFlags=\"scroll|enterAlways\"\u003C\/code\u003E property to it.\u003C\/li\u003E\u003Cli\u003ESet\u0026nbsp;\u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003Eapp:layout_behavior=\"@string\/appbar_scrolling_view_behavior\"\u003C\/code\u003E to \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ERecyclerView\u003C\/code\u003E is last step.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; And now, we have this xml file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_hidden_toolbar.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u003Cbr \/\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.design.widget.CoordinatorLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:id=\"@+id\/main_content\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:fitsSystemWindows=\"true\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E        android:id=\"@+id\/recycler\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        app:layout_behavior=\"@string\/appbar_scrolling_view_behavior\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;android.support.design.widget.AppBarLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:theme=\"@style\/ThemeOverlay.AppCompat.Dark\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E        \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E            android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"?attr\/actionBarSize\"\u003Cbr \/\u003E            app:layout_scrollFlags=\"scroll|enterAlways\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/android.support.design.widget.AppBarLayout\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E\u0026lt;\/android.support.design.widget.CoordinatorLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This screen output:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/OXjZRRJ.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/OXjZRRJ.gif\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EMaking a redirect activity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Final step to finish this project is create a redirect activity (main activity) to show above activities, which is running after app was launched, have a simple code like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage devexchanges.info.expandcollapseactionbar.activities;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.graphics.Color;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport devexchanges.info.expandcollapseactionbar.R;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        TextView paralaxActivity = (TextView)findViewById(R.id.parallax);\u003Cbr \/\u003E        TextView expandingActivity = (TextView)findViewById(R.id.expandable);\u003Cbr \/\u003E        TextView hideActivity = (TextView)findViewById(R.id.hide);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set event click handling for TextViews\u003Cbr \/\u003E        hideActivity.setOnClickListener(onClickListener(hideActivity, HiddenToolbarActivity.class));\u003Cbr \/\u003E        paralaxActivity.setOnClickListener(onClickListener(paralaxActivity, ParalaxToobarActivity.class));\u003Cbr \/\u003E        expandingActivity.setOnClickListener(onClickListener(expandingActivity, ExpandableToolBarActivity.class));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onClickListener(final TextView textView, final Class c) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                textView.setTextColor(Color.BLUE);\u003Cbr \/\u003E                \/\/ Go to selected Activity\u003Cbr \/\u003E                Intent i = new Intent(MainActivity.this, c);\u003Cbr \/\u003E                startActivity(i);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And it layout: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    tools:context=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/expandable\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_margin=\"10dp\"\u003Cbr \/\u003E        android:text=\"@string\/expand\"\u003Cbr \/\u003E        android:textSize=\"20sp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/hide\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_margin=\"10dp\"\u003Cbr \/\u003E        android:text=\"@string\/hide\"\u003Cbr \/\u003E        android:textSize=\"20sp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/parallax\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_margin=\"10dp\"\u003Cbr \/\u003E        android:text=\"@string\/paralax\"\u003Cbr \/\u003E        android:textSize=\"20sp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Some resources use for this project (\u003Cb\u003E\u003Ci\u003Estrings.xml\u003C\/i\u003E\u003C\/b\u003E, \u003Cb\u003E\u003Ci\u003Estyles.xml\u003C\/i\u003E\u003C\/b\u003E and \u003Cb\u003E\u003Ci\u003Ecolors.xml\u003C\/i\u003E\u003C\/b\u003E): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Estrings.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;string name=\"app_name\"\u0026gt;Expand\/Collapse ActionBar\u0026lt;\/string\u0026gt;\u003Cbr \/\u003E \u003Cbr \/\u003E    \u0026lt;string name=\"action_settings\"\u0026gt;Settings\u0026lt;\/string\u0026gt;\u003Cbr \/\u003E    \u0026lt;string name=\"expand\"\u0026gt;Expand\/Collapse ActionBar\u0026lt;\/string\u0026gt;\u003Cbr \/\u003E    \u0026lt;string name=\"hide\"\u0026gt;Show\/Hide ActionBar when scroll\u0026lt;\/string\u0026gt;\u003Cbr \/\u003E    \u0026lt;string name=\"paralax\"\u0026gt;ActionBar Parallax Animations\u0026lt;\/string\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Estyles.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimary\"\u0026gt;@color\/primary\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorPrimaryDark\"\u0026gt;@color\/primaryDark\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E        \u0026lt;item name=\"colorAccent\"\u0026gt;@color\/accent\u0026lt;\/item\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/style\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecolors.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"primary\"\u0026gt;#009688\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"primaryDark\"\u0026gt;#00796b\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"accent\"\u0026gt;#eeff41\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E    \u0026lt;color name=\"accentLight\"\u0026gt;#F4FF81\u0026lt;\/color\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions \u0026amp; References\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Through \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2015\/09\/android-showhide-actionbar-when.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, we can learn the way to make some ActionBar animations with an external libary. With this, I hope know more Material Design style usages, which can be apply to your app. By now, please see some official documents to deep understand some new widgets:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/support\/design\/widget\/CoordinatorLayout.html\" target=\"_blank\"\u003ECoordinatorLayout\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/support\/design\/widget\/AppBarLayout.html\" target=\"_blank\"\u003EAppBarLayout\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/support\/design\/widget\/CollapsingToolbarLayout.html\" target=\"_blank\"\u003ECollapsingToolbarLayout\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: 'source code pro', monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: blue;\"\u003EUpdate\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: you can custom \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003ECoordinatorLayout.Behavior\u003C\/code\u003E to make some special effects with \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; color: #4b4b4b; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003EToolbar\u003C\/code\u003E and items located in it. Read\u0026nbsp;\u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/03\/android-tip-custom-coordinatorlayout.html\"\u003Ethis post\u003C\/a\u003E\u003C\/b\u003E.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/sh.st\/MAk0J\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/6b26kCf.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5280558127322132612\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2015\/10\/android-material-design.html#comment-form","title":"12 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5280558127322132612"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5280558127322132612"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2015\/10\/android-material-design.html","title":"Android Material Design: Expanding\/Collapsing ActionBar\/Toolbar and more animations when scrolling screen"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/lF1ztIw3E6w\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"12"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5949596116961333989"},"published":{"$t":"2015-09-04T14:56:00.001+07:00"},"updated":{"$t":"2016-09-22T16:49:02.729+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"cardview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"floating action button"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lollipop"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"},{"scheme":"http://www.blogger.com/atom/ns#","term":"recyclerview"}],"title":{"type":"text","$t":"Android Material Design Features: RecyclerView, CardView and FloatingActionButon"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In old verisons (pre 5.0), we are familiar with ListView with and \u003Ci\u003EArrayAdapter \u003C\/i\u003Eor \u003Ci\u003EBaseAdapter\u003C\/i\u003E. With the release of Android Lollipop and Material Design technology, where Support Design Library is a new point, RecyclerView has many similarities. RecyclerView is more advanced and flexible and efficient version of ListView. RecyclerView ViewGroup is an container for larger data set of views that can be recycled and scrolled very efficiently. RecyclerView can be used for larger datasets to be rendered on the UI like a list. RecyclerView provides maximum flexibility to design different kind of views. Moreover, CardView can be set as each RecyclerView elements, user can notice this design now available in \u003Cb\u003E\u003Ci\u003EGoogle+\u003C\/i\u003E\u003C\/b\u003E app.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp;To create complex lists and cards with material design styles in your apps, you can use the RecyclerView and CardView widgets. In this post, I provide solution to combined both of them. Futher, I also include a FloatingActionButton (a Design Support Libary widget, too) and adding data to RecyclerView by it action!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Please watch project output by this demo video:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i.ytimg.com\/vi\/OYoi2MB2miM\/0.jpg\" frameborder=\"0\" height=\"360\" src=\"https:\/\/www.youtube.com\/embed\/OYoi2MB2miM?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EStarting project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I select min-sdk is 15 (Design Support Libary support API 7 and higher). To use this libary, include dependencies to \u003Cspan style=\"background-color: #eeeeee; color: #cc0000;\"\u003Eapp\/build.gradle\u003C\/span\u003E:\u003Cbr \/\u003E\u003Cpre class=\"brush: js\"\u003E    compile 'com.android.support:recyclerview-v7:22.2.1'\u003Cbr \/\u003E    compile 'com.android.support:cardview-v7:22.2.1'\u003Cbr \/\u003E    compile 'com.android.support:design:22.2.1'\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In order to combine FloatingActionButton with RecyclerView, we use FrameLayout as root. Main activity layout simple like this:\u003Cbr \/\u003E\u003Cscript class=\"brush: xml\" type=\"syntaxhighlighter\"\u003E\u003C![CDATA[ \u0026lt;FrameLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"     xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"     xmlns:tools=\"http:\/\/schemas.android.com\/tools\"     android:layout_width=\"match_parent\"     android:layout_height=\"match_parent\"     android:layout_margin=\"10dp\"     tools:context=\".MainActivity\"\u003E     \u0026lt;android.support.v7.widget.RecyclerView         android:id=\"@+id\/recyle_view\"         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\" \/\u003E     \u0026lt;android.support.design.widget.FloatingActionButton         android:id=\"@+id\/fab\"         android:layout_width=\"wrap_content\"         android:layout_height=\"wrap_content\"         android:layout_gravity=\"bottom|right\"         android:layout_marginBottom=\"10dp\"         android:layout_marginRight=\"10dp\"         android:src=\"@mipmap\/ic_plus\"         app:fabSize=\"normal\" \/\u003E \u0026lt;\/FrameLayout\u003E]]\u003E\u003C\/script\u003E \u0026nbsp; \u0026nbsp; Okey, in programmatically code, we need \"config\" RecyclerView features.\u0026nbsp;If you know that changes in content do not change the layout size of the RecyclerView, please\u0026nbsp;use this setting to improve performance:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003ErecyclerView.setHasFixedSize(true);\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; We also set LayoutManager (I use LinearLayout) for RecyclerView and set adapter like ListView:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003E        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E        recyclerView.setLayoutManager(layoutManager);\u003Cbr \/\u003E        \u003Cbr \/\u003E        setRecyclerViewData(); \/\/ call adding data to array list method\u003Cbr \/\u003E        adapter = new RecyclerAdapter(this, friendArrayList);\u003Cbr \/\u003E        recyclerView.setAdapter(adapter);\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECutomizing a RecyclerView Adapter\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;RecyclerView includes special kind of adapter which works pretty much same as traditional Android adapters but with additional functionalities. We can build a Adapter class based on\u0026nbsp;\u003Cspan style=\"background-color: #eeeeee; color: #cc0000;\"\u003ERecyclerView.Adapter\u0026lt;RecyclerAdapter.ViewHolder\u0026gt;\u003C\/span\u003E. In this class, first, create a ViewHolder class extends from \u003Cspan style=\"background-color: #eeeeee; color: #cc0000;\"\u003ERecyclerAdapter.ViewHolder\u003C\/span\u003E:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003E\/**\u003Cbr \/\u003E     * View holder to display each RecylerView item\u003Cbr \/\u003E     *\/\u003Cbr \/\u003E    protected class ViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        private ImageView imageView;\u003Cbr \/\u003E        private TextView name;\u003Cbr \/\u003E        private TextView job;\u003Cbr \/\u003E        private View container;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            imageView = (ImageView) view.findViewById(R.id.image);\u003Cbr \/\u003E            name = (TextView) view.findViewById(R.id.name);\u003Cbr \/\u003E            job = (TextView) view.findViewById(R.id.job);\u003Cbr \/\u003E            container = view.findViewById(R.id.card_view);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Note: this inner class must in \u003Ci\u003Epublic \u003C\/i\u003Eor \u003Ci\u003Eprotected\u003C\/i\u003E type to use!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Overriding \u003Cspan style=\"background-color: #eeeeee; color: #cc0000;\"\u003EonCreateViewHolder()\u003C\/span\u003E and \u003Cspan style=\"background-color: #eeeeee;\"\u003E\u003Cspan style=\"color: #cc0000;\"\u003EonBindViewHolder()\u003C\/span\u003E\u003C\/span\u003E to organize the code, through these methods, data views and size were created:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003E    @Override\u003Cbr \/\u003E    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/inflate your layout and pass it to view holder\u003Cbr \/\u003E        LayoutInflater inflater = activity.getLayoutInflater();\u003Cbr \/\u003E        View view = inflater.inflate(R.layout.item_recycler, viewGroup, false);\u003Cbr \/\u003E        ViewHolder viewHolder = new ViewHolder(view);\u003Cbr \/\u003E\u003Cbr \/\u003E        return viewHolder;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(RecyclerAdapter.ViewHolder viewHolder, int position) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/setting data to view holder elements\u003Cbr \/\u003E        viewHolder.name.setText(friends.get(position).getName());\u003Cbr \/\u003E        viewHolder.job.setText(friends.get(position).getJob());\u003Cbr \/\u003E\u003Cbr \/\u003E        if (friends.get(position).isGender()) {\u003Cbr \/\u003E            viewHolder.imageView.setImageResource(R.mipmap.male);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            viewHolder.imageView.setImageResource(R.mipmap.female);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        \/\/set on click listener for each element\u003Cbr \/\u003E        viewHolder.container.setOnClickListener(onClickListener(position));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; As note above, \u0026nbsp;each RecyclerView item is a CardView, this was declared in xml layout:\u003Cbr \/\u003E\u003Cscript class=\"brush: xml\" title=\"\u0026lt;u\u0026gt;item_recycler.xml\u0026lt;\/u\u0026gt;\" type=\"syntaxhighlighter\"\u003E\u003C![CDATA[ \u0026lt;android.support.v7.widget.CardView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"     xmlns:cardview=\"http:\/\/schemas.android.com\/apk\/res-auto\"     android:id=\"@+id\/card_view\"     android:layout_width=\"match_parent\"     android:layout_height=\"wrap_content\"     android:layout_marginBottom=\"6dp\"\u003E     \u0026lt;LinearLayout         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\"         android:orientation=\"horizontal\"\u003E         \u0026lt;ImageView             android:id=\"@+id\/image\"             android:layout_width=\"100dp\"             android:layout_height=\"80dp\"             android:padding=\"5dp\"             android:src=\"@mipmap\/ic_launcher\" \/\u003E         \u0026lt;RelativeLayout             android:layout_width=\"match_parent\"             android:layout_height=\"wrap_content\"\u003E             \u0026lt;TextView                 android:id=\"@+id\/name\"                 android:layout_width=\"match_parent\"                 android:layout_height=\"wrap_content\"                 android:text=\"\"                 android:textColor=\"@android:color\/holo_blue_dark\" \/\u003E             \u0026lt;TextView                 android:id=\"@+id\/job\"                 android:layout_width=\"match_parent\"                 android:layout_height=\"wrap_content\"                 android:layout_below=\"@+id\/name\"                 android:text=\"\"                 android:textColor=\"@android:color\/holo_green_dark\"                 android:textStyle=\"bold\" \/\u003E         \u003C\/RelativeLayout\u003E    \u003C\/LinearLayout\u003E\u003C\/android.support.v7.widget.CardView\u003E]]\u003E\u003C\/script\u003E\u0026nbsp; \u0026nbsp; When app running, we'll have this output screen:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/rUXB7No.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/rUXB7No.gif\" height=\"320\" width=\"192\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle RecyclerView Item Click Event\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Note like GridView or ListView,\u0026nbsp;handling click event on RecyclerView is not as sweet as them. As \u003Cb\u003E\u003Ci\u003Eitem_recycler.xml\u003C\/i\u003E\u003C\/b\u003E above, I set ID for root layout (CardView) and set it's click event \u0026nbsp;in programmatically code, so \"item click event\" was done. Put this \u003Ci\u003EView.OnClickListener\u003C\/i\u003E method in our adapter code:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003Eprivate View.OnClickListener onClickListener(final int position) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                final Dialog dialog = new Dialog(activity);\u003Cbr \/\u003E                dialog.setContentView(R.layout.item_recycler);\u003Cbr \/\u003E                dialog.setTitle(\"Position \" + position);\u003Cbr \/\u003E                dialog.setCancelable(true); \/\/ dismiss when touching outside Dialog\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ set the custom dialog components - texts and image\u003Cbr \/\u003E                TextView name = (TextView) dialog.findViewById(R.id.name);\u003Cbr \/\u003E                TextView job = (TextView) dialog.findViewById(R.id.job);\u003Cbr \/\u003E                ImageView icon = (ImageView) dialog.findViewById(R.id.image);\u003Cbr \/\u003E\u003Cbr \/\u003E                setDataToView(name, job, icon, position);\u003Cbr \/\u003E\u003Cbr \/\u003E                dialog.show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Ofcourse, from now, when each item clicked, a Dialog appeared and show a single CardView with it's information:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/v3DT3M6.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/v3DT3M6.png\" height=\"320\" width=\"192\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFloating Action Button implements\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We have defined a FloatingActionButton in main activity (xml) layout above. Now, we set click event for it. In this example, it is \"adding a new friend\" button, which showing a Dialog and user put some new values and app will add to data list and update RecyclerView layout. In main activity, add these method:\u003Cbr \/\u003E\u003Cpre class=\"brush: java\"\u003E private View.OnClickListener onAddingListener() {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                final Dialog dialog = new Dialog(MainActivity.this);\u003Cbr \/\u003E                dialog.setContentView(R.layout.dialog_add); \/\/layout for dialog\u003Cbr \/\u003E                dialog.setTitle(\"Add a new friend\");\u003Cbr \/\u003E                dialog.setCancelable(false); \/\/none-dismiss when touching outside Dialog\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ set the custom dialog components - texts and image\u003Cbr \/\u003E                EditText name = (EditText) dialog.findViewById(R.id.name);\u003Cbr \/\u003E                EditText job = (EditText) dialog.findViewById(R.id.job);\u003Cbr \/\u003E                Spinner spnGender = (Spinner) dialog.findViewById(R.id.gender);\u003Cbr \/\u003E                View btnAdd = dialog.findViewById(R.id.btn_ok);\u003Cbr \/\u003E                View btnCancel = dialog.findViewById(R.id.btn_cancel);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/set spinner adapter\u003Cbr \/\u003E                ArrayList\u0026lt;String\u0026gt; gendersList = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E                gendersList.add(\"Male\");\u003Cbr \/\u003E                gendersList.add(\"Female\");\u003Cbr \/\u003E                ArrayAdapter\u0026lt;String\u0026gt; spnAdapter = new ArrayAdapter\u0026lt;String\u0026gt;(MainActivity.this,\u003Cbr \/\u003E                        android.R.layout.simple_dropdown_item_1line, gendersList);\u003Cbr \/\u003E                spnGender.setAdapter(spnAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/set handling event for 2 buttons and spinner\u003Cbr \/\u003E                spnGender.setOnItemSelectedListener(onItemSelectedListener());\u003Cbr \/\u003E                btnAdd.setOnClickListener(onConfirmListener(name, job, dialog));\u003Cbr \/\u003E                btnCancel.setOnClickListener(onCancelListener(dialog));\u003Cbr \/\u003E\u003Cbr \/\u003E                dialog.show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private AdapterView.OnItemSelectedListener onItemSelectedListener() {\u003Cbr \/\u003E        return new AdapterView.OnItemSelectedListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onItemSelected(AdapterView parent, View view, int position, long id) {\u003Cbr \/\u003E                if (position == 0) {\u003Cbr \/\u003E                    gender = true;\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    gender = false;\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onNothingSelected(AdapterView parent) {\u003Cbr \/\u003E\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onConfirmListener(final EditText name, final EditText job, final Dialog dialog) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                Friend friend = new Friend(name.getText().toString().trim(), gender, job.getText().toString().trim());\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/adding new object to arraylist\u003Cbr \/\u003E                friendArrayList.add(friend);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/notify data set changed in RecyclerView adapter\u003Cbr \/\u003E                adapter.notifyDataSetChanged();\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/close dialog after all\u003Cbr \/\u003E                dialog.dismiss();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onCancelListener(final Dialog dialog) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                dialog.dismiss();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Customized layout for this adding dialog:\u003Cbr \/\u003E\u003Cscript class=\"brush: xml\" title=\"\u0026lt;u\u0026gt;dialog_add.xml\u0026lt;\/u\u0026gt;\" type=\"syntaxhighlighter\"\u003E\u003C![CDATA[ \u003C?xml version=\"1.0\" encoding=\"utf-8\"?\u003E\u003Clinearlayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"     android:layout_width=\"match_parent\"     android:layout_height=\"match_parent\"     android:orientation=\"vertical\"\u003E     \u003CLinearLayout         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\"         android:orientation=\"horizontal\"\u003E         \u003CTextView             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"             android:gravity=\"center\"             android:text=\"@string\/name\" \/\u003E         \u003CEditText             android:id=\"@+id\/name\"             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"             android:inputType=\"textCapSentences\" \/\u003E    \u003C\/LinearLayout\u003E     \u003CLinearLayout         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\"         android:orientation=\"horizontal\"\u003E         \u003CTextView             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"             android:gravity=\"center\"             android:text=\"@string\/job\" \/\u003E         \u003CEditText             android:id=\"@+id\/job\"             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"             android:inputType=\"text\" \/\u003E    \u003C\/LinearLayout\u003E     \u003CLinearLayout         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\"         android:orientation=\"horizontal\"\u003E         \u003CTextView             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_gravity=\"center\"             android:layout_weight=\"0.5\"             android:gravity=\"center\"             android:text=\"@string\/gender\" \/\u003E         \u003CSpinner             android:id=\"@+id\/gender\"             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"             android:inputType=\"text\" \/\u003E    \u003C\/LinearLayout\u003E     \u003CLinearLayout         android:layout_width=\"match_parent\"         android:layout_height=\"wrap_content\"         android:orientation=\"horizontal\"\u003E         \u003CButton             android:id=\"@+id\/btn_ok\"             android:layout_width=\"0dp\"             android:layout_height=\"wrap_content\"             android:layout_gravity=\"center\"             android:layout_weight=\"0.5\"             android:gravity=\"center\"             android:text=\"@string\/ok\" \/\u003E         \u003CButton             android:id=\"@+id\/btn_cancel\"             android:layout_width=\"0dp\"             android:text=\"@string\/cancel\"             android:layout_height=\"wrap_content\"             android:layout_weight=\"0.5\"\/\u003E    \u003C\/LinearLayout\u003E\u003C\/LinearLayout\u003E]]\u003E\u003C\/script\u003E \u0026nbsp; \u0026nbsp; Output running screen:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ySPvyKk.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ySPvyKk.png\" height=\"320\" width=\"213\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFinal Code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The following are full code of some important files in this project.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; POJO of project, data object: \u003Cbr \/\u003E\u003Cpre class=\"brush: java\" title=\"\u0026lt;u\u0026gt;Friend.java\u0026lt;\/u\u0026gt;\"\u003Epackage devexchanges.info.recycleviewandcardview;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class Friend {\u003Cbr \/\u003E\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E    private String job;\u003Cbr \/\u003E    private boolean gender;\u003Cbr \/\u003E\u003Cbr \/\u003E    public Friend(String name, boolean gender, String job) {\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E        this.gender = gender;\u003Cbr \/\u003E        this.job = job;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getName() {\u003Cbr \/\u003E        return name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getJob() {\u003Cbr \/\u003E        return job;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public boolean isGender() {\u003Cbr \/\u003E        return gender;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Running (main) activity full code:\u003Cbr \/\u003E\u003Cpre class=\"brush: java; highlight: [34,36, 37, 116, 119,122, 43, 83, 84]\" title=\"\u0026lt;u\u0026gt;MainActivity.java\u0026lt;\/u\u0026gt;\"\u003Epackage devexchanges.info.recycleviewandcardview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Dialog;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.design.widget.FloatingActionButton;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.AdapterView;\u003Cbr \/\u003Eimport android.widget.ArrayAdapter;\u003Cbr \/\u003Eimport android.widget.EditText;\u003Cbr \/\u003Eimport android.widget.Spinner;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private RecyclerView recyclerView;\u003Cbr \/\u003E    private RecyclerAdapter adapter;\u003Cbr \/\u003E    private ArrayList\u0026lt;Friend\u0026gt; friendArrayList;\u003Cbr \/\u003E    private FloatingActionButton fab;\u003Cbr \/\u003E    private boolean gender;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E        friendArrayList = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E\u003Cbr \/\u003E        recyclerView = (RecyclerView) findViewById(R.id.recyle_view);\u003Cbr \/\u003E        fab = (FloatingActionButton) findViewById(R.id.fab);\u003Cbr \/\u003E\u003Cbr \/\u003E        recyclerView.setHasFixedSize(true);\u003Cbr \/\u003E\u003Cbr \/\u003E        LinearLayoutManager layoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E        recyclerView.setLayoutManager(layoutManager);\u003Cbr \/\u003E\u003Cbr \/\u003E        setRecyclerViewData(); \/\/adding data to array list\u003Cbr \/\u003E        adapter = new RecyclerAdapter(this, friendArrayList);\u003Cbr \/\u003E        recyclerView.setAdapter(adapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        fab.setOnClickListener(onAddingListener());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setRecyclerViewData() {\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Phan Thanh\", false, \"Cashier\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Nguyen Tuan\", true, \"Developer\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Tran Van Minh\", true, \"Designer\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Pham Mai Anh\", true, \"architect\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Nguyen Quynh Trang\", false, \"Doctor\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Hoang Dinh Cuong\", false, \"artist\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Tran Cong Bach\", true, \"Student\"));\u003Cbr \/\u003E        friendArrayList.add(new Friend(\"Vu Van Duong\", false, \"Teacher\"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onAddingListener() {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                final Dialog dialog = new Dialog(MainActivity.this);\u003Cbr \/\u003E                dialog.setContentView(R.layout.dialog_add); \/\/layout for dialog\u003Cbr \/\u003E                dialog.setTitle(\"Add a new friend\");\u003Cbr \/\u003E                dialog.setCancelable(false); \/\/none-dismiss when touching outside Dialog\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ set the custom dialog components - texts and image\u003Cbr \/\u003E                EditText name = (EditText) dialog.findViewById(R.id.name);\u003Cbr \/\u003E                EditText job = (EditText) dialog.findViewById(R.id.job);\u003Cbr \/\u003E                Spinner spnGender = (Spinner) dialog.findViewById(R.id.gender);\u003Cbr \/\u003E                View btnAdd = dialog.findViewById(R.id.btn_ok);\u003Cbr \/\u003E                View btnCancel = dialog.findViewById(R.id.btn_cancel);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/set spinner adapter\u003Cbr \/\u003E                ArrayList\u0026lt;String\u0026gt; gendersList = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E                gendersList.add(\"Male\");\u003Cbr \/\u003E                gendersList.add(\"Female\");\u003Cbr \/\u003E                ArrayAdapter\u0026lt;String\u0026gt; spnAdapter = new ArrayAdapter\u0026lt;String\u0026gt;(MainActivity.this,\u003Cbr \/\u003E                        android.R.layout.simple_dropdown_item_1line, gendersList);\u003Cbr \/\u003E                spnGender.setAdapter(spnAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/set handling event for 2 buttons and spinner\u003Cbr \/\u003E                spnGender.setOnItemSelectedListener(onItemSelectedListener());\u003Cbr \/\u003E                btnAdd.setOnClickListener(onConfirmListener(name, job, dialog));\u003Cbr \/\u003E                btnCancel.setOnClickListener(onCancelListener(dialog));\u003Cbr \/\u003E\u003Cbr \/\u003E                dialog.show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private AdapterView.OnItemSelectedListener onItemSelectedListener() {\u003Cbr \/\u003E        return new AdapterView.OnItemSelectedListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onItemSelected(AdapterView parent, View view, int position, long id) {\u003Cbr \/\u003E                if (position == 0) {\u003Cbr \/\u003E                    gender = true;\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    gender = false;\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onNothingSelected(AdapterView parent) {\u003Cbr \/\u003E\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onConfirmListener(final EditText name, final EditText job, final Dialog dialog) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                Friend friend = new Friend(name.getText().toString().trim(), gender, job.getText().toString().trim());\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/adding new object to arraylist\u003Cbr \/\u003E                friendArrayList.add(friend);\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/notify data set changed in RecyclerView adapter\u003Cbr \/\u003E                adapter.notifyDataSetChanged();\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/close dialog after all\u003Cbr \/\u003E                dialog.dismiss();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onCancelListener(final Dialog dialog) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                dialog.dismiss();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Recycler adapter class, most important file:\u003Cbr \/\u003E\u003Cpre class=\"brush: java; highlight: [48, 80, 97, 39, 40, 43, 45]\" title=\"\u0026lt;u\u0026gt;RecyclerAdapter.java\u0026lt;\/u\u0026gt;\"\u003Epackage devexchanges.info.recycleviewandcardview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.app.Dialog;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class RecyclerAdapter extends RecyclerView.Adapter\u0026lt;RecyclerAdapter.ViewHolder\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    private List\u0026lt;Friend\u0026gt; friends;\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E\u003Cbr \/\u003E    public RecyclerAdapter(Activity activity, List\u0026lt;Friend\u0026gt; friends) {\u003Cbr \/\u003E        this.friends = friends;\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/inflate your layout and pass it to view holder\u003Cbr \/\u003E        LayoutInflater inflater = activity.getLayoutInflater();\u003Cbr \/\u003E        View view = inflater.inflate(R.layout.item_recycler, viewGroup, false);\u003Cbr \/\u003E        ViewHolder viewHolder = new ViewHolder(view);\u003Cbr \/\u003E\u003Cbr \/\u003E        return viewHolder;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(RecyclerAdapter.ViewHolder viewHolder, int position) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/setting data to view holder elements\u003Cbr \/\u003E        viewHolder.name.setText(friends.get(position).getName());\u003Cbr \/\u003E        viewHolder.job.setText(friends.get(position).getJob());\u003Cbr \/\u003E\u003Cbr \/\u003E        if (friends.get(position).isGender()) {\u003Cbr \/\u003E            viewHolder.imageView.setImageResource(R.mipmap.male);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            viewHolder.imageView.setImageResource(R.mipmap.female);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        \/\/set on click listener for each element\u003Cbr \/\u003E        viewHolder.container.setOnClickListener(onClickListener(position));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setDataToView(TextView name, TextView job, ImageView genderIcon, int position) {\u003Cbr \/\u003E        name.setText(friends.get(position).getName());\u003Cbr \/\u003E        job.setText(friends.get(position).getJob());\u003Cbr \/\u003E        if (friends.get(position).isGender()) {\u003Cbr \/\u003E            genderIcon.setImageResource(R.mipmap.male);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            genderIcon.setImageResource(R.mipmap.female);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemCount() {\u003Cbr \/\u003E        return (null != friends ? friends.size() : 0);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private View.OnClickListener onClickListener(final int position) {\u003Cbr \/\u003E        return new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View v) {\u003Cbr \/\u003E                final Dialog dialog = new Dialog(activity);\u003Cbr \/\u003E                dialog.setContentView(R.layout.item_recycler);\u003Cbr \/\u003E                dialog.setTitle(\"Position \" + position);\u003Cbr \/\u003E                dialog.setCancelable(true); \/\/ dismiss when touching outside Dialog\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ set the custom dialog components - texts and image\u003Cbr \/\u003E                TextView name = (TextView) dialog.findViewById(R.id.name);\u003Cbr \/\u003E                TextView job = (TextView) dialog.findViewById(R.id.job);\u003Cbr \/\u003E                ImageView icon = (ImageView) dialog.findViewById(R.id.image);\u003Cbr \/\u003E\u003Cbr \/\u003E                setDataToView(name, job, icon, position);\u003Cbr \/\u003E\u003Cbr \/\u003E                dialog.show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        };\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    \/**\u003Cbr \/\u003E     * View holder to display each RecylerView item\u003Cbr \/\u003E     *\/\u003Cbr \/\u003E    protected class ViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        private ImageView imageView;\u003Cbr \/\u003E        private TextView name;\u003Cbr \/\u003E        private TextView job;\u003Cbr \/\u003E        private View container;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            imageView = (ImageView) view.findViewById(R.id.image);\u003Cbr \/\u003E            name = (TextView) view.findViewById(R.id.name);\u003Cbr \/\u003E            job = (TextView) view.findViewById(R.id.job);\u003Cbr \/\u003E            container = view.findViewById(R.id.card_view);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/pre\u003E\u003Cdiv style=\"border-radius: 3px; border: 1px solid rgb(102, 204, 204); box-shadow: rgb(136, 193, 204) 0px 0px 30px inset; color: #222222; font-family: Georgia, Utopia, 'Palatino Linotype', Palatino, serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin: 0px -15px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFinal thoughts\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Not like ListView, adding \u003Ci\u003Eheader\/footer\u003C\/i\u003E \u003Ci\u003Elayout\u003C\/i\u003E not are not simple. In this post, I don't mention.\u0026nbsp;They are alike and not entirely the similar. I hope that through this post, you can understanding how RecyclerView works and using FloatingActionButton and CardView. Moreover, check \u003Cb\u003E\u003Ci\u003E\u003Cu\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/search\/label\/material%20design\" target=\"_blank\"\u003Ethis link\u003C\/a\u003E\u003C\/u\u003E\u003C\/i\u003E\u003C\/b\u003E to see more posts about Android Material Design.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/sh.st\/MAcyg\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/LNgksiM.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5949596116961333989\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2015\/09\/android-material-design-features.html#comment-form","title":"8 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5949596116961333989"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5949596116961333989"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2015\/09\/android-material-design-features.html","title":"Android Material Design Features: RecyclerView, CardView and FloatingActionButon"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/OYoi2MB2miM\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"8"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]}]}});