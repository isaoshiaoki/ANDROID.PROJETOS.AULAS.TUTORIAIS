// API callback
showlatestpostswiththumbs({"version":"1.0","encoding":"UTF-8","feed":{"xmlns":"http://www.w3.org/2005/Atom","xmlns$openSearch":"http://a9.com/-/spec/opensearchrss/1.0/","xmlns$blogger":"http://schemas.google.com/blogger/2008","xmlns$georss":"http://www.georss.org/georss","xmlns$gd":"http://schemas.google.com/g/2005","xmlns$thr":"http://purl.org/syndication/thread/1.0","id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915"},"updated":{"$t":"2018-05-08T15:07:47.380+07:00"},"category":[{"term":"Android UI"},{"term":"library"},{"term":"data loading"},{"term":"android basic"},{"term":"material design"},{"term":"listview"},{"term":"tutorials"},{"term":"viewpager"},{"term":"animation"},{"term":"recyclerview"},{"term":"activity"},{"term":"gridview"},{"term":"static image"},{"term":"TOP useful library"},{"term":"lollipop"},{"term":"actionbar"},{"term":"google playservices"},{"term":"cardview"},{"term":"android tabs"},{"term":"api"},{"term":"intent"},{"term":"Firebase"},{"term":"facebook"},{"term":"toolbar"},{"term":"Gmail style"},{"term":"database"},{"term":"dialog"},{"term":"edittext"},{"term":"services"},{"term":"slidingmenu"},{"term":"BroadcastReceiver"},{"term":"android studio"},{"term":"asynctask"},{"term":"floating action button"},{"term":"picasso"},{"term":"scroll event"},{"term":"views"},{"term":"widget"},{"term":"Bottom Sheet"},{"term":"Data Binding"},{"term":"QR code"},{"term":"barcodescanner"},{"term":"bubble layout"},{"term":"content provider"},{"term":"device information"},{"term":"files"},{"term":"lock screen"},{"term":"menu"},{"term":"notification"},{"term":"pull to refresh"},{"term":"sharedpreference"},{"term":"sqlite"},{"term":"textview"},{"term":"vision API"},{"term":"webservice"},{"term":"Bottom Navigation View"},{"term":"DateTime picker"},{"term":"Input Method Framework"},{"term":"Permission"},{"term":"StackView"},{"term":"butterknife"},{"term":"camera"},{"term":"carousel layout"},{"term":"chart"},{"term":"chat application"},{"term":"checkbox"},{"term":"chip"},{"term":"downloadManager"},{"term":"event bus"},{"term":"handler"},{"term":"json"},{"term":"location"},{"term":"navigationdrawer"},{"term":"parcelable"},{"term":"progressbar"},{"term":"resources"},{"term":"searchview"},{"term":"serializable"},{"term":"soap"},{"term":"telephony API"},{"term":"volley"},{"term":"xml parser"},{"term":"Android M"},{"term":"CountdownTimer"},{"term":"JobScheduler"},{"term":"MediaPlayer"},{"term":"NestedScrollView"},{"term":"REST"},{"term":"actionbarsherlock"},{"term":"battery"},{"term":"bluetooth"},{"term":"captcha"},{"term":"chrome custom tab"},{"term":"color picker"},{"term":"crouton"},{"term":"device rotation"},{"term":"download"},{"term":"draggablepanel"},{"term":"drawing"},{"term":"expandable listview"},{"term":"font"},{"term":"fragment"},{"term":"fresco"},{"term":"gifs"},{"term":"google map"},{"term":"google plus"},{"term":"gson"},{"term":"horizontal scrollview"},{"term":"imageloader"},{"term":"jar"},{"term":"java basic"},{"term":"loader manager"},{"term":"matrix"},{"term":"nearby API"},{"term":"network info"},{"term":"ormlite"},{"term":"palette"},{"term":"pdf"},{"term":"pdfrenderer"},{"term":"popupwindow"},{"term":"ratingbar"},{"term":"scratch view"},{"term":"sensor"},{"term":"skew layout"},{"term":"slidinguppanel"},{"term":"sparkline"},{"term":"spinner"},{"term":"style"},{"term":"swipeable listview"},{"term":"switch"},{"term":"theme"},{"term":"touch"},{"term":"twitter"},{"term":"video record"},{"term":"webview"},{"term":"youtubeplayer"}],"title":{"type":"text","$t":"Learn Programming Together"},"subtitle":{"type":"html","$t":""},"link":[{"rel":"http://schemas.google.com/g/2005#feed","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/posts\/default"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default?alt=json-in-script\u0026orderby=published"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/"},{"rel":"hub","href":"http://pubsubhubbub.appspot.com/"},{"rel":"next","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default?alt=json-in-script\u0026start-index=26\u0026max-results=25\u0026orderby=published"}],"author":[{"name":{"$t":"Hồng Thái"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"generator":{"version":"7.00","uri":"http://www.blogger.com","$t":"Blogger"},"openSearch$totalResults":{"$t":"233"},"openSearch$startIndex":{"$t":"1"},"openSearch$itemsPerPage":{"$t":"25"},"entry":[{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-8109344594470922961"},"published":{"$t":"2017-03-02T16:48:00.001+07:00"},"updated":{"$t":"2017-03-02T16:48:22.934+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"animation"}],"title":{"type":"text","$t":"Layout Flip Animation in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Sometimes, we would like to build a 2-sides layout with 2 separate contents like \u003Ci\u003E\u003Ca href=\"https:\/\/en.wikipedia.org\/wiki\/Playing_card\" target=\"_blank\"\u003Eplaying cards\u003C\/a\u003E\u0026nbsp;\u003C\/i\u003Eand we can flip\/switch them smoothly with animation.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/u4rl5CD.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/u4rl5CD.jpg\" height=\"300\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; By this tutorial post, I will show you how to do a card flip animation with custom \u003Ci\u003Efragment animations.\u003C\/i\u003E Card flips animate between views of content by showing an animation that emulates a card layout flipping over.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; And our output (flip animation) will be like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/1NAJ4tW.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/1NAJ4tW.gif\" height=\"400\" width=\"226\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate the animators\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Create the animations for the layout flips. You'll need two animators for when the front of the card animates out and to the left and in and from the left. You'll also need two animators for when the back of the card animates in and from the right and out and to the right. Now, create \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eanimator\u003C\/code\u003E folder under \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\u003C\/code\u003E and add these animation files (XML): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecard_flip_left_in.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;set xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Before rotating, immediately set the alpha to 0. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"1.0\"\u003Cbr \/\u003E        android:valueTo=\"0.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:duration=\"0\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Rotate. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"-180\"\u003Cbr \/\u003E        android:valueTo=\"0\"\u003Cbr \/\u003E        android:propertyName=\"rotationY\"\u003Cbr \/\u003E        android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u003Cbr \/\u003E        android:duration=\"@integer\/card_flip_time_full\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"0.0\"\u003Cbr \/\u003E        android:valueTo=\"1.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:startOffset=\"@integer\/card_flip_time_half\"\u003Cbr \/\u003E        android:duration=\"1\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/set\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecard_flip_left_out.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;set xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Rotate. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"0\"\u003Cbr \/\u003E        android:valueTo=\"180\"\u003Cbr \/\u003E        android:propertyName=\"rotationY\"\u003Cbr \/\u003E        android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u003Cbr \/\u003E        android:duration=\"@integer\/card_flip_time_full\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"1.0\"\u003Cbr \/\u003E        android:valueTo=\"0.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:startOffset=\"@integer\/card_flip_time_half\"\u003Cbr \/\u003E        android:duration=\"1\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/set\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecard_flip_right_in.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;set xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Before rotating, immediately set the alpha to 0. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"1.0\"\u003Cbr \/\u003E        android:valueTo=\"0.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:duration=\"0\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Rotate. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"180\"\u003Cbr \/\u003E        android:valueTo=\"0\"\u003Cbr \/\u003E        android:propertyName=\"rotationY\"\u003Cbr \/\u003E        android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u003Cbr \/\u003E        android:duration=\"@integer\/card_flip_time_full\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Half-way through the rotation (see startOffset), set the alpha to 1. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"0.0\"\u003Cbr \/\u003E        android:valueTo=\"1.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:startOffset=\"@integer\/card_flip_time_half\"\u003Cbr \/\u003E        android:duration=\"1\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/set\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecard_flip_right_out.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;set xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Rotate. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"0\"\u003Cbr \/\u003E        android:valueTo=\"-180\"\u003Cbr \/\u003E        android:propertyName=\"rotationY\"\u003Cbr \/\u003E        android:interpolator=\"@android:interpolator\/accelerate_decelerate\"\u003Cbr \/\u003E        android:duration=\"@integer\/card_flip_time_full\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;!-- Half-way through the rotation (see startOffset), set the alpha to 0. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;objectAnimator\u003Cbr \/\u003E        android:valueFrom=\"1.0\"\u003Cbr \/\u003E        android:valueTo=\"0.0\"\u003Cbr \/\u003E        android:propertyName=\"alpha\"\u003Cbr \/\u003E        android:startOffset=\"@integer\/card_flip_time_half\"\u003Cbr \/\u003E        android:duration=\"1\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/set\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate 2 Fragment views\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Each side of the \"card\" layout is a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragment\u003C\/code\u003E which has a separate layout that can contain any content you want. You'll then use the two layouts in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragments\u003C\/code\u003E that you'll later animate. The following layout is \"\u003Ci\u003Efront side\u003C\/i\u003E\" which shows an image: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Efragment_card_front.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:contentDescription=\"@null\"\u003Cbr \/\u003E        android:scaleType=\"fitXY\"\u003Cbr \/\u003E        android:src=\"@drawable\/android_team\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is \"\u003Ci\u003Eback layout\u003C\/i\u003E\" which contains some texts: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Efragment_card_back.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:background=\"#a6c\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:padding=\"@dimen\/activity_horizontal_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@android:id\/text1\"\u003Cbr \/\u003E        style=\"?android:textAppearanceLarge\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:text=\"@string\/card_back_title\"\u003Cbr \/\u003E        android:textColor=\"#fff\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        style=\"?android:textAppearanceSmall\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:lineSpacingMultiplier=\"1.2\"\u003Cbr \/\u003E        android:text=\"@string\/card_back_description\"\u003Cbr \/\u003E        android:textAllCaps=\"true\"\u003Cbr \/\u003E        android:textColor=\"#80ffffff\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFragments programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Create \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragments\u003C\/code\u003E classes for the front and back of the \"card\" layout. These classes return the layouts that you created previously in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreateView()\u003C\/code\u003E method of each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragment\u003C\/code\u003E. You can then create instances of this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragment\u003C\/code\u003E in the parent \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E where you want to show the layout: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EFrontLayoutFragment.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.animationfliplayout;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Fragment;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class FrontLayoutFragment extends Fragment {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View onCreateView(LayoutInflater inflater, ViewGroup container,\u003Cbr \/\u003E                             Bundle savedInstanceState) {\u003Cbr \/\u003E        return inflater.inflate(R.layout.fragment_card_front, container, false);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EBackLayoutFragment.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.animationfliplayout;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Fragment;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class BackLayoutFragment extends Fragment{\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View onCreateView(LayoutInflater inflater, ViewGroup container,\u003Cbr \/\u003E                             Bundle savedInstanceState) {\u003Cbr \/\u003E        return inflater.inflate(R.layout.fragment_card_back, container, false);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAnimate \"Card\" layout in the Activity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, you'll need to display the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragments\u003C\/code\u003E inside of an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. To do this, first create the layout for your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. In my example, I create a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERelativeLayout\u003C\/code\u003E that I can add \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragments\u003C\/code\u003E to later, I also put a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E inside it to flip this layout with animation when clicked: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:id=\"@+id\/container\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_flip\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        android:layout_marginLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:layout_marginRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"Flip Layout\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In the programmatically code, set the content view to be the layout that you just created. It's also good idea to show a default fragment when the activity is created, I will display the front of the \"card\" layout by default: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic class MainActivity extends AppCompatActivity implements FragmentManager.OnBackStackChangedListener {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (savedInstanceState == null) {\u003Cbr \/\u003E            getFragmentManager()\u003Cbr \/\u003E                    .beginTransaction()\u003Cbr \/\u003E                    .add(R.id.container, new FrontLayoutFragment())\u003Cbr \/\u003E                    .commit();\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            isShowingBackLayout = (getFragmentManager().getBackStackEntryCount() \u0026gt; 0);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        getFragmentManager().addOnBackStackChangedListener(this);\u003Cbr \/\u003E\u003Cbr \/\u003E        View btnFlip = findViewById(R.id.btn_flip);\u003Cbr \/\u003E        btnFlip.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                flipCard();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now that you have the front of the card showing, you can show the back of the \"card\" layout with the flip animation at an appropriate time. Create a method to show the other side of the card that does the following things (this method named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EflipCard()\u003C\/code\u003E and will be invoked when the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E clicked):\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003ESets the custom animations that you created earlier for the fragment transitions.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EReplaces the currently displayed fragment with a new fragment and animates this event with the custom animations that you created.\u0026nbsp;\u003C\/li\u003E\u003Cli\u003EAdds the previously displayed fragment to the fragment back stack so when the user presses the Back button, the card flips back over.\u003C\/li\u003E\u003C\/ul\u003EThis is the remaining code of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E        private boolean isShowingBackLayout = false;\u003Cbr \/\u003E\u003Cbr \/\u003E        private void flipCard() {\u003Cbr \/\u003E        if (isShowingBackLayout) {\u003Cbr \/\u003E            getFragmentManager().popBackStack();\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        isShowingBackLayout = true;\u003Cbr \/\u003E\u003Cbr \/\u003E        getFragmentManager().beginTransaction()\u003Cbr \/\u003E                \/\/ Replace the default fragment animations with animator resources representing\u003Cbr \/\u003E                \/\/ rotations when switching to the back of the card, as well as animator\u003Cbr \/\u003E                \/\/ resources representing rotations when flipping back to the front (e.g. when\u003Cbr \/\u003E                \/\/ the system Back button is pressed).\u003Cbr \/\u003E                .setCustomAnimations(\u003Cbr \/\u003E                        R.animator.card_flip_right_in, R.animator.card_flip_right_out,\u003Cbr \/\u003E                        R.animator.card_flip_left_in, R.animator.card_flip_left_out)\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ Replace any fragments currently in the container view with a fragment\u003Cbr \/\u003E                \/\/ representing the next page (indicated by the just-incremented currentPage\u003Cbr \/\u003E                \/\/ variable).\u003Cbr \/\u003E                .replace(R.id.container, new BackLayoutFragment())\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ Add this transaction to the back stack, allowing users to press Back\u003Cbr \/\u003E                \/\/ to get to the front of the card.\u003Cbr \/\u003E                .addToBackStack(null)\u003Cbr \/\u003E                .commit();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBackStackChanged() {\u003Cbr \/\u003E        isShowingBackLayout = (getFragmentManager().getBackStackEntryCount() \u0026gt; 0);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; As you can see at the DEMO output above, when the back layout is showing, if user press Back button, the front layout will be inflated. Conversely, app will be closed! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; By adding animation to fragments transaction process, we now able to make a card flip animation easily. Hope this trick is helpful with your own work. Further, you can visit this \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/search\/label\/animation?max-results=10\" target=\"_blank\"\u003Etag link\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to read all posts about creating animation in Android. Finally, you can download full source code by click the button below! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qbfrim\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E to original post on\u0026nbsp;\u003Ca href=\"https:\/\/developer.android.com\/training\/animation\/cardflip.html\" target=\"_blank\"\u003EAndroid Developer blog\u003C\/a\u003E."},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/8109344594470922961\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/03\/layout-flip-animation-in-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8109344594470922961"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8109344594470922961"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/03\/layout-flip-animation-in-android.html","title":"Layout Flip Animation in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-8713371644613593370"},"published":{"$t":"2017-02-25T23:17:00.000+07:00"},"updated":{"$t":"2017-02-25T23:17:33.997+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"lock screen"}],"title":{"type":"text","$t":"Create a lock screen inside Android application"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Like some application which focuses on the protection of user data, if we would like to access content, we must enter \u003Ci\u003Epassword\u003C\/i\u003E first. This lock screen always show every time we open the app, ensure that strangers cannot access your data. Maybe in some cases to protect user information, developer can use this way.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Tv8cPoE.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Tv8cPoE.jpg\" height=\"247\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In this post, I will make a lock activity by designing in XML. There is an another solution is using a third-party library, please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/06\/android-simple-lock-screen-with.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDesigning layout for lock activity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; User must input number-password to pass this lock screen, so design a keypad for this activity like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_lock.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:padding=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.lockscreen.LockActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;LinearLayout\u003Cbr \/\u003E        android:id=\"@+id\/lock_keypad\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;LinearLayout\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:orientation=\"horizontal\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn1\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"1\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn2\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"2\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn3\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"3\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;LinearLayout\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:orientation=\"horizontal\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn4\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"4\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn5\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"5\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn6\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"6\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;LinearLayout\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:orientation=\"horizontal\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn7\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"7\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn8\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"8\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn9\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"9\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;LinearLayout\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:orientation=\"horizontal\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn_space\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:enabled=\"false\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;Button\u003Cbr \/\u003E                android:id=\"@+id\/btn0\"\u003Cbr \/\u003E                style=\"@style\/Borderless_Button\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:text=\"0\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;ImageView\u003Cbr \/\u003E                android:id=\"@+id\/btn_clear\"\u003Cbr \/\u003E                android:layout_width=\"0dp\"\u003Cbr \/\u003E                android:layout_height=\"wrap_content\"\u003Cbr \/\u003E                android:layout_weight=\"1\"\u003Cbr \/\u003E                android:contentDescription=\"@null\"\u003Cbr \/\u003E                android:src=\"@android:drawable\/ic_input_delete\"\u003Cbr \/\u003E                android:tint=\"@color\/colorPrimary\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;LinearLayout\u003Cbr \/\u003E        android:id=\"@+id\/dot_layout\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_above=\"@id\/lock_keypad\"\u003Cbr \/\u003E        android:layout_marginBottom=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:gravity=\"center\"\u003Cbr \/\u003E        android:orientation=\"horizontal\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/dot_1\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/dot_disable\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/dot_2\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/dot_disable\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/dot_3\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/dot_disable\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/dot_4\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/dot_disable\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_above=\"@id\/dot_layout\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:layout_marginBottom=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:src=\"@drawable\/lock\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Expected output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eZyudDj.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eZyudDj.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, you must have a main activity, it's will start when launching app. It's layout depend on your work, in this simple project, it only include a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.lockscreen.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.v7.widget.Toolbar\u003Cbr \/\u003E        android:id=\"@+id\/toolbar\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"?attr\/actionBarSize\"\u003Cbr \/\u003E        android:background=\"@color\/colorPrimary\"\u003Cbr \/\u003E        app:popupTheme=\"@style\/ThemeOverlay.AppCompat.Light\"\u003Cbr \/\u003E        app:theme=\"@style\/ThemeOverlay.AppCompat.Dark.ActionBar\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/text\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:padding=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"Hello World!\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EMain activity programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;Because the lock screen always display when app launching, so in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonStart()\u003C\/code\u003E of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E, we'll check if users haven't typed true before, starting \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELockActivity\u003C\/code\u003E immediately by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E! In order to detect users passed the lock screen or not, we'll use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESharedPreferences\u003C\/code\u003E. Source code simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.lockscreen;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.annotation.SuppressLint;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.content.SharedPreferences;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.Toolbar;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport butterknife.BindView;\u003Cbr \/\u003Eimport butterknife.ButterKnife;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @BindView(R.id.toolbar)\u003Cbr \/\u003E    Toolbar toolbar;\u003Cbr \/\u003E\u003Cbr \/\u003E    @BindView(R.id.text)\u003Cbr \/\u003E    TextView textView;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E        ButterKnife.bind(this);\u003Cbr \/\u003E\u003Cbr \/\u003E        setSupportActionBar(toolbar);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @SuppressLint(\"SetTextI18n\")\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onStart() {\u003Cbr \/\u003E        super.onStart();\u003Cbr \/\u003E        if (!isPass()) {\u003Cbr \/\u003E            Intent intent = new Intent(this, LockActivity.class);\u003Cbr \/\u003E            startActivity(intent);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            textView.setText(\"The code you typed is right!\");\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private boolean isPass() {\u003Cbr \/\u003E        SharedPreferences prefs = getSharedPreferences(\"PASS_CODE\", MODE_PRIVATE);\u003Cbr \/\u003E        return prefs.getBoolean(\"is_pass\", false);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onStop() {\u003Cbr \/\u003E        super.onStop();\u003Cbr \/\u003E\u003Cbr \/\u003E        SharedPreferences.Editor editor = getSharedPreferences(\"PASS_CODE\", MODE_PRIVATE).edit();\u003Cbr \/\u003E        editor.putBoolean(\"is_pass\", false);\u003Cbr \/\u003E        editor.apply();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003EAs you can see, we must remove password when the main activity closed (by override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonStop()\u003C\/code\u003E to guaranteed that the lock activity always shown when app resumed! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ELock activity programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this activity, we must:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EHandle click event of all buttons in the keypad (to get input code - password)\u003C\/li\u003E\u003Cli\u003EUpdate \u003Ci\u003Edots layout\u003C\/i\u003E when input code changed\u003C\/li\u003E\u003Cli\u003ECheck input code right or wrong. If right, return to the main activity and if wrong, show a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EToast\u003C\/code\u003E to warning.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; And this is it's source code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ELockActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.lockscreen;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.SharedPreferences;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.animation.Animation;\u003Cbr \/\u003Eimport android.view.animation.AnimationUtils;\u003Cbr \/\u003Eimport android.widget.Button;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.Toast;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport butterknife.BindViews;\u003Cbr \/\u003Eimport butterknife.ButterKnife;\u003Cbr \/\u003Eimport butterknife.OnClick;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class LockActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @BindViews({R.id.btn0, R.id.btn1, R.id.btn2, R.id.btn3, R.id.btn4, R.id.btn5, R.id.btn6,\u003Cbr \/\u003E            R.id.btn7, R.id.btn8, R.id.btn9, R.id.btn_clear})\u003Cbr \/\u003E    List\u0026lt;View\u0026gt; btnNumPads;\u003Cbr \/\u003E\u003Cbr \/\u003E    @BindViews({R.id.dot_1, R.id.dot_2, R.id.dot_3, R.id.dot_4})\u003Cbr \/\u003E    List\u0026lt;ImageView\u0026gt; dots;\u003Cbr \/\u003E\u003Cbr \/\u003E    private static final String TRUE_CODE = \"2869\";\u003Cbr \/\u003E    private static final int MAX_LENGHT = 4;\u003Cbr \/\u003E    private String codeString = \"\";\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(R.layout.activity_lock);\u003Cbr \/\u003E        ButterKnife.bind(this);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @OnClick(R.id.btn_clear)\u003Cbr \/\u003E    public void onClear() {\u003Cbr \/\u003E        if (codeString.length() \u0026gt; 0) {\u003Cbr \/\u003E            \/\/remove last character of code\u003Cbr \/\u003E            codeString = removeLastChar(codeString);\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/update dots layout\u003Cbr \/\u003E            setDotImagesState();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @OnClick({R.id.btn0, R.id.btn1, R.id.btn2, R.id.btn3, R.id.btn4, R.id.btn5, R.id.btn6,\u003Cbr \/\u003E            R.id.btn7, R.id.btn8, R.id.btn9})\u003Cbr \/\u003E    public void onClick(Button button) {\u003Cbr \/\u003E        getStringCode(button.getId());\u003Cbr \/\u003E        if (codeString.length() == MAX_LENGHT) {\u003Cbr \/\u003E            if (codeString.equals(TRUE_CODE)) {\u003Cbr \/\u003E                Toast.makeText(this, \"Code is right\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                setIsPass();\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E            } else {\u003Cbr \/\u003E                Toast.makeText(this, \"Wrong Pass code\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                \/\/vibrate the dots layout\u003Cbr \/\u003E                shakeAnimation();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        } else if (codeString.length() \u0026gt; MAX_LENGHT){\u003Cbr \/\u003E            \/\/reset the input code\u003Cbr \/\u003E            codeString = \"\";\u003Cbr \/\u003E            getStringCode(button.getId());\u003Cbr \/\u003E        }\u003Cbr \/\u003E        setDotImagesState();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void shakeAnimation() {\u003Cbr \/\u003E        Animation shake = AnimationUtils.loadAnimation(this, R.anim.vibrate_anim);\u003Cbr \/\u003E        findViewById(R.id.dot_layout).startAnimation(shake);\u003Cbr \/\u003E        Toast.makeText(this, \"Wrong Password\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void getStringCode(int buttonId) {\u003Cbr \/\u003E        switch (buttonId) {\u003Cbr \/\u003E            case R.id.btn0:\u003Cbr \/\u003E                codeString += \"0\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn1:\u003Cbr \/\u003E                codeString += \"1\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn2:\u003Cbr \/\u003E                codeString += \"2\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn3:\u003Cbr \/\u003E                codeString += \"3\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn4:\u003Cbr \/\u003E                codeString += \"4\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn5:\u003Cbr \/\u003E                codeString += \"5\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn6:\u003Cbr \/\u003E                codeString += \"6\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn7:\u003Cbr \/\u003E                codeString += \"7\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn8:\u003Cbr \/\u003E                codeString += \"8\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            case R.id.btn9:\u003Cbr \/\u003E                codeString += \"9\";\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            default:\u003Cbr \/\u003E                break;\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setDotImagesState() {\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; codeString.length(); i++) {\u003Cbr \/\u003E            dots.get(i).setImageResource(R.drawable.dot_enable);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        if (codeString.length()\u0026lt;4) {\u003Cbr \/\u003E            for (int j = codeString.length(); j\u0026lt;4; j++) {\u003Cbr \/\u003E                dots.get(j).setImageResource(R.drawable.dot_disable);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private String removeLastChar(String s) {\u003Cbr \/\u003E        if (s == null || s.length() == 0) {\u003Cbr \/\u003E            return s;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return s.substring(0, s.length() - 1);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setIsPass() {\u003Cbr \/\u003E        SharedPreferences.Editor editor = getSharedPreferences(\"PASS_CODE\", MODE_PRIVATE).edit();\u003Cbr \/\u003E        editor.putBoolean(\"is_pass\", true);\u003Cbr \/\u003E        editor.apply();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This is output when app running: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/WCqWPE51noM\/default.jpg?sqp=CPijsMUF\u0026amp;rs=AOn4CLAbGXW_qrS6eTaRLN37W3ECQbrepQ\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/WCqWPE51noM?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EShaking animation\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you see at the output video, when user type a wrong code, the dots layout will be shake. This is xml file to make this animation: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\anim\\shake_anim.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;set xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;rotate\u003Cbr \/\u003E        android:duration=\"70\"\u003Cbr \/\u003E        android:fromDegrees=\"-5\"\u003Cbr \/\u003E        android:pivotX=\"50%\"\u003Cbr \/\u003E        android:pivotY=\"50%\"\u003Cbr \/\u003E        android:repeatCount=\"5\"\u003Cbr \/\u003E        android:repeatMode=\"reverse\"\u003Cbr \/\u003E        android:interpolator=\"@android:anim\/linear_interpolator\"\u003Cbr \/\u003E        android:toDegrees=\"5\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;translate\u003Cbr \/\u003E        android:fromXDelta=\"-10\"\u003Cbr \/\u003E        android:toXDelta=\"10\"\u003Cbr \/\u003E        android:repeatCount=\"5\"\u003Cbr \/\u003E        android:repeatMode=\"reverse\"\u003Cbr \/\u003E        android:interpolator=\"@android:anim\/linear_interpolator\"\u003Cbr \/\u003E        android:duration=\"70\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/set\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is output:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/bjF0okL.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/bjF0okL.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; You can make other better animation than this by research more about \u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/training\/animation\/index.html\" target=\"_blank\"\u003Eanimation in Android\u003C\/a\u003E\u003C\/b\u003E! \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;In this project, I use \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/jakewharton.github.io\/butterknife\/\" target=\"_blank\"\u003EButterKnife\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to make \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EfinViewbyId\u003C\/code\u003E work become easier! In order to use this library, please add this dependency to your app-level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'com.jakewharton:butterknife:8.5.1'\u003Cbr \/\u003EannotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Make a lock screen inside your own application is a not hard work, you can design it better and should pay attention to developing animation and further, vibrating device when user type a wrong code! The fact that there are many third-party libraries which can help you make this layout without write XML codes yourself. Please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/06\/android-simple-lock-screen-with.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to learn about using one of them. Finally, you can get full project code on \u003Cb\u003EGithub\u003C\/b\u003E. \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qcWfAi\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/8713371644613593370\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/create-lock-screen-inside-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8713371644613593370"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8713371644613593370"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/create-lock-screen-inside-android.html","title":"Create a lock screen inside Android application"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/WCqWPE51noM\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3199244637813268098"},"published":{"$t":"2017-02-17T11:33:00.000+07:00"},"updated":{"$t":"2017-02-17T11:33:59.028+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"cardview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"recyclerview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"scroll event"}],"title":{"type":"text","$t":"Android RecyclerView dynamically load more items when scroll to end with bottom ProgressBar"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Load more data when scrolling to bottom of list view\/table view is one the most popular design style which available in a lot of application, for example: Facebook, Google+,... By my \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2015\/03\/android-listview-dynamically-load-more.html\" target=\"_blank\"\u003Eprevious post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, you've learn the way to do this trick with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E. As you are already known, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E is a new component introduced in Android Lollipop, this component increases performances respect to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E. Moreover, respect to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E is much more customizable.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Today, with this post, I would like to talk about making an endless\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E\u0026nbsp;and when data is loading, it will show a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EProgressBar\u003C\/code\u003E at the bottom. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding dependencies to project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The first work after creating a new Android Studio project is adding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E denpendency to your app level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E. In this sample project, I set each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E item as a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ECardView\u003C\/code\u003E, so you must add it's dependency, too: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Edependencies {\u003Cbr \/\u003E    compile 'com.android.support:appcompat-v7:25.1.0'\u003Cbr \/\u003E    compile 'com.android.support:recyclerview-v7:25.1.0'\u003Cbr \/\u003E    compile 'com.android.support:cardview-v7:25.1.0'\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate layout files\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now we must provide some necessary XML files to define layouts. Because of we will set a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EProgressBar\u003C\/code\u003E at the bottom of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E when data is loading, it will have two item types. The normal item that to show info of user and loading item that place at bottom to show progress bar.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Layout for the normal item: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_recycler_view_row.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.v7.widget.CardView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:card_view=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    card_view:cardUseCompatPadding=\"true\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:background=\"?android:selectableItemBackground\"\u003Cbr \/\u003E        android:padding=\"10dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/txt_email\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:textColor=\"@android:color\/black\"\u003Cbr \/\u003E            android:textSize=\"16sp\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/txt_phone\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_below=\"@id\/txt_email\"\u003Cbr \/\u003E            android:textColor=\"@android:color\/black\"\u003Cbr \/\u003E            android:textSize=\"12sp\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v7.widget.CardView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Layout for the loading item: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_loading.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ProgressBar\u003Cbr \/\u003E        android:id=\"@+id\/progressBar1\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_gravity=\"center_horizontal\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And you must put a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E object to the main activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E        android:id=\"@+id\/recycler_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a POJO class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We've just create all necessary layouts for this project, now please move to programmatically code. Firstly, provide a POJO class (model object) simply like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EContact.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.endlessrecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class Contact {\u003Cbr \/\u003E    private String email;\u003Cbr \/\u003E    private String phone;\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getEmail() {\u003Cbr \/\u003E        return email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setEmail(String email) {\u003Cbr \/\u003E        this.email = email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getPhone() {\u003Cbr \/\u003E        return phone;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setPhone(String phone) {\u003Cbr \/\u003E        this.phone = phone;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDefine an interface for callbacks\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, make an interface named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnLoadMoreListener\u003C\/code\u003E with an abstract method \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonLoadMore()\u003C\/code\u003E which will be invoked when we scroll the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E to end: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EOnLoadMoreListener.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.endlessrecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic interface OnLoadMoreListener {\u003Cbr \/\u003E    void onLoadMore();\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfiguration in RecyclerView adapter\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E adapter (I named as \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactAdapter\u003C\/code\u003E), we have 2 item types then must create two \u003Ci\u003E\u003Cb\u003EViewHolder\u003C\/b\u003E\u003C\/i\u003E like below: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E\/\/ \"Loading item\" ViewHolder\u003Cbr \/\u003Eprivate class LoadingViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        public ProgressBar progressBar;\u003Cbr \/\u003E\u003Cbr \/\u003E        public LoadingViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            progressBar = (ProgressBar) view.findViewById(R.id.progressBar1);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E\/\/ \"Normal item\" ViewHolder\u003Cbr \/\u003Eprivate class UserViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        public TextView phone;\u003Cbr \/\u003E        public TextView email;\u003Cbr \/\u003E\u003Cbr \/\u003E        public UserViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            phone = (TextView) view.findViewById(R.id.txt_phone);\u003Cbr \/\u003E            email = (TextView) view.findViewById(R.id.txt_email);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003EIn this adapter, declare two constants that is delegate for two item type of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate final int VIEW_TYPE_ITEM = 0;\u003Cbr \/\u003Eprivate final int VIEW_TYPE_LOADING = 1;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003EProvide an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnLoadMoreListener\u003C\/code\u003E variable and set an \"add method\": \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate OnLoadMoreListener onLoadMoreListener;\u003Cbr \/\u003Epublic void setOnLoadMoreListener(OnLoadMoreListener mOnLoadMoreListener) {\u003Cbr \/\u003E        this.onLoadMoreListener = mOnLoadMoreListener;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003EIn the constructor of this adapter class, we handle scroll event of the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E here. This is the most important step, firstly, you must get \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELayoutManager\u003C\/code\u003E of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E, detecting scroll to bottom in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonScroll()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    private boolean isLoading;\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E    private List\u0026lt;Contact\u0026gt; contacts;\u003Cbr \/\u003E    private int visibleThreshold = 5;\u003Cbr \/\u003E    private int lastVisibleItem, totalItemCount;\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactAdapter(RecyclerView recyclerView, List\u0026lt;Contact\u0026gt; contacts, Activity activity) {\u003Cbr \/\u003E        this.contacts = contacts;\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E\u003Cbr \/\u003E        final LinearLayoutManager linearLayoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();\u003Cbr \/\u003E        recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {\u003Cbr \/\u003E                super.onScrolled(recyclerView, dx, dy);\u003Cbr \/\u003E                totalItemCount = linearLayoutManager.getItemCount();\u003Cbr \/\u003E                lastVisibleItem = linearLayoutManager.findLastVisibleItemPosition();\u003Cbr \/\u003E                if (!isLoading \u0026amp;\u0026amp; totalItemCount \u0026lt;= (lastVisibleItem + visibleThreshold)) {\u003Cbr \/\u003E                    if (onLoadMoreListener != null) {\u003Cbr \/\u003E                        onLoadMoreListener.onLoadMore();\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                    isLoading = true;\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003EAdd some necessary methods to complete \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactAdapter\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public int getItemViewType(int position) {\u003Cbr \/\u003E        return contacts.get(position) == null ? VIEW_TYPE_LOADING : VIEW_TYPE_ITEM;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\u003Cbr \/\u003E        if (viewType == VIEW_TYPE_ITEM) {\u003Cbr \/\u003E            View view = LayoutInflater.from(activity).inflate(R.layout.item_recycler_view_row, parent, false);\u003Cbr \/\u003E            return new UserViewHolder(view);\u003Cbr \/\u003E        } else if (viewType == VIEW_TYPE_LOADING) {\u003Cbr \/\u003E            View view = LayoutInflater.from(activity).inflate(R.layout.item_loading, parent, false);\u003Cbr \/\u003E            return new LoadingViewHolder(view);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return null;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {\u003Cbr \/\u003E        if (holder instanceof UserViewHolder) {\u003Cbr \/\u003E            Contact contact = contacts.get(position);\u003Cbr \/\u003E            UserViewHolder userViewHolder = (UserViewHolder) holder;\u003Cbr \/\u003E            userViewHolder.phone.setText(contact.getEmail());\u003Cbr \/\u003E            userViewHolder.email.setText(contact.getPhone());\u003Cbr \/\u003E        } else if (holder instanceof LoadingViewHolder) {\u003Cbr \/\u003E            LoadingViewHolder loadingViewHolder = (LoadingViewHolder) holder;\u003Cbr \/\u003E            loadingViewHolder.progressBar.setIndeterminate(true);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemCount() {\u003Cbr \/\u003E        return contacts == null ? 0 : contacts.size();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setLoaded() {\u003Cbr \/\u003E        isLoading = false;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EActivity programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E method of activity, we must call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetOnLoadMoreListener()\u003C\/code\u003E and get new data inside \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonLoadMore()\u003C\/code\u003E. This is full code of the activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.endlessrecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.os.Handler;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.widget.Toast;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003Eimport java.util.Random;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private List\u0026lt;Contact\u0026gt; contacts;\u003Cbr \/\u003E    private ContactAdapter contactAdapter;\u003Cbr \/\u003E    private Random random;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        contacts = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        random = new Random();\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set dummy data\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; 10; i++) {\u003Cbr \/\u003E            Contact contact = new Contact();\u003Cbr \/\u003E            contact.setPhone(phoneNumberGenerating());\u003Cbr \/\u003E            contact.setEmail(\"DevExchanges\" + i + \"@gmail.com\");\u003Cbr \/\u003E            contacts.add(contact);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/find view by id and attaching adapter for the RecyclerView\u003Cbr \/\u003E        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);\u003Cbr \/\u003E\u003Cbr \/\u003E        recyclerView.setLayoutManager(new LinearLayoutManager(this));\u003Cbr \/\u003E        contactAdapter = new ContactAdapter(recyclerView, contacts, this);\u003Cbr \/\u003E        recyclerView.setAdapter(contactAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set load more listener for the RecyclerView adapter\u003Cbr \/\u003E        contactAdapter.setOnLoadMoreListener(new OnLoadMoreListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onLoadMore() {\u003Cbr \/\u003E                if (contacts.size() \u0026lt;= 20) {\u003Cbr \/\u003E                    contacts.add(null);\u003Cbr \/\u003E                    contactAdapter.notifyItemInserted(contacts.size() - 1);\u003Cbr \/\u003E                    new Handler().postDelayed(new Runnable() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void run() {\u003Cbr \/\u003E                            contacts.remove(contacts.size() - 1);\u003Cbr \/\u003E                            contactAdapter.notifyItemRemoved(contacts.size());\u003Cbr \/\u003E\u003Cbr \/\u003E                            \/\/Generating more data\u003Cbr \/\u003E                            int index = contacts.size();\u003Cbr \/\u003E                            int end = index + 10;\u003Cbr \/\u003E                            for (int i = index; i \u0026lt; end; i++) {\u003Cbr \/\u003E                                Contact contact = new Contact();\u003Cbr \/\u003E                                contact.setPhone(phoneNumberGenerating());\u003Cbr \/\u003E                                contact.setEmail(\"DevExchanges\" + i + \"@gmail.com\");\u003Cbr \/\u003E                                contacts.add(contact);\u003Cbr \/\u003E                            }\u003Cbr \/\u003E                            contactAdapter.notifyDataSetChanged();\u003Cbr \/\u003E                            contactAdapter.setLoaded();\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    }, 5000);\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    Toast.makeText(MainActivity.this, \"Loading data completed\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private String phoneNumberGenerating() {\u003Cbr \/\u003E        int low = 100000000;\u003Cbr \/\u003E        int high = 999999999;\u003Cbr \/\u003E        int randomNumber = random.nextInt(high - low) + low;\u003Cbr \/\u003E\u003Cbr \/\u003E        return \"0\" + randomNumber;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is output for our code: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/GeRSKO4.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/GeRSKO4.gif\" height=\"640\" width=\"358\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Over here, I've just present the way to put a progress bar at the bottom of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E and loading more data when scroll to end. This design is very popular in mobile application development, so I hope this post is helpful with your own work. Further, you can visit my \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2015\/03\/android-listview-dynamically-load-more.html\" target=\"_blank\"\u003Eprevious post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to learn solution with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E or read related tutorial posts on other site like:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EA tut on \u003Ca href=\"https:\/\/guides.codepath.com\/android\/Endless-Scrolling-with-AdapterViews-and-RecyclerView\" target=\"_blank\"\u003ECodePath\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EA post from \u0026nbsp;\u003Ca href=\"http:\/\/msobhy.me\/2015\/09\/05\/infinite_scrolling_recyclerview\/\" target=\"_blank\"\u003EMohamed Sobhy's blog\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qxpnmP\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3199244637813268098\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-recyclerview-dynamically-load.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3199244637813268098"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3199244637813268098"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-recyclerview-dynamically-load.html","title":"Android RecyclerView dynamically load more items when scroll to end with bottom ProgressBar"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5700903301607455667"},"published":{"$t":"2017-02-13T17:28:00.001+07:00"},"updated":{"$t":"2017-02-13T17:28:10.998+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"services"},{"scheme":"http://www.blogger.com/atom/ns#","term":"widget"}],"title":{"type":"text","$t":"Android (Home screen) widget - Part 4: Update widget via Service"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; The fact that, most of widgets that you can see on your device are auto-update information, for example: weather widget, location widget,... \u003Cb\u003EService\u003C\/b\u003E is the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContext\u003C\/code\u003E which is used here to change the widget data. With auto update feature, your widget become lively and useful!\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/3IbDlua.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/3IbDlua.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Today, by this post, I would like to present an updating widget, which displaying current time in \u003Cb\u003EHH:mm\u003C\/b\u003E format. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating a Service class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We'll get current time in the device in this class (which a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E). Override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonStartCommand()\u003C\/code\u003E method like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EUpdateService.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.updatewidget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Service;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.content.ComponentName;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.os.IBinder;\u003Cbr \/\u003Eimport android.support.annotation.Nullable;\u003Cbr \/\u003Eimport android.widget.RemoteViews;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Calendar;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class UpdateService extends Service {\u003Cbr \/\u003E    @Nullable\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public IBinder onBind(Intent intent) {\u003Cbr \/\u003E        return null;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int onStartCommand(Intent intent, int flags, int startId) {\u003Cbr \/\u003E\u003Cbr \/\u003E        String time = getCurrentDateTime();\u003Cbr \/\u003E\u003Cbr \/\u003E        RemoteViews view = new RemoteViews(getPackageName(), R.layout.widget_updating);\u003Cbr \/\u003E        view.setTextViewText(R.id.txt_widget, time);\u003Cbr \/\u003E        ComponentName theWidget = new ComponentName(this, UpdatingWidget.class);\u003Cbr \/\u003E        AppWidgetManager manager = AppWidgetManager.getInstance(this);\u003Cbr \/\u003E        manager.updateAppWidget(theWidget, view);\u003Cbr \/\u003E\u003Cbr \/\u003E        return super.onStartCommand(intent, flags, startId);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private String getCurrentDateTime() {\u003Cbr \/\u003E        Calendar c = Calendar.getInstance();\u003Cbr \/\u003E        int minute = c.get(Calendar.MINUTE);\u003Cbr \/\u003E        int hour = c.get(Calendar.HOUR_OF_DAY);\u003Cbr \/\u003E\u003Cbr \/\u003E        return hour + \":\" + minute;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see at the code above, remember update data (current time) to a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E in your widget after get time here! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EWidget XML files\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Like another widgets at previous parts, your must create widget layout and property files (in XML). \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; The layout for this widget: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Elayout\\widget_updating.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/txt_widget\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerHorizontal=\"true\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:layout_margin=\"8dp\"\u003Cbr \/\u003E        android:background=\"#09C\"\u003Cbr \/\u003E        android:text=\"@string\/appwidget_text\"\u003Cbr \/\u003E        android:textColor=\"#ffffff\"\u003Cbr \/\u003E        android:textSize=\"24sp\"\u003Cbr \/\u003E        android:textStyle=\"bold|italic\"\/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And define the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProviderInfo\u003C\/code\u003E object in an XML like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Exml\\updating_widget_info.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;appwidget-provider xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:initialLayout=\"@layout\/widget_updating\"\u003Cbr \/\u003E    android:minHeight=\"80dp\"\u003Cbr \/\u003E    android:minWidth=\"80dp\"\u003Cbr \/\u003E    android:previewImage=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E    android:resizeMode=\"vertical\"\u003Cbr \/\u003E    android:updatePeriodMillis=\"0\"\u0026gt;\u003Cbr \/\u003E\u0026lt;\/appwidget-provider\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAppWidgetProvider class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E does not start by itself. We need to start the service (in every minute for this example) in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; But why we do not just use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EupdatePeriodMillis\u003C\/code\u003E atribute? The \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/appwidgets\/index.html#MetaData\" target=\"_blank\"\u003Eofficial document\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E say that: \u003Cbr \/\u003E\u003Cblockquote style=\"background-color: white; border-left-color: rgb(0, 188, 213); border-left-style: solid; border-width: 0px 0px 0px 2px; color: #444444; font-family: 'Open Sans', Arial, Verdana; font-size: 16px; font-style: italic; line-height: 27.4286px; margin: 0px 2rem 1rem; padding: 0.5rem; quotes: none; text-align: justify; vertical-align: baseline;\"\u003E\u003Cdiv style=\"border: 0px; line-height: 1.8; padding: 0px; vertical-align: baseline;\"\u003E\u003Cspan style=\"line-height: 1.8;\"\u003EIf the device is asleep when it is time for an update (as defined by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EupdatePeriodMillis\u003C\/code\u003E), then the device will wake up in order to perform the update. If you don't update more than once per hour, this probably won't cause significant problems for the battery life. If, however, you need to update more frequently and\/or you do not need to update while the device is asleep, then you can instead perform updates based on an alarm that will not wake the device. To do so, set an alarm with an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E that your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E receives, using the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAlarmManager\u003C\/code\u003E. Set the alarm type to either \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EELAPSED_REALTIME\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERTC\u003C\/code\u003E, which will only deliver the alarm when the device is awake. Then set \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EupdatePeriodMillis\u003C\/code\u003E to zero (\"0\").\u003C\/span\u003E\u003C\/div\u003E\u003C\/blockquote\u003E\u0026nbsp; \u0026nbsp; In previous examples, we used \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetActivity()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetBroadcast()\u003C\/code\u003E methods. This time we are going to use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetService()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EUpdatingWidget.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.updatewidget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.AlarmManager;\u003Cbr \/\u003Eimport android.app.PendingIntent;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetProvider;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.os.SystemClock;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class UpdatingWidget extends AppWidgetProvider {\u003Cbr \/\u003E    private PendingIntent pendingIntent;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\u003Cbr \/\u003E        final AlarmManager manager = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);\u003Cbr \/\u003E        final Intent i = new Intent(context, UpdateService.class);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (pendingIntent == null) {\u003Cbr \/\u003E            pendingIntent = PendingIntent.getService(context, 0, i, PendingIntent.FLAG_CANCEL_CURRENT);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        manager.setRepeating(AlarmManager.ELAPSED_REALTIME, SystemClock.elapsedRealtime(), 60000, pendingIntent);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onReceive(Context context, Intent intent) {\u003Cbr \/\u003E        super.onReceive(context, intent);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The minimum interval time is 60000 milliseconds for \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAlarmManager\u003C\/code\u003E. If you need to call your service less than 60 second with an alarm manager, please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/stackoverflow.com\/questions\/29998313\/how-to-run-background-service-after-every-5-sec-not-working-in-android-5-1\" target=\"_blank\"\u003Ethis discussion\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E on StackOverflow. But you should pay attention: this action drains the battery and makes users delete your app. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The widget will be installed after you run the application. Drag it to Home screen and you'll have this result:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/3PYtEz7.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/3PYtEz7.gif\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; I cropped the video to not keep you wait 4 minutes. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Through 4 parts in this series, I hope you now have general knowledge about developing a widget in Android - which can be understand as an extension of the application. For further reading, check these helpful document and tutorial:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/widgets.html#\" target=\"_blank\"\u003EWidget guideline\u003C\/a\u003E at Material Design technology\u003C\/li\u003E\u003Cli\u003EWidget \u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/appwidgets\/index.html\" target=\"_blank\"\u003Eofficial document\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EA good tutorial post on\u0026nbsp;\u003Ca href=\"http:\/\/www.vogella.com\/tutorials\/AndroidWidgets\/article.html\" target=\"_blank\"\u003EVogella\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qzzui0\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5700903301607455667\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-4.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5700903301607455667"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5700903301607455667"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-4.html","title":"Android (Home screen) widget - Part 4: Update widget via Service"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3154104665357972424"},"published":{"$t":"2017-02-09T15:50:00.000+07:00"},"updated":{"$t":"2017-02-09T15:51:34.584+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"activity"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"widget"}],"title":{"type":"text","$t":"Android (Home screen) widget - Part 3: Configurable widget"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-2.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/b\u003E, I had presented one more example of widget: \u003Ci style=\"font-weight: bold;\"\u003EBroadcast Widget \u003C\/i\u003E(which can update it's interface when clicked). Today, I would like to talk about a widget type that can be configurable at creation, this mean when you drag it to Home screen to use, a \"\u003Ci\u003Econfiguration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E\u003C\/i\u003E\" will be launched and you will perform a setting for your widget.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/3IbDlua.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/3IbDlua.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp;In this sample project, we will allow users to choose a link and whenever it’s clicked we open this link on the browser. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate layout for configuration Activity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The most important work of creating this type of widget is developing the configuration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. Firstly, define a simple layout includes a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESpinner\u003C\/code\u003E to allow user selected one value from a set and a one value from a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E to confirm this work: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_config.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:padding=\"@dimen\/activity_horizontal_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Spinner\u003Cbr \/\u003E        android:id=\"@+id\/spinner\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_go\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"@string\/add\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EActivity programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, looking at this source code of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConfigActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EConfigActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.configurablewidget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.PendingIntent;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.net.Uri;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.annotation.Nullable;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.ArrayAdapter;\u003Cbr \/\u003Eimport android.widget.RemoteViews;\u003Cbr \/\u003Eimport android.widget.Spinner;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ConfigActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private int mAppWidgetId = AppWidgetManager.INVALID_APPWIDGET_ID;\u003Cbr \/\u003E    private AppWidgetManager widgetManager;\u003Cbr \/\u003E    private RemoteViews remoteViews;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(@Nullable Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setResult(RESULT_CANCELED);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(R.layout.activity_config);\u003Cbr \/\u003E\u003Cbr \/\u003E        final Spinner spinner = (Spinner)findViewById(R.id.spinner);\u003Cbr \/\u003E        View btnCreate = findViewById(R.id.btn_go);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/create data\u003Cbr \/\u003E        ArrayList\u0026lt;String\u0026gt; spnOptions = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        spnOptions.add(\"Go to my site\");\u003Cbr \/\u003E        spnOptions.add(\"Go to Google page\");\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set adapter for the spinner\u003Cbr \/\u003E        ArrayAdapter\u0026lt;String\u0026gt; adapter = new ArrayAdapter\u0026lt;\u0026gt;(this, android.R.layout.simple_list_item_1, spnOptions);\u003Cbr \/\u003E        spinner.setAdapter(adapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/initializing RemoteViews and AppWidgetManager\u003Cbr \/\u003E        widgetManager = AppWidgetManager.getInstance(this);\u003Cbr \/\u003E        remoteViews = new RemoteViews(this.getPackageName(), R.layout.widget_configurable);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Find the widget id from the intent\u003Cbr \/\u003E        Bundle extras = getIntent().getExtras();\u003Cbr \/\u003E        if (extras != null) {\u003Cbr \/\u003E            mAppWidgetId = extras.getInt(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        if (mAppWidgetId == AppWidgetManager.INVALID_APPWIDGET_ID) {\u003Cbr \/\u003E            finish();\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E        btnCreate.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                String selectedUrl;\u003Cbr \/\u003E                if (spinner.getSelectedItemPosition() == 0) {\u003Cbr \/\u003E                    \/\/ Go to my website with this selection (position = 1)\u003Cbr \/\u003E                    selectedUrl = \"http:\/\/www.devexchanges.info\";\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    selectedUrl = \"https:\/\/www.google.com\";\u003Cbr \/\u003E                }\u003Cbr \/\u003E                Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(selectedUrl));\u003Cbr \/\u003E                PendingIntent pending = PendingIntent.getActivity(ConfigActivity.this, 0, intent, 0);\u003Cbr \/\u003E                remoteViews.setOnClickPendingIntent(R.id.text_view, pending);\u003Cbr \/\u003E                if (spinner.getSelectedItemPosition() == 0) {\u003Cbr \/\u003E                    remoteViews.setTextViewText(R.id.text_view, \"Click to visit my site\");\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    remoteViews.setTextViewText(R.id.text_view, \"Click to visit Google\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E                widgetManager.updateAppWidget(mAppWidgetId, remoteViews);\u003Cbr \/\u003E                Intent resultValue = new Intent();\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ Set the results as expected from a 'configure activity'.\u003Cbr \/\u003E                resultValue.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, mAppWidgetId);\u003Cbr \/\u003E                setResult(RESULT_OK, resultValue);\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E method, the first thing we do is setting \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetResult(RESULT_CANCELED)\u003C\/code\u003E. Why? Android triggers the configuration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E that belongs to your widget and awaits result data. If the user did not configure as we expected, let’s say she pressed back button without entering a data, we don’t need to create a widget.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; At the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESpinner\u003C\/code\u003E, we set data to make 2 options for user to choose (go to \u003Ci\u003EDevExchanges home page\u003C\/i\u003E or \u003Ci\u003EGoogle\u003C\/i\u003E), after click the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E, we update \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E content on the widget and set the Set the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteViews\u003C\/code\u003E to based on \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EappWidgetIds\u003C\/code\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EModifying the widget xml\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The last thing we do is modify the XML of the widget. With that modification, Android OS will know this widget has a configuration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. So before creating the widget, it will trigger the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\xml\\configurable_widget_info.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;appwidget-provider xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:configure=\"info.devexchanges.configurablewidget.ConfigActivity\"\u003Cbr \/\u003E    android:initialLayout=\"@layout\/widget_configurable\"\u003Cbr \/\u003E    android:minHeight=\"40dp\"\u003Cbr \/\u003E    android:minWidth=\"40dp\"\u003Cbr \/\u003E    android:previewImage=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E    android:resizeMode=\"horizontal|vertical\"\u003Cbr \/\u003E    android:updatePeriodMillis=\"86400000\" \/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you notice we didn’t talk about widget class yet. We do not need to add any code for widget class because all actions done by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConfigActivity\u003C\/code\u003E. But we have to create it anyway: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EConfigurableWidget.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.configurablewidget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetProvider;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ConfigurableWidget extends AppWidgetProvider {\u003Cbr \/\u003E    \u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\u003Cbr \/\u003E\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is the layout file for our widget: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\layout\\widget_configurable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:padding=\"8dp\"\u003Cbr \/\u003E        android:background=\"@color\/colorPrimary\"\u003Cbr \/\u003E        android:id=\"@+id\/text_view\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:layout_gravity=\"center\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Before launching the app, make sure you add \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConfigurableWidget\u003C\/code\u003E as a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ereceiver\u003C\/code\u003E to your \u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E like other previous examples: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;application\u003Cbr \/\u003E        android:allowBackup=\"true\"\u003Cbr \/\u003E        ....\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MAIN\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E                \u0026lt;category android:name=\"android.intent.category.LAUNCHER\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;receiver android:name=\".ConfigurableWidget\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.appwidget.action.APPWIDGET_UPDATE\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;meta-data\u003Cbr \/\u003E                android:name=\"android.appwidget.provider\"\u003Cbr \/\u003E                android:resource=\"@xml\/configurable_widget_info\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/receiver\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;activity android:name=\".ConfigActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.appwidget.action.APPWIDGET_CONFIGURE\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/application\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; After app installed, move to \"\u003Cb\u003EWIDGETS\u003C\/b\u003E\" tab, you will see it:  \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/IESUy9v.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/IESUy9v.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And when you drag it to Home page to use, the configuration activity will be launched:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/4O5ECkq.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/4O5ECkq.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When click on it:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/lUk2wZK.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/lUk2wZK.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;If you select other options at the configuration activity, \u0026nbsp;the widget text will be different:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/aBYMDdZ.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/aBYMDdZ.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I've just provided one more example about Android widget, hope you can understand the way to configure widget before using it. Up to next part, I will talk about updating widget via a Service - the most popular and important feature of this topic! Coming soon! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qlE1nP\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3154104665357972424\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-3.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3154104665357972424"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3154104665357972424"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-3.html","title":"Android (Home screen) widget - Part 3: Configurable widget"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-4042974949638448379"},"published":{"$t":"2017-02-07T11:58:00.002+07:00"},"updated":{"$t":"2017-02-07T11:58:21.734+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"android basic"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"StackView"}],"title":{"type":"text","$t":"Android Basic Training Course: Creating a StackView "},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Stack is a common design that we can see at\u003Ci\u003E fronted-end programming\u003C\/i\u003E including mobile app development. When using Android phone, you can realize that showing \"\u003Cb\u003E\u003Ci\u003Erecent apps\u003C\/i\u003E\u003C\/b\u003E\" is a type of stack view design:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/LuuCTp3.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/LuuCTp3.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This design is very diverse but by this post, just about \"\u003Ci\u003EAndroid basic development\u003C\/i\u003E\", I would like to talk about using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStackView\u003C\/code\u003E widget. Like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EGridView\u003C\/code\u003E, it's a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAdapterView\u003C\/code\u003E, so it has the same operation mechanism (adapter of a \"list\" of object). Now, following this tutorial step by step, you will understand the way to use it! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPreparing some drawables resource\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The fact that stack view is usually used for display \"\u003Cb\u003E\u003Ci\u003Estack of images\u003C\/i\u003E\u003C\/b\u003E\" or something that similarity. So, after start a new Android Studio project, please add some own images to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Edrawable\u003C\/code\u003E folder. Make sure that these images have the same size: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Co6pExG.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Co6pExG.png\" height=\"323\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPut StackView to your Activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just including a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStackView\u003C\/code\u003E in your activity layout file like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.stackview.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;StackView\u003Cbr \/\u003E        android:id=\"@+id\/stack_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate layout for each StackView item\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As noted above, Stack view is usually used for display \u003Ci\u003Elist of images,\u003C\/i\u003E so I will make a layout which contains an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E to show a \u003Ci\u003Edrawable resource\u003C\/i\u003E and a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E to present it's name for each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStackView\u003C\/code\u003E item like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_stack.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\" \u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:id=\"@+id\/imageView\"\u003Cbr \/\u003E        android:contentDescription=\"@null\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:src=\"@drawable\/image_1\"\u003Cbr \/\u003E        android:layout_gravity=\"center_horizontal\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/textView\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_gravity=\"center_horizontal\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/holo_blue_dark\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a POJO class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Java object for each Stack view item: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EStackItem.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.stackview;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class StackItem {\u003Cbr \/\u003E\u003Cbr \/\u003E    private int drawableId;\u003Cbr \/\u003E    private String imageName;\u003Cbr \/\u003E\u003Cbr \/\u003E    public StackItem(int id, String imageName) {\u003Cbr \/\u003E        this.imageName = imageName;\u003Cbr \/\u003E        this.drawableId = id;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getImageName() {\u003Cbr \/\u003E        return imageName;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public int getDrawableId() {\u003Cbr \/\u003E        return drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a StackView adapter class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This is the most important step of this tutorial. Like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E, we can create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EArrayAdapter\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBaseAdapter\u003C\/code\u003E to build the adapter class which holding and displaying data. I also provide a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EViewHolder\u003C\/code\u003E to make \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EconvertView\u003C\/code\u003E clearly: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EStackAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.stackview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.annotation.SuppressLint;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.support.annotation.NonNull;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ArrayAdapter;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class StackAdapter extends ArrayAdapter\u0026lt;StackItem\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    private List\u0026lt;StackItem\u0026gt; items;\u003Cbr \/\u003E    private Context context;\u003Cbr \/\u003E\u003Cbr \/\u003E    public StackAdapter(Context context, int textViewResourceId, List\u0026lt;StackItem\u0026gt; objects) {\u003Cbr \/\u003E        super(context, textViewResourceId, objects);\u003Cbr \/\u003E        this.items = objects;\u003Cbr \/\u003E        this.context = context;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @NonNull\u003Cbr \/\u003E    @SuppressLint(\"InflateParams\")\u003Cbr \/\u003E    public View getView(int position, View convertView, @NonNull ViewGroup parent) {\u003Cbr \/\u003E        ViewHolder holder; \/\/initialize a null ViewHolder object\u003Cbr \/\u003E        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E        \/\/ If holder not exist then locate all view from UI file\u003Cbr \/\u003E        if (convertView == null) {\u003Cbr \/\u003E            \/\/ inflate UI from XML file\u003Cbr \/\u003E            convertView = inflater.inflate(R.layout.item_stack, parent, false);\u003Cbr \/\u003E            \/\/ get all UI view\u003Cbr \/\u003E            holder = new ViewHolder(convertView);\u003Cbr \/\u003E            \/\/ set tag for holder\u003Cbr \/\u003E            convertView.setTag(holder);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            \/\/ if holder created, get tag from view\u003Cbr \/\u003E            holder = (ViewHolder) convertView.getTag();\u003Cbr \/\u003E        }\u003Cbr \/\u003E        StackItem stackItem = items.get(position);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set stack item data to views\u003Cbr \/\u003E        holder.image.setImageResource(stackItem.getDrawableId());\u003Cbr \/\u003E        holder.imageName.setText(stackItem.getImageName());\u003Cbr \/\u003E\u003Cbr \/\u003E        return convertView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private class ViewHolder {\u003Cbr \/\u003E        private TextView imageName;\u003Cbr \/\u003E        private ImageView image;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            this.image = (ImageView) view.findViewById(R.id.imageView);\u003Cbr \/\u003E            this.imageName = (TextView) view.findViewById(R.id.textView);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EActivity programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There is nothing special in the main activity code. Just initializing an adapter\u0026nbsp;with available data and attaching it to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStackView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.stackview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.util.Log;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.AdapterView;\u003Cbr \/\u003Eimport android.widget.StackView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private final int[] IMAGE_IDs = {R.drawable.image_1, R.drawable.image_2, R.drawable.image_3,\u003Cbr \/\u003E            R.drawable.image_4, R.drawable.image_5, R.drawable.image_6};\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        StackView stackView = (StackView) findViewById(R.id.stack_view);\u003Cbr \/\u003E\u003Cbr \/\u003E        ArrayList\u0026lt;StackItem\u0026gt; stackItems = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        for (int imageId : IMAGE_IDs) {\u003Cbr \/\u003E            String name = getResources().getResourceEntryName(imageId);\u003Cbr \/\u003E            stackItems.add(new StackItem(imageId, name));\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        StackAdapter stackAdapter = new StackAdapter(this, R.layout.item_stack, stackItems);\u003Cbr \/\u003E        stackView.setAdapter(stackAdapter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Our output will be like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/lOBlvz6.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/lOBlvz6.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EThe weakness of the \"default\" StackView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This \"official\" widget of Android SDK has the biggest weakness is swipe listener is absent, detect this user action is not a easily. Selected item event still not working well, either. I recommend to use a third-party library to make this layout better in programming. These are some of them:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/github.com\/blipinsk\/FlippableStackView\" target=\"_blank\"\u003EFlippableStackView\u003C\/a\u003E - developed by \u003Cb\u003EBartek Lipinski\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/github.com\/Arjun-sna\/android-swipecards-view\" target=\"_blank\"\u003ESwipeCardsView\u003C\/a\u003E - developed by \u003Cb\u003EArjun Sna\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003EI also had a post about creating Swipe Card Stack, read this tutorial \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/11\/cards-stack-like-tinder-application-in.html\" target=\"_blank\"\u003EHERE\u003C\/a\u003E\u003C\/b\u003E! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qk9f6x\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Ctable border=\"1\" cellpadding=\"0\" cellspacing=\"0\" class=\"MsoTableLightShadingAccent5\" style=\"border-collapse: collapse; border: none; mso-border-bottom-alt: solid #4BACC6 1.0pt; mso-border-bottom-themecolor: accent5; mso-border-top-alt: solid #4BACC6 1.0pt; mso-border-top-themecolor: accent5; mso-padding-alt: 0in 5.4pt 0in 5.4pt; mso-yfti-tbllook: 1184;\"\u003E \u003Ctbody\u003E\u003Ctr style=\"mso-yfti-firstrow: yes; mso-yfti-irow: -1; mso-yfti-lastrow: yes;\"\u003E  \u003Ctd style=\"border-bottom: solid #4BACC6 1.0pt; border-left: none; border-right: none; border-top: solid #4BACC6 1.0pt; mso-border-bottom-themecolor: accent5; mso-border-top-themecolor: accent5; padding: 0in 5.4pt 0in 5.4pt; width: 2.05in;\" valign=\"top\" width=\"148\"\u003E\u003Cdiv class=\"MsoNormal\" style=\"mso-yfti-cnfc: 5;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #31849b; font-size: 16.0pt;\"\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/09\/android-basic-training-course.html\"\u003EPrevious Chapter\u003C\/a\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003C\/td\u003E  \u003Ctd style=\"border-bottom: solid #4BACC6 1.0pt; border-left: none; border-right: none; border-top: solid #4BACC6 1.0pt; mso-border-bottom-themecolor: accent5; mso-border-top-themecolor: accent5; padding: 0in 5.4pt 0in 5.4pt; width: 2.05in;\" valign=\"top\" width=\"148\"\u003E\u003Cdiv class=\"MsoNormal\" style=\"mso-yfti-cnfc: 1;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #31849b; font-size: 16.0pt;\"\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/p\/android-basic-training-course.html\"\u003ETable Of\u003Cspan style=\"mso-spacerun: yes;\"\u003E\u0026nbsp; \u003C\/span\u003EContents\u003C\/a\u003E\u003Co:p\u003E\u003C\/o:p\u003E\u003C\/span\u003E\u003C\/b\u003E\u003C\/div\u003E\u003C\/td\u003E \u003Ctd style=\"border-bottom: solid #4BACC6 1.0pt; border-left: none; border-right: none; border-top: solid #4BACC6 1.0pt; mso-border-bottom-themecolor: accent5; mso-border-top-themecolor: accent5; padding: 0in 5.4pt 0in 5.4pt; width: 2.05in;\" valign=\"top\" width=\"148\"\u003E\u003Cdiv class=\"MsoNormal\" style=\"mso-yfti-cnfc: 5;\"\u003E\u003Cbr \/\u003E\u003C\/div\u003E\u003C\/td\u003E \u003C\/tr\u003E\u003C\/tbody\u003E\u003C\/table\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/4042974949638448379\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-basic-training-course-creating.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/4042974949638448379"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/4042974949638448379"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-basic-training-course-creating.html","title":"Android Basic Training Course: Creating a StackView "}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-2011173074125742525"},"published":{"$t":"2017-02-06T14:02:00.000+07:00"},"updated":{"$t":"2017-02-09T15:56:29.502+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"BroadcastReceiver"},{"scheme":"http://www.blogger.com/atom/ns#","term":"widget"}],"title":{"type":"text","$t":"Android (Home screen) Widget - Part 2: Broadcast Widget"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Through \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-1.html\" target=\"_blank\"\u003EPart 1\u003C\/a\u003E\u003C\/b\u003E, you've learned some basic knowledge about widget in Android development and the way to make a simple one. In this post, I would like to present a widget can update it's information when clicked (every click on the widget will send a broadcast and show current time at the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E).\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/3IbDlua.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/3IbDlua.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; You have learned all steps of widget creation. We will not be repeating these steps, but now, please pay attention at \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteView\u003C\/code\u003E of the widget. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAbout the RemoteView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In Part 1,\u0026nbsp;I have not to talk you about \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteViews\u003C\/code\u003E and widget layout yet, now I will explain some main features of this property.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Of course, you must define an initial layout for your widget in XML and save it in the project's \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/layout\/\u003C\/code\u003E directory. In this example, it will be like this:\u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ewidget_broadcast.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/txt_widget\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:background=\"@color\/colorPrimary\"\u003Cbr \/\u003E        android:gravity=\"center\"\u003Cbr \/\u003E        android:text=\"Click to get current time\"\u003Cbr \/\u003E        android:textColor=\"#ffffff\"\u003Cbr \/\u003E        android:textSize=\"20sp\"\u003Cbr \/\u003E        android:textStyle=\"bold|italic\"\/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Creating the widget layout is simple if you're familiar with \u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/ui\/declaring-layout.html\" target=\"_blank\"\u003ELayouts\u003C\/a\u003E\u003C\/i\u003E. However, you must be aware that widget layouts are based on \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteViews\u003C\/code\u003E, which do not support every kind of layout or view widget.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; A \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteViews\u003C\/code\u003E object (and, consequently, a widget) can support the following layout classes:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/FrameLayout.html\" target=\"_blank\"\u003EFrameLayout\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/LinearLayout.html\" target=\"_blank\"\u003ELinearLayout\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/RelativeLayout.html\" target=\"_blank\"\u003ERelativeLayout\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/GridLayout.html\" target=\"_blank\"\u003EGridLayout\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; And the following widget classes: \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/AnalogClock.html\" target=\"_blank\"\u003EAnalogClock\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/Button.html\" target=\"_blank\"\u003EButton\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/Chronometer.html\" target=\"_blank\"\u003EChronometer\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/ImageButton.html\" target=\"_blank\"\u003EImageButton\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/ImageView.html\" target=\"_blank\"\u003EImageView\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/ProgressBar.html\" target=\"_blank\"\u003EProgressBar\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/TextView.html\" target=\"_blank\"\u003ETextView\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/ViewFlipper.html\" target=\"_blank\"\u003EViewFlipper\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/ListView.html\" target=\"_blank\"\u003EListView\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/GridView.html\" target=\"_blank\"\u003EGridView\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/StackView.html\" target=\"_blank\"\u003EStackView\u003C\/a\u003E, \u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/widget\/AdapterViewFlipper.html\" target=\"_blank\"\u003EAdapterViewFlipper\u003C\/a\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Descendants of these classes are not supported.  \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERemoteViews\u003C\/code\u003E also supports \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EViewStub\u003C\/code\u003E, which is an invisible, zero-sized View you can use to lazily inflate layout resources at runtime. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUpdating when clicked - programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; You always have to create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E to managing the widget lifecycle. Please take a look at this class first: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EBroadcastWidget.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.broadcastwiget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.PendingIntent;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetProvider;\u003Cbr \/\u003Eimport android.content.ComponentName;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.widget.RemoteViews;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Calendar;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class BroadcastWidget extends AppWidgetProvider  {\u003Cbr \/\u003E    private static final String ACTION_BROADCASTWIDGETSAMPLE = \"ACTION_BROADCASTWIDGETSAMPLE\";\u003Cbr \/\u003E\u003Cbr \/\u003E    private void updateAppWidget(Context context, AppWidgetManager appWidgetManager,\u003Cbr \/\u003E                                int appWidgetId) {\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Build the RemoteViews object\u003Cbr \/\u003E        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_broadcast);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Create an Intent which is pointing this class\u003Cbr \/\u003E        Intent intent = new Intent(context, BroadcastWidget.class);\u003Cbr \/\u003E        intent.setAction(ACTION_BROADCASTWIDGETSAMPLE);\u003Cbr \/\u003E        \/\/ And this time we are sending a broadcast with getBroadcast\u003Cbr \/\u003E        PendingIntent pendingIntent = PendingIntent.getBroadcast(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Update widget when clicked\u003Cbr \/\u003E        views.setOnClickPendingIntent(R.id.txt_widget, pendingIntent);\u003Cbr \/\u003E        appWidgetManager.updateAppWidget(appWidgetId, views);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\u003Cbr \/\u003E        \/\/ There may be multiple widgets active, so update all of them\u003Cbr \/\u003E        for (int appWidgetId : appWidgetIds) {\u003Cbr \/\u003E            updateAppWidget(context, appWidgetManager, appWidgetId);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onReceive(Context context, Intent intent) {\u003Cbr \/\u003E        super.onReceive(context, intent);\u003Cbr \/\u003E        if (ACTION_BROADCASTWIDGETSAMPLE.equals(intent.getAction())) {\u003Cbr \/\u003E            RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_broadcast);\u003Cbr \/\u003E            views.setTextViewText(R.id.txt_widget, getCurrentDateTime());\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/ This time we don't have widgetId. Reaching our widget with that way\u003Cbr \/\u003E            ComponentName appWidget = new ComponentName(context, BroadcastWidget.class);\u003Cbr \/\u003E            AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);\u003Cbr \/\u003E\u003Cbr \/\u003E            \/\/ Update the widget\u003Cbr \/\u003E            appWidgetManager.updateAppWidget(appWidget, views);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private String getCurrentDateTime() {\u003Cbr \/\u003E        Calendar c = Calendar.getInstance();\u003Cbr \/\u003E        int second = c.get(Calendar.SECOND);\u003Cbr \/\u003E        int minute = c.get(Calendar.MINUTE);\u003Cbr \/\u003E        int hour = c.get(Calendar.HOUR_OF_DAY);\u003Cbr \/\u003E\u003Cbr \/\u003E        return hour + \":\" + minute + \":\" + second;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In previous example we used \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetActivity()\u003C\/code\u003E, this time we are going to use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetBroadcast()\u003C\/code\u003E when instruct the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetManager\u003C\/code\u003E to update the widget.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; To get current time, I use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ejava.util.Calendar\u003C\/code\u003E, on other way, you can use a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EDate\u003C\/code\u003E instance! \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; When user clicked at the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonReceive()\u003C\/code\u003E will be called and in this method, we get current time and shown by this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; For another step about creating this widget, please read at \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-1.html\" target=\"_blank\"\u003EPart 1\u003C\/a\u003E\u003C\/b\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003ENOTE\u003C\/u\u003E\u003C\/b\u003E: You can send whatever you want with broadcast and you can catch the broadcast wherever you want. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just keeping the default code of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E, running this app, you'll see \"\u003Ci\u003EHello, World\u003C\/i\u003E\" text:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ZqAIk3d.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ZqAIk3d.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; And the widget is installed, you can find it at \u003Cb\u003EWIDGETS\u003C\/b\u003E tab of the device. Drag it to Home screen to use:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/7SXRZrz.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/7SXRZrz.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And when you click on the widget text:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Imh76M1.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Imh76M1.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I've just introduce an another example\/feature of Android app widget: updating information when user clicked. Hope this post is helpful with all readers in your own work. Up to \u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-3.html\" target=\"_blank\"\u003EPart 3\u003C\/a\u003E\u003C\/i\u003E, I will talk about configurable widget with an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E, coming soon! \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp;\u003Cbr \/\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; \u003Cu\u003EUpdate\u003C\/u\u003E\u003C\/b\u003E: Part 3 - Configurable widget now available \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-3.html\" target=\"_blank\"\u003EHERE\u003C\/a\u003E\u003C\/b\u003E!\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qkXwfE\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/2011173074125742525\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-2.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2011173074125742525"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2011173074125742525"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-2.html","title":"Android (Home screen) Widget - Part 2: Broadcast Widget"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5981936881773150536"},"published":{"$t":"2017-02-03T15:55:00.001+07:00"},"updated":{"$t":"2017-02-06T17:05:28.444+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"widget"}],"title":{"type":"text","$t":"Android (Home screen) Widget - Part 1: Simple widget"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Widgets can be thought of as a small window or controller for an Android app that can be embedded in another application (like the home screen). They can be very useful, allowing users to view or control an app without actually launching it. This is official definition of widget in Android: \u003Cbr \/\u003E\u003Cblockquote style=\"background-color: white; border-left-color: rgb(0, 188, 213); border-left-style: solid; border-width: 0px 0px 0px 2px; color: #444444; font-family: 'Open Sans', Arial, Verdana; font-size: 16px; font-style: italic; line-height: 27.4286px; margin: 0px 2rem 1rem; padding: 0.5rem; quotes: none; text-align: justify; vertical-align: baseline;\"\u003E\u003Cdiv style=\"border: 0px; line-height: 1.8; padding: 0px; vertical-align: baseline;\"\u003E\u003Cspan style=\"line-height: 1.8;\"\u003EWidgets are an essential aspect of home screen customization. You can imagine them as “at-a-glance” views of an app’s most important data and functionality that is accessible right from the user’s home screen.\u003C\/span\u003E\u003C\/div\u003E\u003C\/blockquote\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/3IbDlua.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/3IbDlua.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETypes of widget in Android\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Basically, it's can be divided to 4 types of widget in Android: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003EInformation widget\u003C\/b\u003E:\u0026nbsp;display a few crucial information elements that are important to a user and track how that information changes over time. Good examples for information widgets are weather widgets, clock widgets or sports score trackers. Touching information widgets typically launches the associated app and opens a detail view of the widget information. For example: \u003Ci\u003Eweather widget\u003C\/i\u003E.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003ECollection widget\u003C\/b\u003E: collection widgets specialize in displaying multitude elements of the same type, such as a collection of pictures from a gallery app, a collection of articles from a news app or a collection of emails\/messages from a communication app. For example: \u003Ci\u003Eemail widget\u003C\/i\u003E.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EControl widget\u003C\/b\u003E: the main purpose of a control widget is to display often used functions that the user can trigger right from the home screen without having to open the app first. For example: \u003Ci\u003Echange wifi, bluetooth,...state widget\u003C\/i\u003E.\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EHybrid widget\u003C\/b\u003E: While all widgets tend to gravitate towards one of the three types described above, many widgets in reality are hybrids that combine elements of different types. For the purpose of your widget planning, center your widget around one of the base types and add elements of other types if needed. For example: \u003Ci\u003Emusic player widget\u003C\/i\u003E.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EComponents of a widget\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There are 3 components of a widget that you must implement: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EAn \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProviderInfo\u003C\/code\u003E object: describes the metadata for an app widget, such as the app widget's layout, update frequency, and the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E class. This should be defined in XML.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E class implementation: defines the basic methods that allow you to programmatically interface with the App Widget, based on broadcast events. Through it, you will receive broadcasts when the App Widget is updated, enabled, disabled and deleted.\u003C\/li\u003E\u003Cli\u003EView layout: defines the initial layout for the App Widget, defined in XML.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; Additionally, you can implement an app widget configuration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. This is an optional \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E that launches when the user adds your app widget and allows him or her to modify app widget settings at create-time. The following sections describe how to set up each of these components.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, please follow these steps to create a very simple widget which open my website when click on it! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a layout for the widget\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Providing a simple layout for the widget which only includes a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\layout\\widget_simple.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/txtWidget\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:background=\"@color\/colorPrimary\"\u003Cbr \/\u003E        android:gravity=\"center\"\u003Cbr \/\u003E        android:text=\"Click to visit my site\"\u003Cbr \/\u003E        android:textColor=\"#ffffff\"\u003Cbr \/\u003E        android:textSize=\"24sp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003EThis layout is displayed as a widget on user’s Home screen. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate an XML file that defines widget properties\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProviderInfo\u003C\/code\u003E defines the essential qualities of a widget, such as its minimum layout dimensions, its initial layout resource, how often to update the widget, and (optionally) a configuration \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E to launch at create-time. Define the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProviderInfo\u003C\/code\u003E object in an XML resource using a single \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u0026lt;appwidget-provider\u0026gt;\u003C\/code\u003E element and save it in the project's \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/xml\/\u003C\/code\u003E folder: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ewidget_provider_info.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;appwidget-provider xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:initialLayout=\"@layout\/widget_simple\"\u003Cbr \/\u003E    android:minHeight=\"60dp\"\u003Cbr \/\u003E    android:minWidth=\"100dp\"\u003Cbr \/\u003E    android:previewImage=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E    android:resizeMode=\"horizontal|vertical\"\u003Cbr \/\u003E    android:updatePeriodMillis=\"0\"\/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Take a look at some attributes of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u0026lt;appwidget-provider\u0026gt;\u003C\/code\u003E above:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EminHeight\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EminWidth\u003C\/code\u003E: Every 60dp means 1 cell in android Home screen. For this example, the widget takes min 1x1 cell(s).\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EinitialLayout\u003C\/code\u003E: reference for the widget layout(that we already created).\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EpreviewImage\u003C\/code\u003E: the image that will be shown on android’s widget select screen. We can not draw a layout for preview. We have to set an image. For simple, I use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eic_launcher\u003C\/code\u003E of the application.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EresizeMode\u003C\/code\u003E: the configuration for resizing the widget.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EupdatePeriodMillis\u003C\/code\u003E: the widget’s update method is called when the specified time is reached in a millisecond.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a class for the widget lifecycle\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We now need to create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAppWidgetProvider\u003C\/code\u003E (it is also a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBroadcastReceiver\u003C\/code\u003E) so essentially, your widget class is a receiver class. There are some important methods you must\/may override:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonUpdate()\u003C\/code\u003E: called to update the app widget at intervals defined by the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EupdatePeriodMillis\u003C\/code\u003E attribute.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonEnabled()\u003C\/code\u003E: called when an instance the app widget is created for the first time.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonDisabled()\u003C\/code\u003E: called when the last instance of your app widget is deleted from the app widget host.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonDeleted()\u003C\/code\u003E: called every time an app widget is deleted from the host.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonAppWidgetOptionsChanged()\u003C\/code\u003E: called when the widget is first placed and also whenever the widget is resized.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonReceive()\u003C\/code\u003E: called for every broadcast and before each of the above callback methods.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; In this \u003Cb\u003E\u003Cu\u003EPart 1\u003C\/u\u003E\u003C\/b\u003E, I will make a simple widget, so I only override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonUpdate()\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ESimpleWidget.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.simplewidget;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.PendingIntent;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetManager;\u003Cbr \/\u003Eimport android.appwidget.AppWidgetProvider;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.net.Uri;\u003Cbr \/\u003Eimport android.widget.RemoteViews;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class SimpleWidget extends AppWidgetProvider {\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onUpdate(Context context, AppWidgetManager appWidgetManager, int[] appWidgetIds) {\u003Cbr \/\u003E        \/\/ There may be multiple widgets active, so update all of them\u003Cbr \/\u003E        for (int appWidgetId : appWidgetIds) {\u003Cbr \/\u003E            updateAppWidget(context, appWidgetManager, appWidgetId);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void updateAppWidget(Context context, AppWidgetManager appWidgetManager, int appWidgetId) {\u003Cbr \/\u003E        \/\/ Construct the RemoteViews object\u003Cbr \/\u003E        RemoteViews views = new RemoteViews(context.getPackageName(), R.layout.widget_simple);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Create an Intent object includes my website address\u003Cbr \/\u003E        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(\"http:\/\/www.devexchanges.info\/\"));\u003Cbr \/\u003E        PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, intent, 0);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/handle click event of the TextView (launch browser and go to my website)\u003Cbr \/\u003E        views.setOnClickPendingIntent(R.id.txtWidget, pendingIntent);\u003Cbr \/\u003E        appWidgetManager.updateAppWidget(appWidgetId, views);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As a receiver class, your must register it to your \u003Cb\u003E\u003Ci\u003EAndroidManifest.xml\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;application\u003Cbr \/\u003E        android:allowBackup=\"true\"\u003Cbr \/\u003E        android:icon=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E        android:label=\"@string\/app_name\"\u003Cbr \/\u003E        android:supportsRtl=\"true\"\u003Cbr \/\u003E        android:theme=\"@style\/AppTheme\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MAIN\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E                \u0026lt;category android:name=\"android.intent.category.LAUNCHER\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;receiver android:name=\".SimpleWidget\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.appwidget.action.APPWIDGET_UPDATE\"\/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E            \u0026lt;meta-data\u003Cbr \/\u003E                android:name=\"android.appwidget.provider\"\u003Cbr \/\u003E                android:resource=\"@xml\/widget_provider_info\"\/\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/receiver\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/application\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; A widget always \"attach\" with the application. Make sure that you have the default \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E (usually named as \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E) when you created a new Android Studio project. Run this application, the widget will be installed and the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E is also launched (with \"\u003Ci\u003EHello world\u003C\/i\u003E\"!): \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/m0b91Zd.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/m0b91Zd.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Move to \"\u003Cb\u003E\u003Ci\u003EWIDGETS\u003C\/i\u003E\u003C\/b\u003E\" tab on your device, you will see your own widget:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/wsnTQGj.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/wsnTQGj.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to use it, please hold and drag it to the Home screen:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/x9rdOOa.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/x9rdOOa.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And when click the widget:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/oVe1Kkt.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/oVe1Kkt.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Remember that if you uninstall the application, the widget will be removed! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, you're learned about Android widget basic concept and the way to make a simple widget. In \u003Cb\u003E\u003Cu\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-2.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/u\u003E\u003C\/b\u003E, I will talk about making a \u003Cb\u003E\u003Ci\u003EBroadcast widget\u003C\/i\u003E\u003C\/b\u003E - a widget that have update data when clicked (coming soon!). Further, to deep understanding about widget design and development in Android, please read it's official documents:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EWidget \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/widgets.html#\" target=\"_blank\"\u003Edesign guideline\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E (with Material Design style)\u003C\/li\u003E\u003Cli\u003EWidget \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/design\/patterns\/widgets.html\" target=\"_blank\"\u003Edesign pattern\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E\u0026nbsp;on developer document\u003C\/li\u003E\u003Cli\u003EWidget \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/appwidgets\/index.html\" target=\"_blank\"\u003Edevelopment\u003C\/a\u003E\u0026nbsp;\u003C\/i\u003E\u003C\/b\u003Eofficial document\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EUPDATE\u003C\/u\u003E\u003C\/b\u003E: Part 2 now available \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-2.html\"\u003EHERE\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qj9s3N\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5981936881773150536\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-1.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5981936881773150536"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5981936881773150536"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/02\/android-home-screen-widget-part-1.html","title":"Android (Home screen) Widget - Part 1: Simple widget"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-6156067999794954057"},"published":{"$t":"2017-01-23T11:12:00.000+07:00"},"updated":{"$t":"2017-01-23T11:14:10.909+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"actionbar"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"menu"}],"title":{"type":"text","$t":"Android Tip: Detecting long click at options menu item"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In Android, the options menu is where you should include actions and other options that are relevant to the current activity context, such as \"Search,\" \"Compose email,\" and \"Settings\". The option menu always located in Action Bar\/Toolbar (from API 11): \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/PgeLGSj.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/PgeLGSj.png\" height=\"175\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; By reading \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/09\/android-tip-detecting-overflow-button.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, you've learned about detecting overflow button (3) clicked (opening\/closing hidden menu). With other options menu item which always displayed on the Action Bar\/Toolbar, handling it's click event is very easy through overriding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonOptionItemSelected(MenuItem item)\u003C\/code\u003E method but detecting it's long click event is not simple, we must set a custom view for this menu item and handle the view long click event.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, with this tip, I will present a solution to solve this problem. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDefault long click event of the option menu item\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Suppose we have a simple menu file with only one\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem\u003C\/code\u003E like this:\u003Cbr \/\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emenu_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;menu xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/camera\"\u003Cbr \/\u003E        android:title=\"Camera\"\u003Cbr \/\u003E        android:icon=\"@android:drawable\/ic_menu_camera\"\u003Cbr \/\u003E        app:showAsAction=\"always\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/menu\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; With menu \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem\u003C\/code\u003E which has \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eicon\u003C\/code\u003E property, when running, this icon will be displayed instead of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem\u003C\/code\u003E title and if you long click at this item, the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem\u003C\/code\u003E title will be shown by a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EToast\u003C\/code\u003E (like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E's \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EcontentDescription\u003C\/code\u003E):  \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/fICmPeB.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/fICmPeB.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom option menu item actionView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; So, if you want to custom the long click event of menu item, the first work is creating a new layout for it: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\layout\\layout_menu.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    style=\"@android:style\/Widget.ActionButton\"\u003Cbr \/\u003E    android:layout_width=\"wrap_content\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:layout_gravity=\"center\"\u003Cbr \/\u003E    android:gravity=\"center\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E    \u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/button1\"\u003Cbr \/\u003E        android:layout_width=\"40dp\"\u003Cbr \/\u003E        android:layout_height=\"40dp\"\u003Cbr \/\u003E        android:background=\"@android:drawable\/ic_menu_camera\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And now, you must set this layout as the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMenuItem\u003C\/code\u003E \u003Ci\u003Eaction view\u003C\/i\u003E. Get the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E by call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EfindViewId()\u003C\/code\u003E and handle it's long click event (by use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetOnLongClickListener()\u003C\/code\u003E method). These works are perform in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreateOptionsMenu()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public boolean onCreateOptionsMenu(Menu menu) {\u003Cbr \/\u003E        getMenuInflater().inflate(R.menu.menu_main, menu);\u003Cbr \/\u003E        MenuItem item1 = menu.findItem(R.id.camera);\u003Cbr \/\u003E\u003Cbr \/\u003E        MenuItemCompat.setActionView(item1, R.layout.layout_menu);\u003Cbr \/\u003E        View menuLayout = MenuItemCompat.getActionView(item1);\u003Cbr \/\u003E\u003Cbr \/\u003E        View cameraMenu = menuLayout.findViewById(R.id.button1);\u003Cbr \/\u003E        cameraMenu.setOnLongClickListener(new View.OnLongClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public boolean onLongClick(View view) {\u003Cbr \/\u003E                Toast.makeText(MainActivity.this, \"Options menu item long clicked!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                return false;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        return super.onCreateOptionsMenu(menu);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And this is our new output when long click at the camera icon in the options menu: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/GbeIm1n.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/GbeIm1n.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There is an important note here: with this custom, you can not\u0026nbsp;handle this item \"normal click\" event by override\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonOptionsItemSelected(MenuItem item)\u003C\/code\u003E. So, if you want to perform this work, please call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetOnClickListener()\u003C\/code\u003E for the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E inside \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreateOptionsMenu(Menu menu)\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EcameraMenu.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                Toast.makeText(MainActivity.this, \"option menu item clicked!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And you'll get this output when click at the camera icon: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/2agpWMH.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/2agpWMH.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With this small tip, I hope you've learned one more trick with options menu in Android to apply to your own work. For more posts about \u003Cb\u003E\u003Ci\u003EAndroid menu\u003C\/i\u003E\u003C\/b\u003E topic, please visit this \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/search\/label\/menu?max-results=10\" target=\"_blank\"\u003Etag link\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. Finally,  as usual, please get my full project by click the button below! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qdJMMF\" target=\"_blank\"\u003EGET FULL CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/6156067999794954057\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-tip-detecting-long-click-at.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6156067999794954057"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6156067999794954057"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-tip-detecting-long-click-at.html","title":"Android Tip: Detecting long click at options menu item"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-6400246071929951560"},"published":{"$t":"2017-01-17T11:47:00.001+07:00"},"updated":{"$t":"2017-01-17T11:49:31.602+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"files"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Firebase"}],"title":{"type":"text","$t":"Android Firebase File Storage - Part 2: Downloading Files"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In \u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-1.html\" target=\"_blank\"\u003E\u003Cb\u003EPart 1\u003C\/b\u003E\u003C\/a\u003E, you've learned about integrating Firebase in your Android Studio project and \u0026nbsp;upload files from your app to Firebase Storage then. \u0026nbsp;Of course, in this part 2, I will talk about the remaining feature: downloading file with two options: as a \u003Ci\u003Ebyte array\u003C\/i\u003E or a \u003Ci\u003Etemporary file\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/6j7DjFy.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/6j7DjFy.png\" height=\"156\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Firstly, go to \u003Ca href=\"https:\/\/console.firebase.google.com\/\" target=\"_blank\"\u003EFirebase Console\u003C\/a\u003E page and select your project, in the File Storage entry, you'll see all uploaded files like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/FXH2NFg.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/FXH2NFg.png\" height=\"264\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, we will dig to the the solution that download these files to your Android app. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDownload file as a byte array\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As noted at \u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-1.html\" target=\"_blank\"\u003Epart 1\u003C\/a\u003E, in order to access your Firebase Storage files, you'll need to first get a reference to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirebaseStorage\u003C\/code\u003E object, and then create a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E to your project's URL and the file that you want to download. You can find your project's URL at the top of the Files section of Storage in the Firebase Console. \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EFirebaseStorage storage = FirebaseStorage.getInstance();\u003Cbr \/\u003EStorageReference storageRef = storage.getReferenceFromUrl(\"gs:\/\/filestorage-d5afb.appspot.com\").child(\"nougat.jpg\");\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; If you only need to download the file as a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ebyte[]\u003C\/code\u003E and don't need it as a file, which is the more likely case when loading an image into an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E, then you can retrieve the bytes in a similar style: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E                final long ONE_MEGABYTE = 1024 * 1024;\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/download file as a byte array\u003Cbr \/\u003E                storageRef.getBytes(ONE_MEGABYTE).addOnSuccessListener(new OnSuccessListener\u0026lt;byte[]\u0026gt;() {\u003Cbr \/\u003E                    @Override\u003Cbr \/\u003E                    public void onSuccess(byte[] bytes) {\u003Cbr \/\u003E                        Bitmap bitmap = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);\u003Cbr \/\u003E                        imageView.setImageBitmap(bitmap);\u003Cbr \/\u003E                        showToast(\"Download successful!\");\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In my sample project, this is the output for this process: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ScgpEYp.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ScgpEYp.gif\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDownload as a temporary file\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Let create a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFile\u003C\/code\u003E object and attempt to load the file you want by calling \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetFile()\u003C\/code\u003E method on your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E with the new \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFile\u003C\/code\u003E object passed as a parameter. Since this operation happens asynchronously, you can also add\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnSuccessListener\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnFailureListener\u003C\/code\u003E\u0026nbsp;interface to your call in order to handle result: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E                try {\u003Cbr \/\u003E                    showProgressDialog(\"Download File\", \"Downloading File...\");\u003Cbr \/\u003E                    final File localFile = File.createTempFile(\"images\", \"jpg\");\u003Cbr \/\u003E                    storageRef.getFile(localFile).addOnSuccessListener(new OnSuccessListener\u003Cfiledownloadtask .tasksnapshot=\"\"\u003E() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {\u003Cbr \/\u003E                            Bitmap bitmap = BitmapFactory.decodeFile(localFile.getAbsolutePath());\u003Cbr \/\u003E                            imageView.setImageBitmap(bitmap);\u003Cbr \/\u003E                            dismissProgressDialog();\u003Cbr \/\u003E                            showToast(\"Download successful!\");\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    }).addOnFailureListener(new OnFailureListener() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void onFailure(@NonNull Exception exception) {\u003Cbr \/\u003E                            dismissProgressDialog();\u003Cbr \/\u003E                            showToast(\"Download Failed!\");\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    });\u003Cbr \/\u003E                } catch (IOException e ) {\u003Cbr \/\u003E                    e.printStackTrace();\u003Cbr \/\u003E                    Log.e(\"Main\", \"IOE Exception\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003C\/filedownloadtask\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In my case, this downloaded file is an image so I set it to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E. Moreover, you can do other works with the downloaded file depend on your own aim. This is output of my code: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/A1vOWUV.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/A1vOWUV.gif\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EGetting a file's URL\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Sometimes, if you wouldn't like to download the file, you only need it's URL, you can use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetDownloadUrl()\u003C\/code\u003E method on your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E, which will give you a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EUri\u003C\/code\u003E pointing to the file's location: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EstorageRef.getDownloadUrl().addOnSuccessListener(new OnSuccessListener\u003Curi\u003E() {\u003Cbr \/\u003E                    @Override\u003Cbr \/\u003E                    public void onSuccess(Uri uri) {\u003Cbr \/\u003E                        Log.i(\"Main\", \"File uri: \" + uri.toString());\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                });\u003Cbr \/\u003E\u003C\/uri\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And this is the output on Log Cat: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/0tPRF83.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/0tPRF83.png\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ESome advanced options with uploading\/downloading process\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As any Android developer can attest, sometimes the Android activity lifecycle can cause unexpected issues. Fortunately, Firebase SDK has provided the way to keep all active download\/upload tasks and you can restore them when your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E recreated (by override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonSaveInstanceState()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonRestoreInstanceState()\u003C\/code\u003E. For the details, please read at handling \u003Ca href=\"https:\/\/firebase.google.com\/docs\/storage\/android\/download-files#handle_activity_lifecycle_changes\" target=\"_blank\"\u003EActivity lifecycle change\u003C\/a\u003E at File Storage \u003Ci\u003Eofficial document\u003C\/i\u003E, I won't talk about this on this simple tutorial.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp;In particular about uploading process, there are some methods to control the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EUploadTask\u003C\/code\u003E state: \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Epause()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eresume()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ecancel()\u003C\/code\u003E. In addition, you can use an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnPauseListener\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnProgressListener\u003C\/code\u003E to keep track of upload progress and pause states. You can read more at the \u003Ca href=\"https:\/\/firebase.google.com\/docs\/storage\/android\/upload-files#manage_uploads\" target=\"_blank\"\u003Eupload process document\u003C\/a\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Through 2 parts of Firebase File Storage tutorial, I hope that you've learned one more feature of Firebase back-end service and able to apply to your own work. You now understand the way to upload and download files, control data transfers,...when these tasks are occurring. With more tutorials about Firebase, please visit \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/search\/label\/Firebase?max-results=10\" target=\"_blank\"\u003Ethis link\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EFile storage \u003Ca href=\"https:\/\/firebase.google.com\/docs\/storage\/\" target=\"_blank\"\u003Eofficial document\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EAbout Firebase on \u003Ca href=\"https:\/\/en.wikipedia.org\/wiki\/Firebase\" target=\"_blank\"\u003EWikipedia\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EA tutorial post on\u0026nbsp;\u003Ca href=\"https:\/\/code.tutsplus.com\/tutorials\/firebase-for-android-file-storage--cms-27376\" target=\"_blank\"\u003ETut+\u003C\/a\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qoCSec\" target=\"_blank\"\u003EGET FULL CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/6400246071929951560\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-2.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6400246071929951560"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6400246071929951560"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-2.html","title":"Android Firebase File Storage - Part 2: Downloading Files"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-502377431681128863"},"published":{"$t":"2017-01-13T23:03:00.002+07:00"},"updated":{"$t":"2017-01-13T23:03:34.315+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"files"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Firebase"}],"title":{"type":"text","$t":"Android Firebase File Storage - Part 1: Uploading Files"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In this blog, I had presented some Firebase features like account \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/android-getting-started-with-firebase.html\" target=\"_blank\"\u003Eauthentication\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/12\/simple-chat-application-using-firebase.html\" target=\"_blank\"\u003Ereal-time database\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/09\/android-push-notification-using.html\" target=\"_blank\"\u003Eput notifications\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. Because of being a major tool for providing quick back-end support for web pages and mobile applications now, Firebase has been added a lot of new features. Today, with this tutorial, I will introduce you to the \u003Ci\u003Efile storage\u003C\/i\u003E and \u003Ci\u003Eretrieval functionality\u003C\/i\u003E available for your Android apps.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/6j7DjFy.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/6j7DjFy.png\" height=\"156\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ESetting up Firebase to Android Studio project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firebase now has been integrated to Android Studio as a \u003Cb\u003E\u003Ci\u003Etool\u003C\/i\u003E\u003C\/b\u003E, so in the menu bar, let select \u003Cb\u003ETool -\u0026gt; Firebase\u003C\/b\u003E, you will see this panel on the right:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/aTxMG1L.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/aTxMG1L.png\" height=\"344\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Choose \u003Cb\u003EStorage\u003C\/b\u003E entry and click \"\u003Ci\u003EUpload and download file with Firebase Storage\u003C\/i\u003E\", this panel will appear:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/gkI9iHG.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/gkI9iHG.png\" height=\"334\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Choose \"\u003Cb\u003E\u003Ci\u003EConnect to Firebase\u003C\/i\u003E\u003C\/b\u003E\", Android Studio will launch your default browser and you must be logged in by Google account to continue, let follow these simple steps on Google developer console and when you return to Android Studio, you have this dialog:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/MYBFlPG.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/MYBFlPG.png\" height=\"336\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Choose an existed project on your Firebase console (or create a new project) and click \"\u003Cb\u003E\u003Ci\u003EConnect to Firebase\u003C\/i\u003E\u003C\/b\u003E\". After this process completed, click at \"\u003Cb\u003E\u003Ci\u003EAdd Firebase Storage to your app\u003C\/i\u003E\u003C\/b\u003E\" (entry (2)), you'll have this dialog:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/TcGxVdb.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/TcGxVdb.png\" height=\"265\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Click \"\u003Cb\u003E\u003Ci\u003EAccept Changes\u003C\/i\u003E\u003C\/b\u003E\" to add these\u0026nbsp;\u003Ci\u003Edependencies\u003C\/i\u003E and \u003Cb\u003E\u003Ci\u003Egoogle-services.json\u003C\/i\u003E\u003C\/b\u003E file to your project. You now have completed setting up environment work!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; As you can see at the right panel, at the entry \u003Cb\u003E(3)\u003C\/b\u003E, \u003Cb\u003E(4)\u003C\/b\u003E and \u003Cb\u003E(5)\u003C\/b\u003E, these are tutorials about initializing \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E and download\/upload files from\/to Firebase Storage:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/dQ5XYxJ.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/dQ5XYxJ.gif\" height=\"400\" width=\"285\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Open \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/console.firebase.google.com\/\" target=\"_blank\"\u003EFirebase console\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E page and select your project, choose \u003Cb\u003EStorage\u003C\/b\u003E\u0026nbsp;in the left navigation column and select \u003Cb\u003ERules\u003C\/b\u003E tab, you'll see this code:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/KlONimM.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/KlONimM.png\" height=\"270\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this tutorial, I would like to allow unauthenticated users to access and upload files to keep things simple. So on the line \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eallow read, write: if request.auth != null;\u003C\/code\u003E, change \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E!=\u003C\/code\u003E to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E==\u003C\/code\u003E and click the \u003Cb\u003EPUBLISH\u003C\/b\u003E button:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/BToDDp1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/BToDDp1.png\" height=\"238\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now any user of your app should be able to upload or download files from your Firebase back-end. Please remember: this is not ideal for a production environment, but within the scope of a tutorial, it will make learning about Firebase Storage a lot easier without having to dig into authentication code. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ETesting Upload\/Download File on Firebase console\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Of course, you can manually upload files from the Firebase Console. Switch to tab \u003Cb\u003EFile\u003C\/b\u003E, you'll see a blue button titled \u003Cb\u003EUpload File\u003C\/b\u003E:Click it and upload a file from your computer, it will appear in your Firebase Storage:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/jJ1ntvt.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/jJ1ntvt.png\" height=\"238\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Similar with upload, you can select a file from this page, \"\u003Cb\u003EDownload\u003C\/b\u003E\" button will appear and when click it, your file will be downloaded to your computer:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/mRJTFjc.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/mRJTFjc.png\" height=\"240\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUpload a Byte array from Android application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, turn to your Android project to write upload code. First of all, put an image (PNG) file to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eassets\u003C\/code\u003E folder and a text file to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eraw\u003C\/code\u003E folder like this: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/545hQSx.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/545hQSx.png\" height=\"361\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In order to access your Firebase Storage files, you'll need to first get a reference to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirebaseStorage\u003C\/code\u003E object, and then create a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E to your project's URL and the file that you want to upload. You can find your project's URL at the top of the \u003Cb\u003EFiles\u003C\/b\u003E section of \u003Cb\u003EStorage\u003C\/b\u003E in the Firebase Console. In \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E of your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E, provide this code: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EFirebaseStorage storage = FirebaseStorage.getInstance();\u003Cbr \/\u003EStorageReference storageReference = storage.getReferenceFromUrl(\"gs:\/\/filestorage-d5afb.appspot.com\").child(\"firebase.png\");\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Next, we will need to get a byte array from the image file located in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eassets\u003C\/code\u003E folder. We will retrieve it as a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBitmap\u003C\/code\u003E, compressing it into a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EByteArrayOutputStream\u003C\/code\u003E, and then turning that into a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ebyte[]\u003C\/code\u003E. Then, you can create an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EUploadTask\u003C\/code\u003E by calling \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EputBytes(byte[])\u003C\/code\u003E to upload your image to Firebase. This \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EUploadTask\u003C\/code\u003E can also have an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnSuccessListener\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EOnFailureListener\u003C\/code\u003E to handling the upload process result: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EAssetManager assetManager = MainActivity.this.getAssets();\u003Cbr \/\u003E                InputStream istr;\u003Cbr \/\u003E                Bitmap bitmap;\u003Cbr \/\u003E                try {\u003Cbr \/\u003E                    \/\/get bitmap from PNG file in assets folder\u003Cbr \/\u003E                    istr = assetManager.open(\"firebase.png\");\u003Cbr \/\u003E                    bitmap = BitmapFactory.decodeStream(istr);\u003Cbr \/\u003E\u003Cbr \/\u003E                    \/\/decode to byte output stream\u003Cbr \/\u003E                    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\u003Cbr \/\u003E                    bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream);\u003Cbr \/\u003E                    byte[] data = outputStream.toByteArray();\u003Cbr \/\u003E\u003Cbr \/\u003E                    \/\/Upload to firebase\u003Cbr \/\u003E                    showProgressDialog(\"Upload Bitmap\", \"Uploading...\");\u003Cbr \/\u003E                    UploadTask uploadTask = storageReference.putBytes(data);\u003Cbr \/\u003E                    uploadTask.addOnFailureListener(new OnFailureListener() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void onFailure(@NonNull Exception exception) {\u003Cbr \/\u003E                            exception.printStackTrace();\u003Cbr \/\u003E                            dismissProgressDialog();\u003Cbr \/\u003E                            Toast.makeText(MainActivity.this, \"Upload Failed!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    }).addOnSuccessListener(new OnSuccessListener\u0026lt;UploadTask.TaskSnapshot\u0026gt;() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\u003Cbr \/\u003E                            dismissProgressDialog();\u003Cbr \/\u003E                            Toast.makeText(MainActivity.this, \"Upload successful!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    });\u003Cbr \/\u003E\u003Cbr \/\u003E                } catch (IOException e) {\u003Cbr \/\u003E                    e.printStackTrace();\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In this sample project, upload process will be invoked after click a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButton\u003C\/code\u003E, this is output:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Ld4rjFs.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Ld4rjFs.gif\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Go to Firebase Console page, you will see the new uploaded file(\u003Cb\u003E\u003Ci\u003Efirebase.png\u003C\/i\u003E\u003C\/b\u003E):\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/FXH2NFg.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/FXH2NFg.png\" height=\"264\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUploading From an InputStream\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now that you know how to upload a byte array, the other two types of uploads should be fairly intuitive. Let's say we have a text file named \u003Cb\u003E\u003Ci\u003Etest.txt\u003C\/i\u003E\u003C\/b\u003E in our \u003Cb\u003E\u003Ci\u003Eraw\u003C\/i\u003E\u003C\/b\u003E resources folder. We can read this into an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EInputStream\u003C\/code\u003E and then upload it by using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EputStream(InputStream)\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStorageReference\u003C\/code\u003E. Like the case above, we use an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EUploadTask\u003C\/code\u003E to upload and adding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EaddOnSuccessListener\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EaddOnFailureListener\u003C\/code\u003E to it: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E                storageReference = storage.getReferenceFromUrl(\"gs:\/\/filestorage-d5afb.appspot.com\").child(\"test_upload.txt\");\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/Upload input stream to Firebase\u003Cbr \/\u003E                showProgressDialog(\"Upload File\", \"Uploading text file...\");\u003Cbr \/\u003E                InputStream stream = getResources().openRawResource(R.raw.test);\u003Cbr \/\u003E                UploadTask uploadTask = storageReference.putStream(stream);\u003Cbr \/\u003E                uploadTask.addOnFailureListener(new OnFailureListener() {\u003Cbr \/\u003E                    @Override\u003Cbr \/\u003E                    public void onFailure(@NonNull Exception exception) {\u003Cbr \/\u003E                        exception.printStackTrace();\u003Cbr \/\u003E                        dismissProgressDialog();\u003Cbr \/\u003E                        Toast.makeText(MainActivity.this, \"Upload Failed!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                }).addOnSuccessListener(new OnSuccessListener\u003Cuploadtask .tasksnapshot=\"\"\u003E() {\u003Cbr \/\u003E                    @Override\u003Cbr \/\u003E                    public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {\u003Cbr \/\u003E                        dismissProgressDialog();\u003Cbr \/\u003E                        Toast.makeText(MainActivity.this, \"Upload successful!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                });\u003Cbr \/\u003E\u003C\/uploadtask\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And this is output of my sample project: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/vveVZex.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/vveVZex.gif\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Go to Firebase Console page, you will see new uploaded file named \u003Cb\u003E\u003Ci\u003Etest_upload.txt\u003C\/i\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/T6sntCO.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/T6sntCO.png\" height=\"276\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #990000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: You also have another upload option is File. Uploading an existing file is just as easy: simply get a reference to the file and call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EputFile(Uri)\u003C\/code\u003E with a URI pointing to your file. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this post, I have presented the way to upload a file to Firebase. Based on the file type, we can upload it as a byte array or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EInputStream\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFile\u003C\/code\u003E. Up to Part 2, I will talk about downloading file from Firebase Storage, coming soon! \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EOfficial Firebase \u003Ca href=\"https:\/\/firebase.google.com\/docs\/storage\/\" target=\"_blank\"\u003Edocument\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EA post on \u003Ci\u003E\u003Ca href=\"https:\/\/code.tutsplus.com\/tutorials\/firebase-for-android-file-storage--cms-27376\" target=\"_blank\"\u003ETut+\u003C\/a\u003E\u003C\/i\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qoCSec\" target=\"_blank\"\u003EGET FULL CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/502377431681128863\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-1.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/502377431681128863"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/502377431681128863"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-firebase-file-storage-part-1.html","title":"Android Firebase File Storage - Part 1: Uploading Files"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3766378631087651446"},"published":{"$t":"2017-01-12T08:47:00.000+07:00"},"updated":{"$t":"2017-01-12T08:47:16.758+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"chip"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Gmail style"},{"scheme":"http://www.blogger.com/atom/ns#","term":"library"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Android Material Design component: Chip - Part 2: AutoCompleteTextView with chips (like Gmail)"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In \u003Cb\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html\" target=\"_blank\"\u003EPart 1\u003C\/a\u003E\u003C\/b\u003E, you've learned how to make a chip layout by customizing in XML resources. The fact that the most popular apply of this component is putting into an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAutoCompleteTextview\u003C\/code\u003E to perform \u003Ci\u003Ehint\/selected\u003C\/i\u003E information. For example, we can see this design in \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/play.google.com\/store\/apps\/details?id=com.google.android.gm\" target=\"_blank\"\u003EGmail application\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/newxxdT.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/newxxdT.png\" height=\"400\" width=\"331\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this post, I will present the way to make this design by using a third-pary library! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding library dependencies\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As noted above, because this design is very popular so there are a lot of libraries are available on \u003Cb\u003EGithub\u003C\/b\u003E which able to help us to do this work easily. I will use \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\" target=\"_blank\"\u003ETokenAutoComplete\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, in my opinion, this is good library and has a clearly document. So, in order to use it in your project, please add it's dependency to your application level\u0026nbsp;\u003Cb\u003Ebuild.gradle\u003C\/b\u003E first: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile \"com.splitwise:tokenautocomplete:2.0.8@aar\"\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom an AutoCompleteTextView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; First of all, suppose we have a POJO class (contact data) simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ESimpleContact.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class SimpleContact {\u003Cbr \/\u003E    private int drawableId;\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E    private String email;\u003Cbr \/\u003E\u003Cbr \/\u003E    public SimpleContact(int drawableId, String name, String email) {\u003Cbr \/\u003E        this.drawableId = drawableId;\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E        this.email = email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public int getDrawableId() {\u003Cbr \/\u003E        return drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getName() {\u003Cbr \/\u003E        return name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setName(String name) {\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getEmail() {\u003Cbr \/\u003E        return email;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public String toString() {\u003Cbr \/\u003E        return getName() + \"|\" + getEmail();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We now must create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenCompleteTextView\u0026lt;T\u0026gt;\u003C\/code\u003E to make a layout for \"chips item\" inside the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E. For simplicity, just make a class look like \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\/blob\/master\/example\/src\/main\/java\/com\/tokenautocomplete\/ContactsCompletionView.java\" target=\"_blank\"\u003EContactsCompletionView.java\u003C\/a\u003E\u003C\/code\u003E in the library \u003Ci\u003E\u003Cb\u003Esample module\u003C\/b\u003E\u003C\/i\u003E. In this project, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003ET\u003C\/b\u003E\u003C\/code\u003E is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESimpleContact\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EContactsCompletionView.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.util.AttributeSet;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.TokenCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003E\/**\u003Cbr \/\u003E * Sample token completion view for basic contact info\u003Cbr \/\u003E * \u0026lt;p\u0026gt;\u003Cbr \/\u003E * Created on 9\/12\/13.\u003Cbr \/\u003E *\u003Cbr \/\u003E * @author mgod\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class ContactsCompletionView extends TokenCompleteTextView\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context) {\u003Cbr \/\u003E        super(context);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context, AttributeSet attrs) {\u003Cbr \/\u003E        super(context, attrs);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public ContactsCompletionView(Context context, AttributeSet attrs, int defStyle) {\u003Cbr \/\u003E        super(context, attrs, defStyle);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected View getViewForObject(SimpleContact contact) {\u003Cbr \/\u003E        LayoutInflater l = (LayoutInflater) getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E        View tokenView = l.inflate(R.layout.item_autocomplete_contact, (ViewGroup) getParent(), false);\u003Cbr \/\u003E        TokenTextView textView = (TokenTextView) tokenView.findViewById(R.id.token_text);\u003Cbr \/\u003E        ImageView icon = (ImageView) tokenView.findViewById(R.id.icon);\u003Cbr \/\u003E        textView.setText(contact.getName());\u003Cbr \/\u003E        icon.setImageResource(contact.getDrawableId());\u003Cbr \/\u003E\u003Cbr \/\u003E        return tokenView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected SimpleContact defaultObject(String completionText) {\u003Cbr \/\u003E        \/\/Stupid simple example of guessing if we have an email or not\u003Cbr \/\u003E        int index = completionText.indexOf('@');\u003Cbr \/\u003E        if (index == -1) {\u003Cbr \/\u003E            return new SimpleContact(R.drawable.male, completionText, completionText.replace(\" \", \"\") + \"@example.com\");\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            return new SimpleContact(R.drawable.female, completionText.substring(0, index), completionText);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is each chip layout (XML) file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_autocomplete_contact.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:background=\"@drawable\/chip_drawable\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:id=\"@+id\/icon\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:contentDescription=\"@null\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;info.devexchanges.chipedittext.TokenTextView\u003Cbr \/\u003E        android:id=\"@+id\/token_text\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:paddingLeft=\"8dp\"\u003Cbr \/\u003E        android:paddingRight=\"8dp\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, there is an class named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenTextView\u003C\/code\u003E, this is a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E which \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonSelected()\u003C\/code\u003E method was overridden to set it's state when user \u003Cb\u003E\u003Ci\u003Eselected\/clicked\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ETokenTextView.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.util.AttributeSet;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003E\/**\u003Cbr \/\u003E * Created by mgod on 5\/27\/15.\u003Cbr \/\u003E *\u003Cbr \/\u003E * Simple custom view example to show how to get selected events from the token\u003Cbr \/\u003E * view. See ContactsCompletionView and contact_token.xml for usage\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class TokenTextView extends TextView {\u003Cbr \/\u003E\u003Cbr \/\u003E    public TokenTextView(Context context) {\u003Cbr \/\u003E        super(context);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public TokenTextView(Context context, AttributeSet attrs) {\u003Cbr \/\u003E        super(context, attrs);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void setSelected(boolean selected) {\u003Cbr \/\u003E        super.setSelected(selected);\u003Cbr \/\u003E        setCompoundDrawablesWithIntrinsicBounds(0, 0, selected ? R.drawable.ic_clear_white_18dp : 0, 0);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I took this class from \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete\/blob\/master\/example\/src\/main\/java\/com\/tokenautocomplete\/TokenTextView.java\" target=\"_blank\"\u003Eoriginal file\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E in the \u003Ci\u003Elibrary sample module\u003C\/i\u003E. This is the background drawable for the root view of item_autocomplete_contact.xml file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\/drawable\/chip_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@android:color\/darker_gray\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPutting the AutoCompleteTextView to activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Up to now, we created a auto completed view object named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactsCompletionView\u003C\/code\u003E, so put an instance to the main activity layout file like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;LinearLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chipedittext.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;info.devexchanges.chipedittext.ContactsCompletionView\u003Cbr \/\u003E        android:id=\"@+id\/autocomplete_textview\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:focusableInTouchMode=\"true\"\u003Cbr \/\u003E        android:imeOptions=\"actionDone\"\u003Cbr \/\u003E        android:inputType=\"text|textNoSuggestions|textMultiLine\"\u003Cbr \/\u003E        android:nextFocusDown=\"@+id\/editText\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/darker_gray\"\u003Cbr \/\u003E        android:textSize=\"19sp\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_get\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"Get Input Data\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/input_content\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate adapter class for AutoCompleteTextView\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The next work is making a filter adapter for the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EContactsCompletionView\u003C\/code\u003E by making a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFilteredArrayAdapter\u003C\/code\u003E, I'll create a my own adapter class by overriding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetView()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EkeepObject()\u003C\/code\u003E methods:  \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EFilterAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.support.annotation.NonNull;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.FilteredArrayAdapter;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class FilterAdapter extends FilteredArrayAdapter\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    public FilterAdapter(Context context, int resource, List\u0026lt;SimpleContact\u0026gt; objects) {\u003Cbr \/\u003E        super(context, resource,  objects);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @NonNull\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public View getView(int position, View convertView, @NonNull ViewGroup parent) {\u003Cbr \/\u003E        if (convertView == null) {\u003Cbr \/\u003E\u003Cbr \/\u003E            LayoutInflater layoutInflater = (LayoutInflater) getContext().getSystemService(Activity.LAYOUT_INFLATER_SERVICE);\u003Cbr \/\u003E            convertView = layoutInflater.inflate(R.layout.item_contact, parent, false);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        SimpleContact contact = getItem(position);\u003Cbr \/\u003E        ((TextView) convertView.findViewById(R.id.name)).setText(contact != null ? contact.getName() : null);\u003Cbr \/\u003E        ((TextView) convertView.findViewById(R.id.email)).setText(contact != null ? contact.getEmail() : null);\u003Cbr \/\u003E        assert contact != null;\u003Cbr \/\u003E        ((ImageView) convertView.findViewById(R.id.icon)).setImageResource(contact.getDrawableId());\u003Cbr \/\u003E\u003Cbr \/\u003E        return convertView;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected boolean keepObject(SimpleContact person, String mask) {\u003Cbr \/\u003E        mask = mask.toLowerCase();\u003Cbr \/\u003E        return person.getName().toLowerCase().startsWith(mask) || person.getEmail().toLowerCase().startsWith(mask);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see at the adapter class code, each \"hint row\" of auto completion view layout was inflated from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eitem_contact\u003C\/code\u003E (XML) file. This is it's code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_contact.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:padding=\"5dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ImageView\u003Cbr \/\u003E        android:id=\"@+id\/icon\"\u003Cbr \/\u003E        android:src=\"@drawable\/male\"\u003Cbr \/\u003E        android:layout_centerVertical=\"true\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/name\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:text=\"Large Text\"\u003Cbr \/\u003E        android:textAppearance=\"?android:attr\/textAppearanceMedium\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/email\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/name\"\u003Cbr \/\u003E        android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E        android:text=\"Small Text\"\u003Cbr \/\u003E        android:textAppearance=\"?android:attr\/textAppearanceSmall\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EActivity programmatically code configuration\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to make a responding to user selections in the auto completion view items (chip object), your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E must implements \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETokenListener\u003C\/code\u003E interface. By this, there are 2 methods you must override: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonTokenAdded()\u003C\/code\u003E: called when a chip item added\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonTokenRemoved\u003C\/code\u003E: called when user remove a chip item from auto completion view\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; This is simple source code the main activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chipedittext;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.util.Log;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.tokenautocomplete.TokenCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity implements TokenCompleteTextView.TokenListener\u0026lt;SimpleContact\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    private ArrayList\u0026lt;SimpleContact\u0026gt; contacts;\u003Cbr \/\u003E    private FilterAdapter filterAdapter;\u003Cbr \/\u003E    private ContactsCompletionView autoCompleteTextView;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E        setSampleContact();\u003Cbr \/\u003E\u003Cbr \/\u003E        autoCompleteTextView = (ContactsCompletionView) findViewById(R.id.autocomplete_textview);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Initializing and attaching adapter for AutocompleteTextView\u003Cbr \/\u003E        filterAdapter = new FilterAdapter(this, R.layout.item_contact, contacts);\u003Cbr \/\u003E        autoCompleteTextView.setAdapter(filterAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Set the listener that will be notified of changes in the Tokenlist\u003Cbr \/\u003E        autoCompleteTextView.setTokenListener(this);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Set the action to be taken when a Token is clicked\u003Cbr \/\u003E        autoCompleteTextView.setTokenClickStyle(TokenCompleteTextView.TokenClickStyle.Select);\u003Cbr \/\u003E\u003Cbr \/\u003E        final TextView inputContent = (TextView) findViewById(R.id.input_content);\u003Cbr \/\u003E        View btnGet = findViewById(R.id.btn_get);\u003Cbr \/\u003E        btnGet.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                List\u0026lt;SimpleContact\u0026gt; tokens = autoCompleteTextView.getObjects();\u003Cbr \/\u003E                StringBuilder content = new StringBuilder();\u003Cbr \/\u003E                for (int i = 0; i \u0026lt; tokens.size(); i++) {\u003Cbr \/\u003E                    content.append(tokens.get(i)).append(\"; \");\u003Cbr \/\u003E                }\u003Cbr \/\u003E                inputContent.setText(String.format(\"You choose: %s\", content.toString()));\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setSampleContact() {\u003Cbr \/\u003E        contacts = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Thanh Ngan\", \"ngan@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Quang Minh\", \"minh@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Tran Tinh\", \"thanh_67@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Phan Hoa\", \"hoa@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Pham Trang\", \"trang@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Dinh Tuan\", \"dtuan@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Kim Chi\", \"kimchi@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.male, \"Quoc Cuong\", \"cuong@gmail.com\"));\u003Cbr \/\u003E        contacts.add(new SimpleContact(R.drawable.female, \"Hai Yen\", \"hai_yen@gmail.com\"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onTokenAdded(SimpleContact token) {\u003Cbr \/\u003E        Log.d(\"Main\", \"A Token added\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onTokenRemoved(SimpleContact token) {\u003Cbr \/\u003E        Log.d(\"Main\", \"A Token removed\");\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the application - some screen shots\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; A chip in the auto completion view is simple like this: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/GW1gXab.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/GW1gXab.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When you are typing in the auto completion view, suggestion results will be displayed:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ViVJ6kc.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ViVJ6kc.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When user select and delete a chip item:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/z2i2azs.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/z2i2azs.gif\" height=\"400\" width=\"221\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After click \"\u003Cb\u003E\u003Cspan style=\"color: #999999;\"\u003EGet Input Data\u003C\/span\u003E\u003C\/b\u003E\" button:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Ry416mR.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Ry416mR.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; By using a third-party library, we now can creating an auto completion view with chip, a good design that you can see at Gmail Android app. For more details, you can read at \u003Ca href=\"https:\/\/github.com\/splitwise\/TokenAutoComplete#creating-your-auto-complete-view\" target=\"_blank\"\u003Ethis library document\u003C\/a\u003E. By searching on the Internet, you can find out that there are a lot of other libraries which able to resolved this problem easily you can try. For examples:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/klinker41\/android-chips\" target=\"_blank\"\u003EAndroid Chip\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by\u0026nbsp;Jake Klinker\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/DoodleScheduling\/android-material-chips\" target=\"_blank\"\u003EMaterial-design-chip\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by\u0026nbsp;Doodle AG (Chip with Material design style)\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/kpbird\/chips-edittext-library\" target=\"_blank\"\u003EAn another one\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E developed by KPBird\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qoc9fN\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3766378631087651446\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3766378631087651446"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3766378631087651446"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html","title":"Android Material Design component: Chip - Part 2: AutoCompleteTextView with chips (like Gmail)"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-332271109960358139"},"published":{"$t":"2017-01-05T11:05:00.000+07:00"},"updated":{"$t":"2017-01-14T10:25:58.309+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"chip"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Android Material Design component: Chip - Part 1: Creating chips layout"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Chip is a Material Design component which presented by Google developers. It represents complex entities in small blocks, such as a contact. From guideline on \u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html#\" target=\"_blank\"\u003EGoogle design\u003C\/a\u003E\u003C\/i\u003E, a chip may:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003Econtain entities such as a photo, text, rules, an icon, or a contact.\u003C\/li\u003E\u003Cli\u003Erepresent contact information in a compact way.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; For a popular example, we can see this component on Google Play:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eFTOPyO.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eFTOPyO.png\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In Android SDK and Design Support library, there is no \u003Cb\u003E\u003Ci\u003Eofficial widget\u003C\/i\u003E\u003C\/b\u003E to make a chip layout, so we must custom it ourselves. Moreover, there are tons of third-party libraries can help us to deal with this problem.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, in this post, I will present a solution to make some chip styles by custom in xml files. For making a \u003Cb\u003E\u003Ci\u003EChip \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E\u003C\/i\u003E\u003C\/b\u003E, please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring some dimension resources\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just take a glance at \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html#chips-specs\" target=\"_blank\"\u003Especs entry\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E of the chip guideline, you will noticed some required dimensions when making a chip layout. So, before starting, I provide some dimension resources first: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Edimens.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;resources\u0026gt;\u003Cbr \/\u003E    \u0026lt;!-- Default screen margins, per the Android Design guidelines. --\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"activity_horizontal_margin\"\u0026gt;16dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"activity_vertical_margin\"\u0026gt;16dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"chip_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"icon_height\"\u0026gt;36dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"remove_icon_dimen\"\u0026gt;24dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"remove_icon_margin\"\u0026gt;4dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"deletable_chip_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"contact_chip_left_padding\"\u0026gt;8dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E    \u0026lt;dimen name=\"contact_chip_right_padding\"\u0026gt;12dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;dimen name=\"padding_top\"\u0026gt;8dp\u0026lt;\/dimen\u0026gt;\u003Cbr \/\u003E\u0026lt;\/resources\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating a simple chip layout (only text label)\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There are nothing unfamiliar here at all, we just only make a background with round corner for \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E to make a chip. Firstly, defining a new \u003Ci\u003Edrawable resource file\u003C\/i\u003E with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eshape\u003C\/code\u003E as the root attribute: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\\drawable\\shape_chip_simple_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@color\/colorAccent\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;padding\u003Cbr \/\u003E        android:bottom=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:left=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:right=\"@dimen\/chip_padding\"\u003Cbr \/\u003E        android:top=\"@dimen\/chip_padding\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In your activity layout file, just define this drawable resource file as the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E background like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chiplayout.SimpleChipActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_simple_drawable\"\u003Cbr \/\u003E        android:text=\"Hello, I'm a simple Chip!\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this activity, we'll have this simple chip layout: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/rJdNZTC.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/rJdNZTC.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating a deletable chip\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; A deleteable chip contains a \u003Ci\u003E\u003Cb\u003Edelete icon\u003C\/b\u003E\u003C\/i\u003E on the right side. When click at this icon, the chip will be deleted. In order to design this layout, wrapping a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E and an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERelativeLayout\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_cross_chips.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:id=\"@+id\/chip_layout\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_drawable\"\u003Cbr \/\u003E        android:paddingBottom=\"@dimen\/padding_top\"\u003Cbr \/\u003E        android:paddingTop=\"@dimen\/padding_top\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:paddingLeft=\"@dimen\/chip_padding\"\u003Cbr \/\u003E            android:text=\"Example chip\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/delete\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/text\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:padding=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginRight=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:src=\"@drawable\/delete\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is drawable resource file to set as \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E background: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eshape_chip_drawable.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;shape xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;solid android:color=\"@color\/gray_light\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;corners android:radius=\"30dp\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/shape\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: You should use this design instead of defining a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextView\u003C\/code\u003E with a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdrawableRight\u003C\/code\u003E because you must handle delete icon click event in programmatically code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EDeleteChipActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.chiplayout;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.annotation.Nullable;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class DeleteChipActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(@Nullable Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_cross_chip);\u003Cbr \/\u003E\u003Cbr \/\u003E        View deleteIcon = findViewById(R.id.delete);\u003Cbr \/\u003E        final View chipLayout = findViewById(R.id.chip_layout);\u003Cbr \/\u003E        deleteIcon.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                \/\/gone chip layout\u003Cbr \/\u003E                \/\/if it a list or an adapter, please remove it!\u003Cbr \/\u003E                chipLayout.setVisibility(View.GONE);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this activity, we'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/9xfnsqz.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/9xfnsqz.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When click the delete icon:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/kbdTaPg.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/kbdTaPg.gif\" height=\"400\" width=\"223\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EChip with text and icon (image)\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; It may be called contact chip, which have an icon on the left side of label. Moreover, it may have a remove icon on the right. The icon is always a round \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E, wrapping them in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERelativeLayout\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_icon_chip.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_icon_chip\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.chiplayout.IconChipActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/shape_chip_icon_drawable\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;de.hdodenhof.circleimageview.CircleImageView\u003Cbr \/\u003E            android:id=\"@+id\/icon\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/icon_height\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/icon_height\"\u003Cbr \/\u003E            android:src=\"@drawable\/midu\"\u003Cbr \/\u003E            app:civ_border_color=\"#FF000000\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/icon\"\u003Cbr \/\u003E            android:paddingTop=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:paddingLeft=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:paddingBottom=\"@dimen\/padding_top\"\u003Cbr \/\u003E            android:text=\"Đặng Thị Mỹ Dung\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/delete\"\u003Cbr \/\u003E            android:layout_width=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_height=\"@dimen\/remove_icon_dimen\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@id\/text\"\u003Cbr \/\u003E            android:padding=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginLeft=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:layout_marginRight=\"@dimen\/remove_icon_margin\"\u003Cbr \/\u003E            android:contentDescription=\"@null\"\u003Cbr \/\u003E            android:src=\"@drawable\/delete\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; The round \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E can be created by a third-party library. In this example, I use \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/hdodenhof\/CircleImageView\" target=\"_blank\"\u003ECircleImageView\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, so please add this dependency to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Edependencies\u003C\/code\u003E scope in your application level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'de.hdodenhof:circleimageview:2.1.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; The hardest work is fixing sizes for each widget, I use dimension resources like noted above. Running this activity, we'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/vErVZAA.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/vErVZAA.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Chip component can be created easily with some configuration in the resources and layout files. From now, you can use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EHorizontalScrollView\u003C\/code\u003E to display a row of chips (like GooglePlay application) or use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStaggeredGridLayoutManager\u003C\/code\u003E to build a staggered grid of chips layout (named \u003Cb\u003E\u003Ci\u003Etag layout\u003C\/i\u003E\u003C\/b\u003E),...\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Up to \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip_12.html\" target=\"_blank\"\u003EPart 2\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, I will talk about putting chip into \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E (\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAutoCompleteTextView\u003C\/code\u003E with chips inside) like Gmail app does, this is popular design that you can see on many applications (coming soon!). \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/material.io\/guidelines\/components\/chips.html\" target=\"_blank\"\u003EChip component guideline\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E on Google Design\u003C\/li\u003E\u003Cli\u003ERound \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E library page on \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/hdodenhof\/CircleImageView\" target=\"_blank\"\u003EGithub\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003ERead more\u003C\/b\u003E: \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/07\/android-tip-staggered-grid-view-by.html\" target=\"_blank\"\u003Emy post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E about using\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EStaggeredGridLayoutManager\u003C\/code\u003E to build a staggered grid layout.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/quGHrQ\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/332271109960358139\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/332271109960358139"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/332271109960358139"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/android-material-design-component-chip.html","title":"Android Material Design component: Chip - Part 1: Creating chips layout"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5725054422995325232"},"published":{"$t":"2017-01-03T16:49:00.000+07:00"},"updated":{"$t":"2017-01-03T16:49:17.448+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"cardview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"listview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"recyclerview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"scroll event"}],"title":{"type":"text","$t":"Populating multiple list views on a single Activity by using RecyclerView in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; With \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E, building list view is now more simple, especially with new \"scrolling mechanism\", we now can put multiple \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E into a single screen (\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragment\u003C\/code\u003E) without customizing in code.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In this tip, I will present this solution through combining \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ENestedScrollView\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E in the activity layout file. Of course, if you use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E, please read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2015\/05\/android-tip-combining-multiple.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to find out the way to \u003Cb\u003E\u003Ci\u003Eexpand it's height\u003C\/i\u003E\u003C\/b\u003E to \u003Cb\u003E\u003Ci\u003Emaximum\u003C\/i\u003E\u003C\/b\u003E to display all list items.\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfiguration in the layout (XML) file\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Make a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ENestedScrollView\u003C\/code\u003E work as the root view and put 2 \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E objects as it's children views to build this layout: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.v4.widget.NestedScrollView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.multiplerecyclerview.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;LinearLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:orientation=\"vertical\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:gravity=\"center_vertical\"\u003Cbr \/\u003E            android:paddingBottom=\"10dp\"\u003Cbr \/\u003E            android:text=\"Asia\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E            android:id=\"@+id\/recycler\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E            android:gravity=\"center_vertical\"\u003Cbr \/\u003E            android:paddingBottom=\"10dp\"\u003Cbr \/\u003E            android:text=\"Europe\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E            android:id=\"@+id\/recycler_1\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v4.widget.NestedScrollView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is layout for each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E item: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_recycler_view.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.v7.widget.CardView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:layout_marginBottom=\"8dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/image\"\u003Cbr \/\u003E            android:layout_width=\"80dp\"\u003Cbr \/\u003E            android:layout_height=\"80dp\"\u003Cbr \/\u003E            android:src=\"@drawable\/world\"\u003Cbr \/\u003E            android:contentDescription=\"@null\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:textColor=\"@color\/colorPrimary\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:textStyle=\"bold\"\u003Cbr \/\u003E            android:layout_centerVertical=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@+id\/image\"\u003Cbr \/\u003E            android:layout_toEndOf=\"@+id\/image\"\u003Cbr \/\u003E            android:padding=\"10dp\"\u003Cbr \/\u003E            android:text=\"@string\/app_name\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v7.widget.CardView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: In order to use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ECardView\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ENestedScrollView\u003C\/code\u003E from Design Support Library, you must add these dependencies to your app level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'com.android.support:design:25.1.0'\u003Cbr \/\u003Ecompile 'com.android.support:recyclerview-v7:25.1.0'\u003Cbr \/\u003Ecompile 'com.android.support:cardview-v7:25.1.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ESet LayoutManager and data in programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Back to your main activity programmatically code, there is no special thing here, please set \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELayoutManager\u003C\/code\u003E for each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E (here is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELinearLayoutManager\u003C\/code\u003E) and initializing data\/\"adapter\" for them: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.multiplerecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private String[] asiaCountries = {\"Vietnam\", \"China\", \"Japan\", \"Korea\", \"India\", \"Singapore\", \"Thailand\", \"Malaysia\"};\u003Cbr \/\u003E    private String[] europeCountries = {\"France\", \"Germany\", \"Sweden\", \"Denmark\", \"England\", \"Spain\", \"Portugal\", \"Norway\"};\u003Cbr \/\u003E\u003Cbr \/\u003E    private RecyclerView firstRecyclerView;\u003Cbr \/\u003E    private RecyclerView secondRecyclerView;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        firstRecyclerView = (RecyclerView)findViewById(R.id.recycler);\u003Cbr \/\u003E        secondRecyclerView = (RecyclerView)findViewById(R.id.recycler_1);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/create and set layout manager for each RecyclerView\u003Cbr \/\u003E        RecyclerView.LayoutManager firstLayoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E        RecyclerView.LayoutManager secondLayoutManager = new LinearLayoutManager(this);\u003Cbr \/\u003E\u003Cbr \/\u003E        firstRecyclerView.setLayoutManager(firstLayoutManager);\u003Cbr \/\u003E        secondRecyclerView.setLayoutManager(secondLayoutManager);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Initializing and set adapter for each RecyclerView\u003Cbr \/\u003E        RecyclerViewAdapter firstAdapter = new RecyclerViewAdapter(this, asiaCountries);\u003Cbr \/\u003E        RecyclerViewAdapter secondAdapter = new RecyclerViewAdapter(this, europeCountries);\u003Cbr \/\u003E\u003Cbr \/\u003E        firstRecyclerView.setAdapter(firstAdapter);\u003Cbr \/\u003E        secondRecyclerView.setAdapter(secondAdapter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is the sample \"adapter\" class for these \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ERecyclerViewAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.multiplerecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class RecyclerViewAdapter extends RecyclerView.Adapter\u0026lt;RecyclerViewAdapter.ViewHolder\u0026gt; {\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E    private String[] strings;\u003Cbr \/\u003E\u003Cbr \/\u003E    public RecyclerViewAdapter(Activity activity, String[] strings) {\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E        this.strings = strings;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\u003Cbr \/\u003E        LayoutInflater inflater = activity.getLayoutInflater();\u003Cbr \/\u003E        View view = inflater.inflate(R.layout.item_recycler_view, parent, false);\u003Cbr \/\u003E\u003Cbr \/\u003E        return new ViewHolder(view);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(ViewHolder viewHolder, final int position) {\u003Cbr \/\u003E        viewHolder.textView.setText(strings[position]);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemCount() {\u003Cbr \/\u003E        return strings.length;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    class ViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        private TextView textView;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            textView = (TextView) view.findViewById(R.id.text);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning the project\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; This is output of this sample project, you can see that I've build 2 list views into a single screen successful: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/jwTEh5D.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/jwTEh5D.gif\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFinal thought\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, with simple configuration in the activity layout file, you now can put make a screen which contains multiple list views by using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E. Further, please check other posts about this widget on my blog: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003ECombining \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/11\/combining-grid-view-and-list-view-in.html\" target=\"_blank\"\u003Elist view and grid view\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E in a single screen (by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E)\u003C\/li\u003E\u003Cli\u003EBuild \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/06\/building-list-and-grid-layout-with.html\" target=\"_blank\"\u003Elist and grid layout\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E by\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E (explicit explanation)\u003C\/li\u003E\u003Cli\u003EAll posts about\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E: visit this \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/search\/label\/recyclerview?max-results=6\" target=\"_blank\"\u003ETAG link\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qua8j2\" target=\"_blank\"\u003EDOWNLOAD SAMPLE CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5725054422995325232\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/populating-multiple-list-views-on.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5725054422995325232"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5725054422995325232"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2017\/01\/populating-multiple-list-views-on.html","title":"Populating multiple list views on a single Activity by using RecyclerView in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-8896223448686312298"},"published":{"$t":"2016-12-27T13:57:00.001+07:00"},"updated":{"$t":"2016-12-27T14:05:21.241+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"color picker"},{"scheme":"http://www.blogger.com/atom/ns#","term":"dialog"},{"scheme":"http://www.blogger.com/atom/ns#","term":"library"}],"title":{"type":"text","$t":"Creating Color Picker dialog in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Color picker is a not popular topic in Android app development but not too difficult to implement. By showing a dialog which has a palette, providing some more options like translucent and transparent percentage,...we can allow user to choose a suitable color which they want.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/QsYkd0L.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/QsYkd0L.jpg\" height=\"280\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; The fact that, by searching on the Internet, there are a lot of third-party libraries that able to help us to resolve this problem so we shouldn't custom a \u003Cb\u003E\u003Ci\u003Epalette dialog\u003C\/i\u003E\u003C\/b\u003E ourselves, please use one of them. Let's be a lazy developer!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In this post, I would like to present a library named \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/yukuku\/ambilwarna\" target=\"_blank\"\u003EAmbilWarna\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E (mean \"\u003Ci\u003Epick a color\u003C\/i\u003E\" in Indonesian). In my opinion, it's a quite well library, easy to choose a color with it's translucent\u0026nbsp;(alpha) value which displayed in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EDialog\u003C\/code\u003E. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding library dependency\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After starting a new Android Studio project, the simplest way to use this library is adding it's dependency to your application level build.gradle (inside \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Edependencies\u003C\/code\u003E scope: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile 'com.github.yukuku:ambilwarna:2.0.1'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Syncing gradle and start coding! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating main activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Let make a simple layout (XML) file for our main activity. It contains 2 \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EButtons\u003C\/code\u003E to show a color picker dialog when clicked (with 2 options: alpha and no-alpha value) and a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELinearLayout\u003C\/code\u003E to set the chosen color as it's background when completed: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.colorpicker.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_1\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:text=\"Open dialog\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_2\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/btn_1\"\u003Cbr \/\u003E        android:text=\"Open dialog (with alpha)\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;LinearLayout\u003Cbr \/\u003E        android:id=\"@+id\/color_background\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:layout_below=\"@id\/btn_2\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:orientation=\"vertical\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfiguration in programmatically code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In this library, the color picker dialog is created by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAmbilWarnaDialog\u003C\/code\u003E. Create a dialog by calling the following constructor, and then show it: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EAmbilWarnaDialog(Context context, int color, OnAmbilWarnaListener listener)\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Moreover, alpha is also supported by passing the 3rd parameter \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsupportsAlpha\u003C\/code\u003E in another constructor: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EAmbilWarnaDialog(Context context, int color, boolean supportsAlpha, OnAmbilWarnaListener listener)\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; This code is used for showing a color picker dialog: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E\/\/ initialColor is the initially-selected color to be shown in the rectangle on the left of the arrow.\u003Cbr \/\u003E\/\/ for example, 0xff000000 is black, 0xff0000ff is blue. Please be aware of the initial 0xff which is the alpha.\u003Cbr \/\u003EAmbilWarnaDialog dialog = new AmbilWarnaDialog(this, initialColor, supportsAlpha, new OnAmbilWarnaListener() {\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onOk(AmbilWarnaDialog dialog, int color) {\u003Cbr \/\u003E        \/\/ color is the color selected by the user\u003Cbr \/\u003E        \/\/ you can use this integer value for your own aim\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onCancel(AmbilWarnaDialog dialog) {\u003Cbr \/\u003E        \/\/ cancel was selected by the user\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003Edialog.show();\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In this example, I set background for the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ELinearLayout\u003C\/code\u003E by selected color. This is full code for the main activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.colorpicker;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v4.content.ContextCompat;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.Button;\u003Cbr \/\u003Eimport android.widget.LinearLayout;\u003Cbr \/\u003Eimport android.widget.Toast;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport yuku.ambilwarna.AmbilWarnaDialog;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E    private int currentColor;\u003Cbr \/\u003E    private LinearLayout colorLayout;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        currentColor = ContextCompat.getColor(this, R.color.colorAccent);\u003Cbr \/\u003E\u003Cbr \/\u003E        Button btnPick = (Button) findViewById(R.id.btn_1);\u003Cbr \/\u003E        colorLayout = (LinearLayout) findViewById(R.id.color_background);\u003Cbr \/\u003E        Button btnPickWithAlpha = (Button) findViewById(R.id.btn_2);\u003Cbr \/\u003E        btnPick.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                openDialog(false);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E        btnPickWithAlpha.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                openDialog(true);\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void openDialog(boolean supportsAlpha) {\u003Cbr \/\u003E        AmbilWarnaDialog dialog = new AmbilWarnaDialog(this, currentColor, supportsAlpha, new AmbilWarnaDialog.OnAmbilWarnaListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onOk(AmbilWarnaDialog dialog, int color) {\u003Cbr \/\u003E                currentColor = color;\u003Cbr \/\u003E                colorLayout.setBackgroundColor(color);\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onCancel(AmbilWarnaDialog dialog) {\u003Cbr \/\u003E                Toast.makeText(getApplicationContext(), \"Action canceled!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E        dialog.show();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this application, we'll have this result: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/YQNJ1UI.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/YQNJ1UI.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Click at \"\u003Cb\u003EOpen dialog\u003C\/b\u003E\", the \u003Cb\u003E\u003Ci\u003Enormal dialog\u003C\/i\u003E\u003C\/b\u003E with choose color without alpha value will be displayed:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/UOUcVAQ.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/UOUcVAQ.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;After choose a color:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Tcqo8jq.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Tcqo8jq.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; If you click at \"\u003Cb\u003EOpen dialog (with alpha)\u003C\/b\u003E\", there is a alpha column at the right side of the dialog:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/gkXrTEt.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/gkXrTEt.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And this is result after choose a color (the color will have a translucency value):\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/8BTL6bO.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/8BTL6bO.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; By using a third-party library, we now can create a color picker dialog easily with a few codes. Of course, you can visit \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/android-arsenal.com\/tag\/18\" target=\"_blank\"\u003EColor Picker category\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E in \u003Ci\u003EAndroid Arsenal\u003C\/i\u003E and try another one,\u0026nbsp;especially Material design color libraries. Moreover, read \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/stackoverflow.com\/questions\/16363235\/android-color-picker-to-be-included-in-the-activity\" target=\"_blank\"\u003Ethis discussion\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E on \u003Ci\u003EStackOverflow \u003C\/i\u003Eto find out the way to custom this dialog style. Thanks for reading!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003EReferences\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/github.com\/yukuku\/ambilwarna\" target=\"_blank\"\u003EOfficial library page\u003C\/a\u003E\u003C\/b\u003E on \u003Cb\u003E\u003Ci\u003EGithub\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/en.wikipedia.org\/wiki\/RGBA_color_space\" target=\"_blank\"\u003ERGBA concept\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qtYxCQ\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/8896223448686312298\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/creating-color-picker-dialog-in-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8896223448686312298"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8896223448686312298"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/creating-color-picker-dialog-in-android.html","title":"Creating Color Picker dialog in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-5987550336653741424"},"published":{"$t":"2016-12-21T14:09:00.000+07:00"},"updated":{"$t":"2016-12-24T09:04:22.964+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"bubble layout"},{"scheme":"http://www.blogger.com/atom/ns#","term":"chat application"},{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Firebase"}],"title":{"type":"text","$t":"Simple chat application using Firebase Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Through \"\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/android-getting-started-with-firebase.html\" target=\"_blank\"\u003EGetting started with Firebase Android\u003C\/a\u003E\" post, you've got an overview and account authentication mechanism of Firebase, a mobile-backend-as-a-service which developed by Google now. With it,\u0026nbsp;we do not need to care about building a backend system.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/AwQthKW.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/AwQthKW.png\" height=\"100\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Today, in this tutorial, I will present Firebase\u0026nbsp;\u003Cb\u003E\u003Ci\u003Ereal-time database\u003C\/i\u003E\u003C\/b\u003E feature and show you how to leverage Firebase UI to create a group chat app you can share with your friends. It's going to be a very simple app with just one chat room, which is open to all users. This app will depend on Firebase authentication to manage user registration and sign in. It will also use Firebase's real-time database to store the group chat messages.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/JMrLtqMe0zA\/default.jpg?sqp=CLTa48IF\u0026amp;rs=AOn4CLB_u8QzjYgt07DVgYkOC9fzsqyQEA\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/JMrLtqMe0zA?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAndroid Studio project configuration\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firebase now has integrated on Android Studio, so after starting a new project, to configure the project to use the Firebase platform, open the Firebase Assistant window by clicking on \u003Cb\u003ETools -\u0026gt; Firebase\u003C\/b\u003E, you will see this panel on right side: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/reA479S.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/reA479S.png\" height=\"409\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Click on \"\u003Cb\u003ELog an Analytics event\u003C\/b\u003E\" and after that, click at \"\u003Cb\u003EConnect to Firebase\u003C\/b\u003E\" button, your default browser will be launched and now, please login by your Google account and you will be redirect to Firebase console page:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/MLDy8GW.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/MLDy8GW.png\" height=\"352\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Make sure that you select \"\u003Cb\u003ECreate new project\u003C\/b\u003E\" in this screen (because your project is starting to develop). Once the connection is established, back to Android Studio, you will see this result:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/J9uAioB.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/J9uAioB.png\" height=\"400\" width=\"277\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; You've connected to Firebase and now, click at \"\u003Cb\u003EAdd Analytics to your app\u003C\/b\u003E\" button (at entry (2)), the Android Studio project is not only integrated with Firebase Analytics, it is also ready to use all other Firebase services.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Adding Firebase UI dependency to your \u003Cb\u003E\u003Ci\u003Eapp\/build.gradle\u003C\/i\u003E\u003C\/b\u003E\u0026nbsp;(required) and in this project, I use some widgets of Android Support Library, so I add it's dependency, too: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile 'com.android.support:design:23.4.0'\u003Cbr \/\u003Ecompile 'com.firebaseui:firebase-ui:0.6.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ELayouts definition\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firstly, we need create a layout for our main activity. It's simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.design.widget.FloatingActionButton\u003Cbr \/\u003E        android:id=\"@+id\/fab\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        android:layout_alignParentRight=\"true\"\u003Cbr \/\u003E        android:src=\"@drawable\/ic_send_black_24dp\"\u003Cbr \/\u003E        android:tint=\"@android:color\/white\"\u003Cbr \/\u003E        app:fabSize=\"mini\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.design.widget.TextInputLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        android:layout_toLeftOf=\"@id\/fab\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;EditText\u003Cbr \/\u003E            android:id=\"@+id\/input\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:hint=\"Input\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/android.support.design.widget.TextInputLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;ListView\u003Cbr \/\u003E        android:id=\"@+id\/list\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\"\u003Cbr \/\u003E        android:layout_above=\"@id\/fab\"\u003Cbr \/\u003E        android:layout_alignParentTop=\"true\"\u003Cbr \/\u003E        android:layout_marginBottom=\"16dp\"\u003Cbr \/\u003E        android:divider=\"@android:color\/transparent\"\u003Cbr \/\u003E        android:dividerHeight=\"16dp\"\u003Cbr \/\u003E        android:stackFromBottom=\"true\"\u003Cbr \/\u003E        android:transcriptMode=\"alwaysScroll\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, this layout included:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EA \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E which displays all chat messages.\u003C\/li\u003E\u003Cli\u003EA \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextInputLayout\u003C\/code\u003E which allows user type message.\u003C\/li\u003E\u003Cli\u003EA \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFloatingActionButton\u003C\/code\u003E to push message to Firebase database and display to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E then.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; Now, we must create layout for each chat message, I will 2 layouts corresponding to in\/out messages. Each layout has 3 \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETextViews\u003C\/code\u003E which display message time, message user and message content: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_in_message.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"wrap_content\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:background=\"@drawable\/bubble_in\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/message_user\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentTop=\"true\"\u003Cbr \/\u003E        android:text=\"fdsfsdf\"\u003Cbr \/\u003E        android:textStyle=\"normal|bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/message_text\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@+id\/message_user\"\u003Cbr \/\u003E        android:layout_marginTop=\"5dp\"\u003Cbr \/\u003E        android:text=\"dsfsdfds\"\u003Cbr \/\u003E        android:textAppearance=\"@style\/TextAppearance.AppCompat.Body1\"\u003Cbr \/\u003E        android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E        android:textSize=\"18sp\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/message_time\"\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/message_text\"\u003Cbr \/\u003E        android:text=\"sdfsdfsd\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_out_message.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"wrap_content\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"wrap_content\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentRight=\"true\"\u003Cbr \/\u003E        android:background=\"@drawable\/bubble_out\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/message_user\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_alignParentTop=\"true\"\u003Cbr \/\u003E            android:text=\"fdsfsdf\"\u003Cbr \/\u003E            android:textStyle=\"normal|bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/message_text\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_below=\"@+id\/message_user\"\u003Cbr \/\u003E            android:textColor=\"@android:color\/white\"\u003Cbr \/\u003E            android:layout_marginTop=\"5dp\"\u003Cbr \/\u003E            android:text=\"dsfsdfds\"\u003Cbr \/\u003E            android:textAppearance=\"@style\/TextAppearance.AppCompat.Body1\"\u003Cbr \/\u003E            android:textSize=\"18sp\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/message_time\"\u003Cbr \/\u003E            android:layout_width=\"wrap_content\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_below=\"@id\/message_text\"\u003Cbr \/\u003E            android:text=\"sdfsdfsd\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ebubble_out\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ebubble_in\u003C\/code\u003E are 9-patch images to create a bubble chat layout. Please read \"\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/03\/design-chat-bubble-ui-in-android.html\" target=\"_blank\"\u003EDesigning bubble chat UI\u003C\/a\u003E\" post\u0026nbsp;to learn how to create it.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We'll have this output result later:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/W3huBoR.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/W3huBoR.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EFirebase Authenticating configuration\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp;In this project, only registered user can post messages. In order to allows user signup and login, please got to \u003Cb\u003E\u003Ca href=\"https:\/\/firebase.google.com\/console\/\" target=\"_blank\"\u003EFirebase console page\u003C\/a\u003E\u003C\/b\u003E, choose your project and select \"\u003Cb\u003EAuthentication\u003C\/b\u003E\" entry on the left panel. In \"\u003Cb\u003ESign-In Method\u003C\/b\u003E\" tab, enabling \"\u003Cb\u003EEmail\/Password\u003C\/b\u003E\"as a sign-in provider:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/OKh72AS.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/OKh72AS.png\" height=\"308\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Feel free to enable OAuth 2.0 sign-in providers as well. Moreover, FirebaseUI v0.6.0 seamlessly supports only Google Sign-In, Facebook Login, Twitter Auth,...:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/SFEU791.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/SFEU791.png\" height=\"304\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle user sign in and sign up in code\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With FirebaseUI, creating those screens takes a lot less code than you might imagine. Firstly, you must check whether current \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirebase\u003C\/code\u003E user is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Enull\u003C\/code\u003E, you must request to opens Firebase sign-in activity. And if the current user is not \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Enull\u003C\/code\u003E, show all old messages of this chat room to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E. Add this code to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E        \/\/find views by Ids\u003Cbr \/\u003E        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);\u003Cbr \/\u003E        final EditText input = (EditText) findViewById(R.id.input);\u003Cbr \/\u003E        listView = (ListView) findViewById(R.id.list);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (FirebaseAuth.getInstance().getCurrentUser() == null) {\u003Cbr \/\u003E            \/\/ Start sign in\/sign up activity\u003Cbr \/\u003E            startActivityForResult(AuthUI.getInstance()\u003Cbr \/\u003E                    .createSignInIntentBuilder()\u003Cbr \/\u003E                    .build(), SIGN_IN_REQUEST_CODE);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            \/\/ User is already signed in, show list of messages\u003Cbr \/\u003E            showAllOldMessages();\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; The \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESIGN_IN_REQUEST_CODE\u003C\/code\u003E is an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eint\u003C\/code\u003E constant.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, you must override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonActivityResult()\u003C\/code\u003E to get sign-in or sign-up result. If the result's code is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERESULT_OK\u003C\/code\u003E, it means the user has signed in successfully. If so, you must display all old messages, otherwise, call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Efinish()\u003C\/code\u003E to close the app: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\u003Cbr \/\u003E        super.onActivityResult(requestCode, resultCode, data);\u003Cbr \/\u003E\u003Cbr \/\u003E        if (requestCode == SIGN_IN_REQUEST_CODE) {\u003Cbr \/\u003E            if (resultCode == RESULT_OK) {\u003Cbr \/\u003E                Toast.makeText(this, \"Signed in successful!\", Toast.LENGTH_LONG).show();\u003Cbr \/\u003E                showAllOldMessages();\u003Cbr \/\u003E            } else {\u003Cbr \/\u003E                Toast.makeText(this, \"Sign in failed, please try again later\", Toast.LENGTH_LONG).show();\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle Sign-out action\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsignOut()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAuthUI\u003C\/code\u003E class, you can logout user. Add this code to your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E to create an option menu and handle user click \"Log out\" button: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public boolean onCreateOptionsMenu(Menu menu) {\u003Cbr \/\u003E        getMenuInflater().inflate(R.menu.main, menu);\u003Cbr \/\u003E        return true;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public boolean onOptionsItemSelected(MenuItem item) {\u003Cbr \/\u003E        if (item.getItemId() == R.id.menu_sign_out) {\u003Cbr \/\u003E            AuthUI.getInstance().signOut(this)\u003Cbr \/\u003E                    .addOnCompleteListener(new OnCompleteListener\u003Cvoid\u003E() {\u003Cbr \/\u003E                        @Override\u003Cbr \/\u003E                        public void onComplete(@NonNull Task\u003Cvoid\u003E task) {\u003Cbr \/\u003E                            Toast.makeText(MainActivity.this, \"You have logged out!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                            finish();\u003Cbr \/\u003E                        }\u003Cbr \/\u003E                    });\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return true;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/void\u003E\u003C\/void\u003E\u003C\/code\u003E\u003C\/pre\u003EAnd this is the menu (xml) file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eres\/menu\/main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;menu xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/menu_sign_out\"\u003Cbr \/\u003E        app:showAsAction=\"always\"\u003Cbr \/\u003E        android:icon=\"@drawable\/logout\"\u003Cbr \/\u003E        android:title=\"Sign out\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/menu\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating messages adapter\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to store the chat messages in the Firebase real-time database, you must create a model for them. It will be simple like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EChatMessage.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.firebasechatapplication;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.Date;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ChatMessage {\u003Cbr \/\u003E    private String messageText;\u003Cbr \/\u003E    private String messageUser;\u003Cbr \/\u003E    private String messageUserId;\u003Cbr \/\u003E    private long messageTime;\u003Cbr \/\u003E\u003Cbr \/\u003E    public ChatMessage(String messageText, String messageUser, String messageUserId) {\u003Cbr \/\u003E        this.messageText = messageText;\u003Cbr \/\u003E        this.messageUser = messageUser;\u003Cbr \/\u003E        messageTime = new Date().getTime();\u003Cbr \/\u003E        this.messageUserId = messageUserId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public ChatMessage(){\u003Cbr \/\u003E\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getMessageUserId() {\u003Cbr \/\u003E        return messageUserId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setMessageUserId(String messageUserId) {\u003Cbr \/\u003E        this.messageUserId = messageUserId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getMessageText() {\u003Cbr \/\u003E        return messageText;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setMessageText(String messageText) {\u003Cbr \/\u003E        this.messageText = messageText;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getMessageUser() {\u003Cbr \/\u003E        return messageUser;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setMessageUser(String messageUser) {\u003Cbr \/\u003E        this.messageUser = messageUser;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public long getMessageTime() {\u003Cbr \/\u003E        return messageTime;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public void setMessageTime(long messageTime) {\u003Cbr \/\u003E        this.messageTime = messageTime;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; FirebaseUI has a very handy class called \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirebaseListAdapter\u003C\/code\u003E, so we need write a subclass of it to make a custom \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E adapter. The most important method that you must override is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EpopulateView()\u003C\/code\u003E which use for used to populate the views of each list item: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E\u003Cbr \/\u003Epackage info.devexchanges.firebasechatapplication;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.text.format.DateFormat;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport com.firebase.ui.database.FirebaseListAdapter;\u003Cbr \/\u003Eimport com.google.firebase.database.DatabaseReference;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MessageAdapter extends FirebaseListAdapter\u0026lt;ChatMessage\u0026gt; {\u003Cbr \/\u003E\u003Cbr \/\u003E    private MainActivity activity;\u003Cbr \/\u003E\u003Cbr \/\u003E    public MessageAdapter(MainActivity activity, Class\u0026lt;ChatMessage\u0026gt; modelClass, int modelLayout, DatabaseReference ref) {\u003Cbr \/\u003E        super(activity, modelClass, modelLayout, ref);\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void populateView(View v, ChatMessage model, int position) {\u003Cbr \/\u003E        TextView messageText = (TextView) v.findViewById(R.id.message_text);\u003Cbr \/\u003E        TextView messageUser = (TextView) v.findViewById(R.id.message_user);\u003Cbr \/\u003E        TextView messageTime = (TextView) v.findViewById(R.id.message_time);\u003Cbr \/\u003E\u003Cbr \/\u003E        messageText.setText(model.getMessageText());\u003Cbr \/\u003E        messageUser.setText(model.getMessageUser());\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/ Format the date before showing it\u003Cbr \/\u003E        messageTime.setText(DateFormat.format(\"dd-MM-yyyy (HH:mm:ss)\", model.getMessageTime()));\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; The most important part of building this adapter is creating 2 layouts corresponding to 2 types of messages (in and out). So you must override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetView()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetViewType()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetViewTypeCount()\u003C\/code\u003E to complete this adapter class: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public View getView(int position, View view, ViewGroup viewGroup) {\u003Cbr \/\u003E        ChatMessage chatMessage = getItem(position);\u003Cbr \/\u003E        if (chatMessage.getMessageUserId().equals(activity.getLoggedInUserName()))\u003Cbr \/\u003E            view = activity.getLayoutInflater().inflate(R.layout.item_out_message, viewGroup, false);\u003Cbr \/\u003E        else\u003Cbr \/\u003E            view = activity.getLayoutInflater().inflate(R.layout.item_in_message, viewGroup, false);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/generating view\u003Cbr \/\u003E        populateView(view, chatMessage, position);\u003Cbr \/\u003E\u003Cbr \/\u003E        return view;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getViewTypeCount() {\u003Cbr \/\u003E        \/\/ return the total number of view types. this value should never change\u003Cbr \/\u003E        \/\/ at runtime\u003Cbr \/\u003E        return 2;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemViewType(int position) {\u003Cbr \/\u003E        \/\/ return a value between 0 and (getViewTypeCount - 1)\u003Cbr \/\u003E        return position % 2;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Back to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E code, rewrite \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EshowAllOldMessages()\u003C\/code\u003E method to set \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E adapter and load all messages from server: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate String loggedInUserName = \"\";\u003Cbr \/\u003Eprivate void showAllOldMessages() {\u003Cbr \/\u003E        loggedInUserName = FirebaseAuth.getInstance().getCurrentUser().getUid();\u003Cbr \/\u003E        Log.d(\"Main\", \"user id: \" + loggedInUserName);\u003Cbr \/\u003E\u003Cbr \/\u003E        adapter = new MessageAdapter(this, ChatMessage.class, R.layout.item_in_message,\u003Cbr \/\u003E                FirebaseDatabase.getInstance().getReference());\u003Cbr \/\u003E        listView.setAdapter(adapter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003Epublic String getLoggedInUserName() {\u003Cbr \/\u003E        return loggedInUserName;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EPost a Chat Message\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When click on the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFloatingActionButton\u003C\/code\u003E, the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E content will be posted to Firebase server. Add this code in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Efab.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                if (input.getText().toString().trim().equals(\"\")) {\u003Cbr \/\u003E                    Toast.makeText(MainActivity.this, \"Please enter some texts!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    FirebaseDatabase.getInstance()\u003Cbr \/\u003E                            .getReference()\u003Cbr \/\u003E                            .push()\u003Cbr \/\u003E                            .setValue(new ChatMessage(input.getText().toString(),\u003Cbr \/\u003E                                    FirebaseAuth.getInstance().getCurrentUser().getDisplayName(),\u003Cbr \/\u003E                                    FirebaseAuth.getInstance().getCurrentUser().getUid())\u003Cbr \/\u003E                            );\u003Cbr \/\u003E                    input.setText(\"\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Data in the Firebase real-time database is always stored as key-value pairs. However, if you observe the code above, you'll see that we're calling \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetValue()\u003C\/code\u003E without specifying any key. That's allowed only because the call to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetValue()\u003C\/code\u003E method is preceded by a call to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Epush()\u003C\/code\u003E method, which automatically generates a new key. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; When running the app, when user has not logged in yet, the \u003Ci\u003Esignup screen\u003C\/i\u003E of Firebase was launched, you will put your email here:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ue2tmci.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ue2tmci.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; If your mail is not available in Firebase database, \"Create an account\" page will displayed, you must enter your name and password here:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/TRb10XL.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/TRb10XL.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;Otherwise, if your entered mail is available on the database, you only need input your password at \"\u003Cb\u003ESign in\u003C\/b\u003E\" screen:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/ZLFNRvH.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/ZLFNRvH.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After Firebase complete authenticating your information, the app \"\u003Ci\u003E\u003Cb\u003Emain screen\u003C\/b\u003E\u003C\/i\u003E\" will be displayed - you are entered the \"\u003Cb\u003E\u003Ci\u003Echat room\u003C\/i\u003E\u003C\/b\u003E\" and all old messages will be loaded:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/d013XUe.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/d013XUe.png\" height=\"400\" width=\"250\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; If you go to your \u003Cb\u003E\u003Ci\u003Eapp page\u003C\/i\u003E\u003C\/b\u003E on \u003Ca href=\"https:\/\/console.firebase.google.com\/\" target=\"_blank\"\u003EFirebase console\u003C\/a\u003E, choose \"\u003Cb\u003EDatabase\u003C\/b\u003E\" entry, you'll see this result:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/RTxzhwy.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/RTxzhwy.png\" height=\"306\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With Firebase real-time database, we can build a simple chat application without any single line of server-side code. Through this post, I hope you understanding the real-time database feature of Firebase. Further, please read these posts to learn more about Firebase:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EPush notification with \u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/09\/android-push-notification-using.html\" target=\"_blank\"\u003EFirebase Cloud Messaging\u003C\/a\u003E\u003C\/i\u003E\u003C\/li\u003E\u003Cli\u003EEmail\/Password \u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/android-getting-started-with-firebase.html\" target=\"_blank\"\u003Eauthentication in Firebase\u003C\/a\u003E\u003C\/i\u003E\u003C\/li\u003E\u003Cli\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/firebase.google.com\/docs\/\" target=\"_blank\"\u003EOfficial document\u003C\/a\u003E\u003C\/i\u003E in Firebase Homepage.\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qr5osS\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/5987550336653741424\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/simple-chat-application-using-firebase.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5987550336653741424"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/5987550336653741424"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/simple-chat-application-using-firebase.html","title":"Simple chat application using Firebase Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/JMrLtqMe0zA\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-1707587455960389992"},"published":{"$t":"2016-12-18T17:17:00.001+07:00"},"updated":{"$t":"2016-12-18T17:27:17.977+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"device information"},{"scheme":"http://www.blogger.com/atom/ns#","term":"network info"}],"title":{"type":"text","$t":"Android TIP: Get Cellular Network information"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Almost all Android devices support cellular network. At some point, we want to know whether the device is connected to network so that we can do some network processes. Also we want to know if user make \u003Cb\u003EWiFi\u003C\/b\u003E or \u003Cb\u003E3G\/4G\u003C\/b\u003E disabled on purpose. The fact that many applications have warned user when their devices are using cellular network because of it's fee and speed.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; In this tip, I would like to present a solution to check cellular network info (type and speed of the connection) which available on your device through using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ETelephonyManager\u003C\/code\u003E class. \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/TEAalfc.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/TEAalfc.png\" height=\"233\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECheck if device has a connection\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firstly, you should check if your device has a connectivity or not. By using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetActiveNetworkInfo()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ENetworkInfo\u003C\/code\u003E class with an initialized \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConnectivityManager\u003C\/code\u003E instance, you can do this work easily: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic static String isConected(Context context) {\u003Cbr \/\u003E        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\u003Cbr \/\u003E        NetworkInfo info = cm.getActiveNetworkInfo();\u003Cbr \/\u003E\u003Cbr \/\u003E        if ((info != null \u0026amp;\u0026amp; info.isConnected())) {\u003Cbr \/\u003E            return checkingNetworkSpeed(info.getType(), info.getSubtype());\u003Cbr \/\u003E        } else\u003Cbr \/\u003E            return \"No NetWork Access\";\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EChecking the network type\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Also by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ENetworkInfo\u003C\/code\u003E class, we can get the network type by 2 methods: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetType()\u003C\/code\u003E: return \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConnectivityManager.TYPE_WIFI\u003C\/code\u003E if your device is connection via Wifi and return \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EConnectivityManager.TYPE_MOBILE\u003C\/code\u003E if your device is using cellular network.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetSubtype()\u003C\/code\u003E: return a network-type-specific integer describing the sub-type of the network.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; For all mobile network types and their speed, please look at this code: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic static String checkingNetworkSpeed(int type, int subType) {\u003Cbr \/\u003E        if (type == ConnectivityManager.TYPE_WIFI) {\u003Cbr \/\u003E            return \"CONNECTED VIA WIFI\";\u003Cbr \/\u003E        } else if (type == ConnectivityManager.TYPE_MOBILE) {\u003Cbr \/\u003E            switch (subType) {\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_1xRTT:\u003Cbr \/\u003E                    return \"NETWORK TYPE 1xRTT - Speed: ~50 - 100 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_CDMA:\u003Cbr \/\u003E                    return \"NETWORK TYPE CDMA (3G) Speed: ~14-64 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_EDGE:\u003Cbr \/\u003E                    return \"NETWORK TYPE EDGE (2.75G) Speed: 100-120 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_EVDO_0:\u003Cbr \/\u003E                    return \"NETWORK TYPE EVDO_0 Speed: ~400-1000 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_EVDO_A:\u003Cbr \/\u003E                    return \"NETWORK TYPE EVDO_A Speed: ~600-1400 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_GPRS:\u003Cbr \/\u003E                    return \"NETWORK TYPE GPRS (2.5G) Speed: ~100 Kbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_HSDPA:\u003Cbr \/\u003E                    return \"NETWORK TYPE HSDPA (4G) Speed: 2-14 Mbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_HSPA:\u003Cbr \/\u003E                    return \"NETWORK TYPE HSPA (4G) Speed: 0.7-1.7 Mbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_HSUPA:\u003Cbr \/\u003E                    return \"NETWORK TYPE HSUPA (3G) Speed: 1-23 Mbps\";\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_UMTS:\u003Cbr \/\u003E                    return \"NETWORK TYPE UMTS (3G) Speed: 0.4-7 Mbps\";\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ API level 7 not supported this type\u003Cbr \/\u003E                case NETWORK_TYPE_EHRPD:\u003Cbr \/\u003E                    return \"NETWORK TYPE EHRPD Speed: ~1-2 Mbps\";\u003Cbr \/\u003E                case NETWORK_TYPE_EVDO_B:\u003Cbr \/\u003E                    return \"NETWORK_TYPE_EVDO_B Speed: ~5 Mbps\";\u003Cbr \/\u003E                case NETWORK_TYPE_HSPAP:\u003Cbr \/\u003E                    return \"NETWORK TYPE HSPA+ (4G) Speed: 10-20 Mbps\";\u003Cbr \/\u003E                case NETWORK_TYPE_IDEN:\u003Cbr \/\u003E                    return \"NETWORK TYPE IDEN Speed: ~25 Kbps\";\u003Cbr \/\u003E                case NETWORK_TYPE_LTE:\u003Cbr \/\u003E                    return \"NETWORK TYPE LTE (4G) Speed: 10+ Mbps\";\u003Cbr \/\u003E\u003Cbr \/\u003E                \/\/ Unknown type\u003Cbr \/\u003E                case TelephonyManager.NETWORK_TYPE_UNKNOWN:\u003Cbr \/\u003E                    return \"NETWORK TYPE UNKNOWN\";\u003Cbr \/\u003E                default:\u003Cbr \/\u003E                    return \"\";\u003Cbr \/\u003E            }\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            return \"\";\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Of course, these are constants aren't available in API level 7 that we must define: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic static final int NETWORK_TYPE_EHRPD = 14; \/\/ API Level 11\u003Cbr \/\u003Epublic static final int NETWORK_TYPE_EVDO_B = 12; \/\/ API Level 9\u003Cbr \/\u003Epublic static final int NETWORK_TYPE_HSPAP = 15; \/\/ API Level 13\u003Cbr \/\u003Epublic static final int NETWORK_TYPE_IDEN = 11; \/\/ API Level 8\u003Cbr \/\u003Epublic static final int NETWORK_TYPE_LTE = 13; \/\/ API Level 11\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding check network state permission\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Every time you want to check the network information, you must add \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EACCESS_NETWORK_STATE\u003C\/code\u003E permission in your \u003Cb\u003E\u003Ci\u003EAndroidManifest.xml\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E\u0026lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"\/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning an activity to test\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After put all codes above to your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMainActivity\u003C\/code\u003E class, modifying \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E@Override\u003Cbr \/\u003Epublic void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        TextView networkInfo = (TextView) findViewById(R.id.network_type);\u003Cbr \/\u003E        String type = isConected(this);\u003Cbr \/\u003E        networkInfo.setText(type);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Running this application when your device is connecting via Wifi, you will have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/QiqSIcY.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/QiqSIcY.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, disabled wifi connection and enable the cellular network on your device, you'll see it's type and speed:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/exgIPi9.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/exgIPi9.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, you've known the solution to get cellular network information in Android serve your own purposes. Further, please read these official document to take a deep understanding about networking in Android:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/telephony\/TelephonyManager.html\" target=\"_blank\"\u003ETelephonyManager\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003E\u003Ca href=\"https:\/\/developer.android.com\/training\/basics\/network-ops\/managing.html\" target=\"_blank\"\u003EManaging networking usage\u003C\/a\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qrSWlB\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/1707587455960389992\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/android-tip-get-cellular-network.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1707587455960389992"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1707587455960389992"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/android-tip-get-cellular-network.html","title":"Android TIP: Get Cellular Network information"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-1643447472080466443"},"published":{"$t":"2016-12-16T15:55:00.003+07:00"},"updated":{"$t":"2016-12-16T15:55:47.351+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android M"},{"scheme":"http://www.blogger.com/atom/ns#","term":"downloadManager"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Permission"}],"title":{"type":"text","$t":"Runtime Permission from Android Marshmallow (6.0)"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Beginning in Android 6.0 (API level 23), users grant permissions to apps while the app is running, not when they install the app. This approach streamlines the app install process, since the user does not need to grant permissions when they install or update the app. It also gives the user more control over the app's functionality; for example, a user could choose to give a camera app access to the camera but not to the device location. The user can revoke the permissions at any time, by going to the app's Settings screen.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Android system permissions are divided into many categories. But when it comes to permission request at runtime from Android 6.0 onward, system permissions are categorized into two categories: \u003Ci\u003ENormal \u003C\/i\u003Eand \u003Ci\u003EDangerous:\u003C\/i\u003E\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003ENormal permissions do not directly risk the user's privacy. If your app lists a normal permission in its manifest, the system grants the permission automatically. List of normal permission can be found \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/security\/normal-permissions.html\" target=\"_blank\"\u003EHERE\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E.\u003C\/li\u003E\u003Cli\u003EDangerous permissions can give the app access to the user's confidential data. If your app lists a normal permission in its manifest, the system grants the permission automatically. If you list a dangerous permission, the user has to explicitly give approval to your app. List of dangerous permissions is available \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/topics\/security\/permissions.html#normal-dangerous\" target=\"_blank\"\u003EHERE\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; By this post, I would like to present the way to request Runtime permissions with dangerous permissions in Android M. I will reuse \u003Cb\u003E\u003Ci\u003EAndroidDownloadManagerSample\u003C\/i\u003E\u003C\/b\u003E project from \u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/09\/android-basic-training-course.html\" target=\"_blank\"\u003Emy previous post\u003C\/a\u003E\u003C\/i\u003E which talked about \u003Cb\u003EDownloadManager\u003C\/b\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Firstly, just look at AndroidManifest.xml file of this project: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;manifest xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    package=\"info.devexchanges.downloadingfile\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;uses-permission android:name=\"android.permission.INTERNET\"\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"\/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;application\u003Cbr \/\u003E        android:allowBackup=\"true\"\u003Cbr \/\u003E        android:icon=\"@mipmap\/ic_launcher\"\u003Cbr \/\u003E        android:label=\"@string\/app_name\"\u003Cbr \/\u003E        android:supportsRtl=\"true\"\u003Cbr \/\u003E        android:theme=\"@style\/AppTheme\"\u0026gt;\u003Cbr \/\u003E        \u0026lt;activity android:name=\".MainActivity\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MAIN\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E                \u0026lt;category android:name=\"android.intent.category.LAUNCHER\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/activity\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/application\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/manifest\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, first permission \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eandroid.permission.INTERNET\u003C\/code\u003E is a normal permission and the seconds one \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eandroid.permission.WRITE_EXTERNAL_STORAGE\u003C\/code\u003E\u0026nbsp;is a dangerous permission. Therefore in the following example, we would request the user to grant it at runtime. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECheck and request a runtime permission\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firstly, determine whether if the permission is already available with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EcheckSelfPermission()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivityCompat\u003C\/code\u003E class, then  if permission has not been granted, prompt user by use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ErequestPermissions()\u003C\/code\u003E method: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate void requestStoragePermission() {\u003Cbr \/\u003E        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)\u003Cbr \/\u003E                != PackageManager.PERMISSION_GRANTED) {\u003Cbr \/\u003E            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_STORAGE);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            Log.i(\"Main\", \"Storage permissions have already been granted. Download the file\");\u003Cbr \/\u003E            downloadFile();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; When running this project, you'll have this alert dialog:  \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/Nxfiwsz.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/Nxfiwsz.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle user action after request permission\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; User can click \"\u003Cb\u003EAllow\u003C\/b\u003E\" or \"\u003Cb\u003EDeny\u003C\/b\u003E\" on the alert dialog. To handle this action, you must override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonRequestPermissionsResult()\u003C\/code\u003E. In this project, if user granted the permission, an IMG file will be downloaded to your device: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\u003Cbr \/\u003E        super.onRequestPermissionsResult(requestCode, permissions, grantResults);\u003Cbr \/\u003E        if (requestCode == REQUEST_STORAGE) {\u003Cbr \/\u003E            \/\/ If request is cancelled, the result arrays are empty.\u003Cbr \/\u003E            if (grantResults.length \u0026gt; 0 \u0026amp;\u0026amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) {\u003Cbr \/\u003E                downloadFile();\u003Cbr \/\u003E            } else  {\u003Cbr \/\u003E                Toast.makeText(this, \"You now can not download the file!\", Toast.LENGTH_SHORT).show();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void downloadFile() {\u003Cbr \/\u003E        downloadManager = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);\u003Cbr \/\u003E        Request request = new Request(Uri.parse(DOWNLOAD_URL));\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Get download file name\u003Cbr \/\u003E        String fileExtenstion = MimeTypeMap.getFileExtensionFromUrl(DOWNLOAD_URL);\u003Cbr \/\u003E        String name = URLUtil.guessFileName(DOWNLOAD_URL, null, fileExtenstion);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/Save file to destination folder\u003Cbr \/\u003E        request.setDestinationInExternalPublicDir(\"\/Downloads\", name);\u003Cbr \/\u003E        enqueue = downloadManager.enqueue(request);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Of course, the permission request will be invoked when you click the \"Start Download\" button, so you call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ErequestStoragePermission()\u003C\/code\u003E method here. Remember to check \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBuild.VERSION_CODES\u003C\/code\u003E to request this runtime permission: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic void onClick(View view) {\u003Cbr \/\u003E        int currentApiVersion = android.os.Build.VERSION.SDK_INT;\u003Cbr \/\u003E        if (currentApiVersion \u0026gt;= Build.VERSION_CODES.M) {\u003Cbr \/\u003E            requestStoragePermission();\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            downloadFile();\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Running this project, If user denied the permission, app will show a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EToast\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/8yoRTGE.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/8yoRTGE.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And if user granted this permission, your file will be downloaded by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EDownloadManager\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/vHSwFWP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/vHSwFWP.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Moreover, user also can grant runtime permission for your app in Settings of their device: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/PDKwgnW.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/PDKwgnW.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With runtime permission, Android M and later is more secure. From now, if your app have one or more dangerous permission, you must prompt user to request it at the runtime, you don't have any another choice. Only thing you could do right now is to make our application fully support this new permission system. Hope this post is helpful with your work, for full project code, please click the button below.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/1fwwm\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/1643447472080466443\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/runtime-permission-from-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1643447472080466443"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1643447472080466443"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/runtime-permission-from-android.html","title":"Runtime Permission from Android Marshmallow (6.0)"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-1311529054376605134"},"published":{"$t":"2016-12-11T12:17:00.001+07:00"},"updated":{"$t":"2016-12-11T12:18:34.210+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"activity"},{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"intent"}],"title":{"type":"text","$t":"Android - Launch another Application's activity and get it's result"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; In Android development, sometimes you must run another application which installed in the device to performing a \u003Ci\u003Ereference work\u003C\/i\u003E.\u0026nbsp;You have become accustomed to launch a system app like Camera or Contact to get it's result (photo, contact info) but in this post, I would like to present the way to invoke another \"normal\" app (which can be developed by another developer) by using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eintent-filter\u003C\/code\u003E. Now, let's start! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EStarting 2 new projects\u003C\/h3\u003E\u003C\/div\u003EOpen Android Studio and start 2 new project:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EThe first project has an\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirstActivity\u003C\/code\u003E and it's layout file is \u003Cb\u003E\u003Ci\u003Eactivity_first.xml\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003EThe second project has an\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E named \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E and it's layout file is \u003Cb\u003E\u003Ci\u003Eactivity_seconds.xml\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003C\/ul\u003EPut some XML code in 2 layouts file to build the interface: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_first.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.firstapplication.FistActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;TextView\u003Cbr \/\u003E        android:id=\"@+id\/text\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:text=\"This is the first Activity\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/button\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/text\"\u003Cbr \/\u003E        android:layout_marginTop=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E        android:text=\"Go to another app activity\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_seconds.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_second\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.secondapplication.SecondsActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;EditText\u003Cbr \/\u003E        android:id=\"@+id\/edit_text\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:hint=\"Put some texts\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/button\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_below=\"@id\/edit_text\"\u003Cbr \/\u003E        android:text=\"Back to the first Activity\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfigurations in AndroidManifest.xml\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Of course, we'll launch \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E of application 2 from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirstActivity\u003C\/code\u003E later. To perform this work, we need use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eintent-filter\u003C\/code\u003E to define the specifies the type of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E accepted based on the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E's name, data, and category. Now, do this work:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EKeep the default “generated” \u003Cb\u003E\u003Ci\u003EAndroidManifest.xml\u003C\/i\u003E\u003C\/b\u003E without changes in the project one.\u003C\/li\u003E\u003Cli\u003EHere is an important step, we need to define the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E action name that will be used to call the activity \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Einfo.devexchanges.secondsapp.SECOND_ACTIVITY\u003C\/code\u003E in the project 2 \u003Cb\u003E\u003Ci\u003EAndroidManifest.xml\u003C\/i\u003E\u003C\/b\u003E. Put this code in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u0026lt;activity\u0026gt;\u003C\/code\u003E scope of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E:\u003C\/li\u003E\u003C\/ul\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E       \u0026lt;action android:name=\"info.devexchanges.secondsapp.SECOND_ACTIVITY\" \/\u0026gt;\u003Cbr \/\u003E       \u0026lt;category android:name=\"android.intent.category.DEFAULT\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ELaunching SecondsActivity from FirstActivity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With the configuration above, we now can launch \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondActivity \u003C\/code\u003E easily from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirstActivity\u003C\/code\u003E with this code: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E         try {\u003Cbr \/\u003E                    Intent intent = new Intent(\"info.devexchanges.secondsapp.SECOND_ACTIVITY\");\u003Cbr \/\u003E                    startActivity(intent);\u003Cbr \/\u003E                } catch (ActivityNotFoundException ex) {\u003Cbr \/\u003E                    ex.printStackTrace();\u003Cbr \/\u003E                    Log.e(\"Main\", \"Second application is not installed!\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: You can put data to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E by use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EputExtras()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E (before call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EstartActivity()\u003C\/code\u003E).\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; We'll have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/19ucBbO.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/19ucBbO.gif\" height=\"640\" width=\"380\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EGet result from SecondActivity\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to get the result from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E, we must use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EstartActivityForResult()\u003C\/code\u003E method instead of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EstartActivity()\u003C\/code\u003E in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFirstActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E         try {\u003Cbr \/\u003E                    Intent intent = new Intent(\"info.devexchanges.secondsapp.SECOND_ACTIVITY\");\u003Cbr \/\u003E                    startActivityForResult(intent, REQUEST_CODE);\u003Cbr \/\u003E                } catch (ActivityNotFoundException ex) {\u003Cbr \/\u003E                    ex.printStackTrace();\u003Cbr \/\u003E                    Log.e(\"Main\", \"Second application is not installed!\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003EMoreover, you must override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonActivityResult()\u003C\/code\u003E to get \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E data and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EresultCode\u003C\/code\u003E which returned from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\u003Cbr \/\u003E        super.onActivityResult(requestCode, resultCode, data);\u003Cbr \/\u003E        if (requestCode == REQUEST_CODE) {\u003Cbr \/\u003E            if (resultCode == RESULT_OK) {\u003Cbr \/\u003E                String intentData = data.getStringExtra(\"EditText_Value\");\u003Cbr \/\u003E                textView.setText(intentData);\u003Cbr \/\u003E            } else {\u003Cbr \/\u003E                textView.setText(\"User press back at Second Activity\");\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003EIn \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESecondsActivity\u003C\/code\u003E, before it's finish, just call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetResult()\u003C\/code\u003E to send back \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EresultCode\u003C\/code\u003E to the parent \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ESecondsActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.secondapplication;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.EditText;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class SecondsActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_seconds);\u003Cbr \/\u003E\u003Cbr \/\u003E        View btnBack = findViewById(R.id.button);\u003Cbr \/\u003E        final EditText editText = (EditText) findViewById(R.id.edit_text);\u003Cbr \/\u003E\u003Cbr \/\u003E        btnBack.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                Intent intent = new Intent();\u003Cbr \/\u003E                intent.putExtra(\"EditText_Value\", editText.getText().toString().trim());\u003Cbr \/\u003E                setResult(RESULT_OK, intent);\u003Cbr \/\u003E                finish();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003EAnd this is output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/lwkpvAA.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/lwkpvAA.gif\" height=\"640\" width=\"356\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With defining an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eintent-filter\u003C\/code\u003E option, we can launch another app activity easily and get it's result. Hope this post is helpful in developing \"\u003Ci\u003Ereference applications\u003C\/i\u003E\" in your work. Moreover, please go to the \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/guide\/components\/intents-filters.html\" target=\"_blank\"\u003EGoogle official document\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E to read more about \u003Ci\u003EIntent +\u0026nbsp;Intent Filter\u003C\/i\u003E, one of basic\u0026nbsp;concept of Android development.\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qeXBwt\" target=\"_blank\"\u003EGET FULL CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/1311529054376605134\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/android-launch-another-applications.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1311529054376605134"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/1311529054376605134"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/12\/android-launch-another-applications.html","title":"Android - Launch another Application's activity and get it's result"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-6616927879780426276"},"published":{"$t":"2016-11-28T13:50:00.001+07:00"},"updated":{"$t":"2016-11-28T14:49:42.095+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"android studio"},{"scheme":"http://www.blogger.com/atom/ns#","term":"parcelable"},{"scheme":"http://www.blogger.com/atom/ns#","term":"serializable"}],"title":{"type":"text","$t":"Android TIP: Quick generating Parcelable implement with a plugin in Android Studio"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; \u0026nbsp;Along with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESerializable\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E is a data type that we usually pass through \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBundle\u003C\/code\u003E when switching to another \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EFragment\u003C\/code\u003E. This is an interface for classes whose instances can be written to and restored from a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcel\u003C\/code\u003E. \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E process is much faster than \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESerializable\u003C\/code\u003E (a standard interface in JDK). One of the reasons for this is that we are being explicit about the serialization process instead of using reflection to infer it. It also stands to reason that the code has been heavily optimized for this purpose.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Classes implementing the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E interface must also have a non-null static field called \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ECREATOR\u003C\/code\u003E of a type that implements the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable.Creator\u003C\/code\u003E interface. More over, there are some methods you must override: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdescribeContents()\u003C\/code\u003E: describe the kinds of special objects contained in this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E's marshalled representation. Return a bitmask indicating the set of special object types marshalled by the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EwriteToParcel()\u003C\/code\u003E: flatten this object in to a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcel\u003C\/code\u003E.\u003C\/li\u003E\u003Cli\u003EA constructor with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcel\u003C\/code\u003E as the parameter: read all class variables from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcel\u003C\/code\u003E.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; As you can see, not simple like implement \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESerializable\u003C\/code\u003E, by making a class which implements \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E we must write a lot of boring\/similar codes (especially your class has so many private variables). So, as a \u003Ci\u003Elazy developer \u003C\/i\u003Elike me, you would think to use a generating tool. In this tip, I will present a powerful plugin on IntelliJ\/Android Studio to make this work more comfortable and quickly. \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eqIXp5v.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eqIXp5v.gif\" height=\"300\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EInstalling the plugin\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003EStep 1\u003C\/b\u003E: Go to the plugin \u003Cb\u003E\u003Ca href=\"https:\/\/github.com\/mcharmas\/android-parcelable-intellij-plugin\/releases\" target=\"_blank\"\u003Erelease page\u003C\/a\u003E\u003C\/b\u003E on \u003Cb\u003EGithub \u003C\/b\u003Eand download the \u003Ci\u003Elastest jar file\u003C\/i\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003EStep 2\u003C\/b\u003E: In Android Studio, select menu \u003Cb\u003EFile \u003C\/b\u003E-\u0026gt; \u003Cb\u003ESettings\u003C\/b\u003E... (on Windows) or \u003Cb\u003EFile \u003C\/b\u003E-\u0026gt; \u003Cb\u003EPreferences\u003C\/b\u003E... (on MacOS), select \u003Cb\u003EPlugin\u003C\/b\u003E entry on the left-side pane. You will have this dialog:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/jCexFhP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/jCexFhP.png\" height=\"428\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u0026nbsp; \u0026nbsp;\u0026nbsp;\u003C\/div\u003E\u003Cdiv\u003E\u003Cb\u003E\u0026nbsp; \u0026nbsp; Step 3\u003C\/b\u003E: Click at \"\u003Ci\u003EInstall plugin from disk\u003C\/i\u003E\" and select the download jar file:\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/XpTYqYg.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/XpTYqYg.png\" height=\"400\" width=\"332\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv\u003E\u0026nbsp; \u0026nbsp; \u0026nbsp;\u003Cb\u003EStep 4\u003C\/b\u003E: Click \"\u003Cb\u003EOK\u003C\/b\u003E\", the dialog will be closed and the plugin has installed. This dialog will appear and click \"\u003Cb\u003ERestart\u003C\/b\u003E\" to restart Android Studio:\u003C\/div\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/vFiPzFu.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/vFiPzFu.png\" height=\"113\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUsages in your class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Just press \u003Cb\u003EALT + Insert\u003C\/b\u003E (or your equivalent keybinding for code generation) in your editor and select \u003Cb\u003EParcelable\u003C\/b\u003E. It allows you to select the fields to be parceled:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/2gKnNiv.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/2gKnNiv.png\" height=\"555\" width=\"640\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And you will have this result: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ECustomer.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.parcelableplugin;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Parcel;\u003Cbr \/\u003Eimport android.os.Parcelable;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class Customer implements Parcelable {\u003Cbr \/\u003E\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E    private int id;\u003Cbr \/\u003E\u003Cbr \/\u003E    public Customer(String name, int id) {\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E        this.id = id;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int describeContents() {\u003Cbr \/\u003E        return 0;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void writeToParcel(Parcel dest, int flags) {\u003Cbr \/\u003E        dest.writeString(this.name);\u003Cbr \/\u003E        dest.writeInt(this.id);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    protected Customer(Parcel in) {\u003Cbr \/\u003E        this.name = in.readString();\u003Cbr \/\u003E        this.id = in.readInt();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public static final Creator\u003Ccustomer\u003E CREATOR = new Creator\u003Ccustomer\u003E() {\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public Customer createFromParcel(Parcel source) {\u003Cbr \/\u003E            return new Customer(source);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public Customer[] newArray(int size) {\u003Cbr \/\u003E            return new Customer[size];\u003Cbr \/\u003E        }\u003Cbr \/\u003E    };\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/customer\u003E\u003C\/customer\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, your work has been done without typing lengthy codes! For more details, please go to the \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/mcharmas\/android-parcelable-intellij-plugin\" target=\"_blank\"\u003Eplugin page\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E on \u003Cb\u003EGithub\u003C\/b\u003E and read it's documentation! Moreover, check these reference links to understanding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EParcelable\u003C\/code\u003E in Android: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003EGoogle \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/reference\/android\/os\/Parcelable.html\" target=\"_blank\"\u003Eguide and example\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E\u003C\/li\u003E\u003Cli\u003E\u003Cb\u003EParcelable.java\u003C\/b\u003E \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/grepcode.com\/file\/repository.grepcode.com\/java\/ext\/com.google.android\/android\/5.1.0_r1\/android\/os\/Parcelable.java\/\" target=\"_blank\"\u003Esource code\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E.\u003C\/li\u003E\u003C\/ul\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/6616927879780426276\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/android-tip-quick-generating-parcelable.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6616927879780426276"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/6616927879780426276"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/android-tip-quick-generating-parcelable.html","title":"Android TIP: Quick generating Parcelable implement with a plugin in Android Studio"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3352253287853443177"},"published":{"$t":"2016-11-27T19:17:00.000+07:00"},"updated":{"$t":"2016-11-30T08:28:55.760+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"data loading"},{"scheme":"http://www.blogger.com/atom/ns#","term":"MediaPlayer"}],"title":{"type":"text","$t":"Playing background Audio in Android with MediaSessionCompat"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; For a long time I have not write any new tutorial! Today, I come back with talking to a very popular topic: play audio on the background like most of music\/audio applications do. When you slide to expand notification area or lock device screen, you still see your custom view of your app (the playing track, pause\/stop button, etc...).\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp;While this is a fairly common feature, it's hard to implement, with lots of different pieces that need to be built correctly in order to give your user the full Android experience.   In this tutorial you will learn about \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E from the Android support library, and how it can be used to create a proper background audio service for your users. \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/GVpf2Apl.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/GVpf2Apl.jpg\" height=\"250\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EProject configuration\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; After starting a new Android Studio project, open your \u003Ci\u003E\u003Cb\u003EAndroidManifest.xml\u003C\/b\u003E\u003C\/i\u003E and add \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EWAKE_LOCK\u003C\/code\u003E permission: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" \/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Next, you will need to declare the use of the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaButtonReceiver\u003C\/code\u003E from the Android support library. This will allow you to intercept media control button interactions and headphone events on devices running KitKat and earlier. Add this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Ereceiver\u003C\/code\u003E inside \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eapplication\u003C\/code\u003E tag: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;receiver android:name=\"android.support.v4.media.session.MediaButtonReceiver\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;action android:name=\"android.intent.action.MEDIA_BUTTON\" \/\u0026gt;\u003Cbr \/\u003E        \u0026lt;action android:name=\"android.media.AUDIO_BECOMING_NOISY\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E\u0026lt;\/receiver\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Now, copy this \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/gist.github.com\/ianhanniballake\/47617ec3488e0257325c\" target=\"_blank\"\u003EMediaStyleHelper.java\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E file (which written by \u0026nbsp;Ian Lake, Developer Advocate at Google) to your project to clean up the creation of media style notifications: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMediaStyleHelper.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage com.example.mediasessioncompat;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.PendingIntent;\u003Cbr \/\u003Eimport android.content.Context;\u003Cbr \/\u003Eimport android.content.Intent;\u003Cbr \/\u003Eimport android.support.v4.media.MediaDescriptionCompat;\u003Cbr \/\u003Eimport android.support.v4.media.MediaMetadataCompat;\u003Cbr \/\u003Eimport android.support.v4.media.session.MediaButtonReceiver;\u003Cbr \/\u003Eimport android.support.v4.media.session.MediaControllerCompat;\u003Cbr \/\u003Eimport android.support.v4.media.session.MediaSessionCompat;\u003Cbr \/\u003Eimport android.support.v4.media.session.PlaybackStateCompat;\u003Cbr \/\u003Eimport android.support.v7.app.NotificationCompat;\u003Cbr \/\u003E\u003Cbr \/\u003E\/**\u003Cbr \/\u003E * Helper APIs for constructing MediaStyle notifications\u003Cbr \/\u003E *\/\u003Cbr \/\u003Epublic class MediaStyleHelper {\u003Cbr \/\u003E    \/**\u003Cbr \/\u003E     * Build a notification using the information from the given media session. Makes heavy use\u003Cbr \/\u003E     * of {@link MediaMetadataCompat#getDescription()} to extract the appropriate information.\u003Cbr \/\u003E     * @param context Context used to construct the notification.\u003Cbr \/\u003E     * @param mediaSession Media session to get information.\u003Cbr \/\u003E     * @return A pre-built notification with information from the given media session.\u003Cbr \/\u003E     *\/\u003Cbr \/\u003E    public static NotificationCompat.Builder from(\u003Cbr \/\u003E            Context context, MediaSessionCompat mediaSession) {\u003Cbr \/\u003E        MediaControllerCompat controller = mediaSession.getController();\u003Cbr \/\u003E        MediaMetadataCompat mediaMetadata = controller.getMetadata();\u003Cbr \/\u003E        MediaDescriptionCompat description = mediaMetadata.getDescription();\u003Cbr \/\u003E\u003Cbr \/\u003E        NotificationCompat.Builder builder = new NotificationCompat.Builder(context);\u003Cbr \/\u003E        builder\u003Cbr \/\u003E                .setContentTitle(description.getTitle())\u003Cbr \/\u003E                .setContentText(description.getSubtitle())\u003Cbr \/\u003E                .setSubText(description.getDescription())\u003Cbr \/\u003E                .setLargeIcon(description.getIconBitmap())\u003Cbr \/\u003E                .setContentIntent(controller.getSessionActivity())\u003Cbr \/\u003E                .setDeleteIntent(\u003Cbr \/\u003E                    MediaButtonReceiver.buildMediaButtonPendingIntent(context, PlaybackStateCompat.ACTION_STOP))\u003Cbr \/\u003E                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC);\u003Cbr \/\u003E        return builder;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating the background Audio Service\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to build a playback audio streaming service, you must create a subclass of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserServiceCompat\u003C\/code\u003E\u0026nbsp;(I named it is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBackgroundAudioService\u003C\/code\u003E) and implements \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer.OnCompletionListener\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAudioManager.OnAudioFocusChangeListener\u003C\/code\u003E interfaces. \u0026nbsp;Firstly, override \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonGetRoot()\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonLoadChildren()\u003C\/code\u003E with the default code (do nothing): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Nullable\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public BrowserRoot onGetRoot(@NonNull String clientPackageName, int clientUid, @Nullable Bundle rootHints) {\u003Cbr \/\u003E        if(TextUtils.equals(clientPackageName, getPackageName())) {\u003Cbr \/\u003E            return new BrowserRoot(getString(R.string.app_name), null);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        return null;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onLoadChildren(@NonNull String parentId, @NonNull Result\u0026lt;List\u0026lt;MediaBrowserCompat.MediaItem\u0026gt;\u0026gt; result) {\u003Cbr \/\u003E        result.sendResult(null);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Next, you must override the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonStartCommand()\u003C\/code\u003E method, which is the entry point into your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E. This method will take the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EIntent\u003C\/code\u003E that is passed to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E and send it to the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaButtonReceiver\u003C\/code\u003E class: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public int onStartCommand(Intent intent, int flags, int startId) {\u003Cbr \/\u003E        MediaButtonReceiver.handleIntent(mediaSessionCompat, intent);\u003Cbr \/\u003E        return super.onStartCommand(intent, flags, startId);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In addition, you should have a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBroadcastReceiver\u003C\/code\u003E that listens for changes in the headphone state. To keep things simple, this receiver will pause the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer\u003C\/code\u003E if it is playing: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate BroadcastReceiver headPhoneReceiver = new BroadcastReceiver() {\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onReceive(Context context, Intent intent) {\u003Cbr \/\u003E            if( mediaPlayer != null \u0026amp;\u0026amp; mediaPlayer.isPlaying() ) {\u003Cbr \/\u003E                mediaPlayer.pause();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    };\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; In \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E method of this class, initializing a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer\u003C\/code\u003E, a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E and register the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBroadcastReceiver\u003C\/code\u003E above: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    private MediaPlayer mediaPlayer;\u003Cbr \/\u003E    private MediaSessionCompat mediaSessionCompat;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onCreate() {\u003Cbr \/\u003E        super.onCreate();\u003Cbr \/\u003E\u003Cbr \/\u003E        initMediaPlayer();\u003Cbr \/\u003E        initMediaSession();\u003Cbr \/\u003E        initNoisyReceiver();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void initMediaPlayer() {\u003Cbr \/\u003E        mediaPlayer = new MediaPlayer();\u003Cbr \/\u003E        mediaPlayer.setWakeMode(getApplicationContext(), PowerManager.PARTIAL_WAKE_LOCK);\u003Cbr \/\u003E        mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);\u003Cbr \/\u003E        mediaPlayer.setVolume(1.0f, 1.0f);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void initMediaSession() {\u003Cbr \/\u003E        ComponentName mediaButtonReceiver = new ComponentName(getApplicationContext(), MediaButtonReceiver.class);\u003Cbr \/\u003E        mediaSessionCompat = new MediaSessionCompat(getApplicationContext(), \"Tag\", mediaButtonReceiver, null);\u003Cbr \/\u003E\u003Cbr \/\u003E        mediaSessionCompat.setCallback(mediaSessionCallback);\u003Cbr \/\u003E        mediaSessionCompat.setFlags( MediaSessionCompat.FLAG_HANDLES_MEDIA_BUTTONS | MediaSessionCompat.FLAG_HANDLES_TRANSPORT_CONTROLS );\u003Cbr \/\u003E\u003Cbr \/\u003E        Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON);\u003Cbr \/\u003E        mediaButtonIntent.setClass(this, MediaButtonReceiver.class);\u003Cbr \/\u003E        PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0, mediaButtonIntent, 0);\u003Cbr \/\u003E        mediaSessionCompat.setMediaButtonReceiver(pendingIntent);\u003Cbr \/\u003E\u003Cbr \/\u003E        setSessionToken(mediaSessionCompat.getSessionToken());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void initNoisyReceiver() {\u003Cbr \/\u003E        \/\/Handles headphones coming unplugged. cannot be done through a manifest receiver\u003Cbr \/\u003E        IntentFilter filter = new IntentFilter(AudioManager.ACTION_AUDIO_BECOMING_NOISY);\u003Cbr \/\u003E        registerReceiver(headPhoneReceiver, filter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Now, it's time to look into handling audio focus. Overriding \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonAudioFocusChange()\u003C\/code\u003E method with following code: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    public void onAudioFocusChange(int focusChange) {\u003Cbr \/\u003E        switch( focusChange ) {\u003Cbr \/\u003E            case AudioManager.AUDIOFOCUS_LOSS: {\u003Cbr \/\u003E                if( mediaPlayer.isPlaying() ) {\u003Cbr \/\u003E                    mediaPlayer.stop();\u003Cbr \/\u003E                }\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT: {\u003Cbr \/\u003E                mediaPlayer.pause();\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK: {\u003Cbr \/\u003E                if( mediaPlayer != null ) {\u003Cbr \/\u003E                    mediaPlayer.setVolume(0.3f, 0.3f);\u003Cbr \/\u003E                }\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E            case AudioManager.AUDIOFOCUS_GAIN: {\u003Cbr \/\u003E                if( mediaPlayer != null ) {\u003Cbr \/\u003E                    if( !mediaPlayer.isPlaying() ) {\u003Cbr \/\u003E                        mediaPlayer.start();\u003Cbr \/\u003E                    }\u003Cbr \/\u003E                    mediaPlayer.setVolume(1.0f, 1.0f);\u003Cbr \/\u003E                }\u003Cbr \/\u003E                break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; This is explanation about some common states of volume control (in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAudioManager\u003C\/code\u003E class): \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAUDIOFOCUS_LOSS\u003C\/code\u003E: used to indicate a loss of audio focus of unknown duration. This occurs when another app has requested audio focus. When this happens, you should stop audio playback in your app.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAUDIOFOCUS_LOSS_TRANSIENT\u003C\/code\u003E: used to indicate a transient loss of audio focus. This state is entered when another app wants to play audio, but it only anticipates needing focus for a short time. You can use this state to pause your audio playback.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK\u003C\/code\u003E: when audio focus is requested, but throws a 'can duck' state, it means that you can continue your playback, but should bring the volume down a bit. This can occur when a notification sound is played by the device.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EAUDIOFOCUS_GAIN\u003C\/code\u003E: this is the state when a duckable audio playback has completed, and your app can resume at its previous levels.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; The last and most important thing you must to is implement a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat.Callback\u003C\/code\u003E variable (you've set this callback to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EmediaSessionCompat\u003C\/code\u003E through \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetCallback()\u003C\/code\u003E method in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCreate()\u003C\/code\u003E of this class). You must override 3 methods: \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlay()\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPause\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlayFromMediaId()\u003C\/code\u003E. This is the code: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Eprivate MediaSessionCompat.Callback mediaSessionCallback = new MediaSessionCompat.Callback() {\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onPlay() {\u003Cbr \/\u003E            super.onPlay();\u003Cbr \/\u003E            if( !successfullyRetrievedAudioFocus() ) {\u003Cbr \/\u003E                return;\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            mediaSessionCompat.setActive(true);\u003Cbr \/\u003E            setMediaPlaybackState(PlaybackStateCompat.STATE_PLAYING);\u003Cbr \/\u003E\u003Cbr \/\u003E            showPlayingNotification();\u003Cbr \/\u003E            mediaPlayer.start();\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onPause() {\u003Cbr \/\u003E            super.onPause();\u003Cbr \/\u003E\u003Cbr \/\u003E            if( mediaPlayer.isPlaying() ) {\u003Cbr \/\u003E                mediaPlayer.pause();\u003Cbr \/\u003E                setMediaPlaybackState(PlaybackStateCompat.STATE_PAUSED);\u003Cbr \/\u003E                showPausedNotification();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onPlayFromMediaId(String mediaId, Bundle extras) {\u003Cbr \/\u003E            super.onPlayFromMediaId(mediaId, extras);\u003Cbr \/\u003E\u003Cbr \/\u003E            try {\u003Cbr \/\u003E                AssetFileDescriptor afd = getResources().openRawResourceFd(Integer.valueOf(mediaId));\u003Cbr \/\u003E                if (afd == null) {\u003Cbr \/\u003E                    return;\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003Cbr \/\u003E                try {\u003Cbr \/\u003E                    mediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());\u003Cbr \/\u003E\u003Cbr \/\u003E                } catch (IllegalStateException e) {\u003Cbr \/\u003E                    mediaPlayer.release();\u003Cbr \/\u003E                    initMediaPlayer();\u003Cbr \/\u003E                    mediaPlayer.setDataSource(afd.getFileDescriptor(), afd.getStartOffset(), afd.getLength());\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003Cbr \/\u003E                afd.close();\u003Cbr \/\u003E                initMediaSessionMetadata();\u003Cbr \/\u003E\u003Cbr \/\u003E            } catch (IOException e) {\u003Cbr \/\u003E                return;\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            try {\u003Cbr \/\u003E                mediaPlayer.prepare();\u003Cbr \/\u003E            } catch (IOException e) {\u003Cbr \/\u003E                e.printStackTrace();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    };\u003Cbr \/\u003E\u003Cbr \/\u003E    private void showPlayingNotification() {\u003Cbr \/\u003E        NotificationCompat.Builder builder = MediaStyleHelper.from(BackgroundAudioService.this, mediaSessionCompat);\u003Cbr \/\u003E        if( builder == null ) {\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E        builder.addAction(new NotificationCompat.Action(android.R.drawable.ic_media_pause, \"Pause\", MediaButtonReceiver.buildMediaButtonPendingIntent(this, PlaybackStateCompat.ACTION_PLAY_PAUSE)));\u003Cbr \/\u003E        builder.setStyle(new NotificationCompat.MediaStyle().setShowActionsInCompactView(0).setMediaSession(mediaSessionCompat.getSessionToken()));\u003Cbr \/\u003E        builder.setSmallIcon(R.mipmap.ic_launcher);\u003Cbr \/\u003E        NotificationManagerCompat.from(BackgroundAudioService.this).notify(1, builder.build());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void showPausedNotification() {\u003Cbr \/\u003E        NotificationCompat.Builder builder = MediaStyleHelper.from(this, mediaSessionCompat);\u003Cbr \/\u003E        if( builder == null ) {\u003Cbr \/\u003E            return;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        builder.addAction(new NotificationCompat.Action(android.R.drawable.ic_media_play, \"Play\", MediaButtonReceiver.buildMediaButtonPendingIntent(this, PlaybackStateCompat.ACTION_PLAY_PAUSE)));\u003Cbr \/\u003E        builder.setStyle(new NotificationCompat.MediaStyle().setShowActionsInCompactView(0).setMediaSession(mediaSessionCompat.getSessionToken()));\u003Cbr \/\u003E        builder.setSmallIcon(R.mipmap.ic_launcher);\u003Cbr \/\u003E        NotificationManagerCompat.from(this).notify(1, builder.build());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setMediaPlaybackState(int state) {\u003Cbr \/\u003E        PlaybackStateCompat.Builder playbackstateBuilder = new PlaybackStateCompat.Builder();\u003Cbr \/\u003E        if( state == PlaybackStateCompat.STATE_PLAYING ) {\u003Cbr \/\u003E            playbackstateBuilder.setActions(PlaybackStateCompat.ACTION_PLAY_PAUSE | PlaybackStateCompat.ACTION_PAUSE);\u003Cbr \/\u003E        } else {\u003Cbr \/\u003E            playbackstateBuilder.setActions(PlaybackStateCompat.ACTION_PLAY_PAUSE | PlaybackStateCompat.ACTION_PLAY);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        playbackstateBuilder.setState(state, PlaybackStateCompat.PLAYBACK_POSITION_UNKNOWN, 0);\u003Cbr \/\u003E        mediaSessionCompat.setPlaybackState(playbackstateBuilder.build());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void initMediaSessionMetadata() {\u003Cbr \/\u003E        MediaMetadataCompat.Builder metadataBuilder = new MediaMetadataCompat.Builder();\u003Cbr \/\u003E        \/\/Notification icon in card\u003Cbr \/\u003E        metadataBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_DISPLAY_ICON, BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\u003Cbr \/\u003E        metadataBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART, BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/lock screen icon for pre lollipop\u003Cbr \/\u003E        metadataBuilder.putBitmap(MediaMetadataCompat.METADATA_KEY_ART, BitmapFactory.decodeResource(getResources(), R.mipmap.ic_launcher));\u003Cbr \/\u003E        metadataBuilder.putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_TITLE, \"Beo Dat May Troi\");\u003Cbr \/\u003E        metadataBuilder.putString(MediaMetadataCompat.METADATA_KEY_DISPLAY_SUBTITLE, \"Singer: Anh Tho\");\u003Cbr \/\u003E        metadataBuilder.putLong(MediaMetadataCompat.METADATA_KEY_TRACK_NUMBER, 1);\u003Cbr \/\u003E        metadataBuilder.putLong(MediaMetadataCompat.METADATA_KEY_NUM_TRACKS, 1);\u003Cbr \/\u003E\u003Cbr \/\u003E        mediaSessionCompat.setMetadata(metadataBuilder.build());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private boolean successfullyRetrievedAudioFocus() {\u003Cbr \/\u003E        AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\u003Cbr \/\u003E\u003Cbr \/\u003E        int result = audioManager.requestAudioFocus(this,\u003Cbr \/\u003E                AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);\u003Cbr \/\u003E\u003Cbr \/\u003E        return result == AudioManager.AUDIOFOCUS_GAIN;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; As you can see on the code above, in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlay()\u003C\/code\u003E, you must check if audio focus was granted first.  Below the conditional statement, you will want to set the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E object to active, give it a state of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESTATE_PLAYING\u003C\/code\u003E, and assign the proper actions necessary to create pause buttons on pre-Lollipop lock screen controls. \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetMediaPlaybackState()\u003C\/code\u003E method will be called to builds and associates a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EPlaybackStateCompat\u003C\/code\u003E with your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E object. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Moreover, you must show a playing notification that is associated with your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E object by using the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaStyleHelper\u003C\/code\u003E class that we defined earlier, and then show that notification by call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EshowPlayingNotification()\u003C\/code\u003E method.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Finally, you will start the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer\u003C\/code\u003E at the end of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlay()\u003C\/code\u003E. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; When user click \"paused button\" button at the notification area, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPause()\u003C\/code\u003E will be called. Here you will pause the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer\u003C\/code\u003E, set the state to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ESTATE_PAUSED\u003C\/code\u003E and show a paused notification through call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EshowPausedNotification()\u003C\/code\u003E.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; The next method in the callback is \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlayFromMediaId()\u003C\/code\u003E, takes a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EString\u003C\/code\u003E and a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBundle\u003C\/code\u003E as parameters. This is the callback method that you can use for changing audio tracks\/content within your app.  In this tutorial, we will simply accept a raw resource ID (a mp3 file) and attempt to play it.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; There are some optional methods you can override are: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonSeekTo()\u003C\/code\u003E: allows you to change the playback position of your content.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonCommand()\u003C\/code\u003E: allow you to send custom commands to your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; Of course, the last work is handling the audio file has completed playing. Here, you can go to the next track or just simple: release the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaPlayer\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E@Override\u003Cbr \/\u003Epublic void onCompletion(MediaPlayer mediaPlayer) {\u003Cbr \/\u003E    if( mMediaPlayer != null ) {\u003Cbr \/\u003E        mMediaPlayer.release();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Unregister the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBroadcastReceiver\u003C\/code\u003E, cancel the notification and release \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonDestroy()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E@Override\u003Cbr \/\u003Epublic void onDestroy() {\u003Cbr \/\u003E    super.onDestroy();\u003Cbr \/\u003E    AudioManager audioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);\u003Cbr \/\u003E    audioManager.abandonAudioFocus(this);\u003Cbr \/\u003E    unregisterReceiver(mNoisyReceiver);\u003Cbr \/\u003E    mMediaSessionCompat.release();\u003Cbr \/\u003E    NotificationManagerCompat.from(this).cancel(1);\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; And never forget to register this \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E in your \u003Cb\u003E\u003Ci\u003EAndroidManifest.xml\u003C\/i\u003E\u003C\/b\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;service android:name=\".BackgroundAudioService\"\u0026gt;\u003Cbr \/\u003E            \u0026lt;intent-filter\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.intent.action.MEDIA_BUTTON\" \/\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.media.AUDIO_BECOMING_NOISY\" \/\u0026gt;\u003Cbr \/\u003E                \u0026lt;action android:name=\"android.media.browse.MediaBrowserService\" \/\u0026gt;\u003Cbr \/\u003E            \u0026lt;\/intent-filter\u0026gt;\u003Cbr \/\u003E        \u0026lt;\/service\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating an Activity to control the media player\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; For in-app controls, you always need an \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E. In this activity, you should have a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserCompat.ConnectionCallback\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaControllerCompat.Callback\u003C\/code\u003E, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserCompat\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaControllerCompat\u003C\/code\u003E objects created in your app. This is the main activity source code: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.backgroundaudio;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.content.ComponentName;\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.os.RemoteException;\u003Cbr \/\u003Eimport android.support.v4.media.MediaBrowserCompat;\u003Cbr \/\u003Eimport android.support.v4.media.session.MediaControllerCompat;\u003Cbr \/\u003Eimport android.support.v4.media.session.PlaybackStateCompat;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.widget.Button;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private static final int STATE_PAUSED = 0;\u003Cbr \/\u003E    private static final int STATE_PLAYING = 1;\u003Cbr \/\u003E    private int currentState;\u003Cbr \/\u003E    private MediaBrowserCompat mediaBrowserCompat;\u003Cbr \/\u003E\u003Cbr \/\u003E    private MediaBrowserCompat.ConnectionCallback connectionCallback = new MediaBrowserCompat.ConnectionCallback() {\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onConnected() {\u003Cbr \/\u003E            super.onConnected();\u003Cbr \/\u003E            try {\u003Cbr \/\u003E                MediaControllerCompat mediaControllerCompat = new MediaControllerCompat(MainActivity.this, mediaBrowserCompat.getSessionToken());\u003Cbr \/\u003E                mediaControllerCompat.registerCallback(mediaControllerCompatCallback);\u003Cbr \/\u003E                setSupportMediaController(mediaControllerCompat);\u003Cbr \/\u003E                getSupportMediaController().getTransportControls().playFromMediaId(String.valueOf(R.raw.beo_dat_may_troi__anh_tho), null);\u003Cbr \/\u003E\u003Cbr \/\u003E            } catch( RemoteException e ) {\u003Cbr \/\u003E                e.printStackTrace();\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    };\u003Cbr \/\u003E\u003Cbr \/\u003E    private MediaControllerCompat.Callback mediaControllerCompatCallback = new MediaControllerCompat.Callback() {\u003Cbr \/\u003E\u003Cbr \/\u003E        @Override\u003Cbr \/\u003E        public void onPlaybackStateChanged(PlaybackStateCompat state) {\u003Cbr \/\u003E            super.onPlaybackStateChanged(state);\u003Cbr \/\u003E            if( state == null ) {\u003Cbr \/\u003E                return;\u003Cbr \/\u003E            }\u003Cbr \/\u003E\u003Cbr \/\u003E            switch( state.getState() ) {\u003Cbr \/\u003E                case PlaybackStateCompat.STATE_PLAYING: {\u003Cbr \/\u003E                    currentState = STATE_PLAYING;\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                }\u003Cbr \/\u003E                case PlaybackStateCompat.STATE_PAUSED: {\u003Cbr \/\u003E                    currentState = STATE_PAUSED;\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        }\u003Cbr \/\u003E    };\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        Button btnPlay = (Button) findViewById(R.id.btn_play);\u003Cbr \/\u003E\u003Cbr \/\u003E        mediaBrowserCompat = new MediaBrowserCompat(this, new ComponentName(this, BackgroundAudioService.class),\u003Cbr \/\u003E                connectionCallback, getIntent().getExtras());\u003Cbr \/\u003E        mediaBrowserCompat.connect();\u003Cbr \/\u003E\u003Cbr \/\u003E        btnPlay.setOnClickListener(new View.OnClickListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public void onClick(View view) {\u003Cbr \/\u003E                if( currentState == STATE_PAUSED ) {\u003Cbr \/\u003E                    getSupportMediaController().getTransportControls().play();\u003Cbr \/\u003E                    currentState = STATE_PLAYING;\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    if( getSupportMediaController().getPlaybackState().getState() == PlaybackStateCompat.STATE_PLAYING ) {\u003Cbr \/\u003E                        getSupportMediaController().getTransportControls().pause();\u003Cbr \/\u003E                    }\u003Cbr \/\u003E\u003Cbr \/\u003E                    currentState = STATE_PAUSED;\u003Cbr \/\u003E                }\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onDestroy() {\u003Cbr \/\u003E        super.onDestroy();\u003Cbr \/\u003E        if( getSupportMediaController().getPlaybackState().getState() == PlaybackStateCompat.STATE_PLAYING ) {\u003Cbr \/\u003E            getSupportMediaController().getTransportControls().pause();\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        mediaBrowserCompat.disconnect();\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaControllerCompat.Callback\u003C\/code\u003E will have a method called \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonPlaybackStateChanged()\u003C\/code\u003E that receives changes in playback state, and can be used to keep your UI in sync.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserCompat.ConnectionCallback\u003C\/code\u003E has \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonConnected()\u003C\/code\u003E method that will be called when a new \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserCompat\u003C\/code\u003E object is created and connected. You can use this to initialize your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaControllerCompat\u003C\/code\u003E object, link it to your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaControllerCompat.Callback\u003C\/code\u003E, and associate it with \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaSessionCompat\u003C\/code\u003E from your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EService\u003C\/code\u003E. Once that is completed, you can start audio playback from this method.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Finally, when your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EActivity\u003C\/code\u003E destroyed, you should pause the audio service and disconnect your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMediaBrowserCompat\u003C\/code\u003E object.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; And this is the activity layout (XML file): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:orientation=\"vertical\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;Button\u003Cbr \/\u003E        android:id=\"@+id\/btn_play\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_centerInParent=\"true\"\u003Cbr \/\u003E        android:text=\"Play\/Pause Audio\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Running this application, you will see this layout on the notification area while audio is playing on background: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/qFoSXBc.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/qFoSXBc.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And if you lock device screen, you still be able to control playback from your app with this \"lock screen controls\": \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/rauGbQH.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/rauGbQH.png\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Making an universal playback control on Android devices is a hard topic in application development. Through this post, I hope you can understand the basic way to customizing a layout on the notification area and the lock screen while audio is playing background. For more details, you can go to the \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/developer.android.com\/training\/managing-audio\/index.html\" target=\"_blank\"\u003Eofficial guide\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E of Google developer to find out some interesting features. Finally, please download full project by click the button below, thanks for reading! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EReferences\u003C\/h3\u003E\u003C\/div\u003E\u003Cul\u003E\u003Cli\u003EReferences to original post on \u003Ca href=\"https:\/\/code.tutsplus.com\/tutorials\/background-audio-in-android-with-mediasessioncompat--cms-27030\" target=\"_blank\"\u003ECode.Tutplus.Com\u003C\/a\u003E (written by\u0026nbsp;\u003Cb\u003E\u003Ca href=\"https:\/\/www.linkedin.com\/in\/paultruiz\" target=\"_blank\"\u003EPaul Trebilcox-Ruiz\u003C\/a\u003E\u003C\/b\u003E)\u003C\/li\u003E\u003Cli\u003EManaging Audio playback on Google \u003Ca href=\"https:\/\/developer.android.com\/training\/managing-audio\/index.html\" target=\"_blank\"\u003Edeveloper guide\u003C\/a\u003E.\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/qwiiOl\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3352253287853443177\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/playing-background-audio-in-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3352253287853443177"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3352253287853443177"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/playing-background-audio-in-android.html","title":"Playing background Audio in Android with MediaSessionCompat"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-2255861527804224721"},"published":{"$t":"2016-11-14T21:13:00.000+07:00"},"updated":{"$t":"2016-11-14T21:16:03.092+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"animation"},{"scheme":"http://www.blogger.com/atom/ns#","term":"matrix"}],"title":{"type":"text","$t":"Androip Tip: create Digital Rain Effect (Matrix Effect)"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; You must be familiar with \u003Cb\u003E\u003Ci\u003EMatrix Effect \u003C\/i\u003E\u003C\/b\u003Ewhich has green codes float on black screen (very popular in Matrix film series). In Android, Matrix Effect has been implemented in various applications often as a Live Wallpaper. Through this tip, I would like to present a type of Matrix Effect called \u003Cb\u003E\u003Ci\u003EDigital Rain Effect\u003C\/i\u003E\u003C\/b\u003E - the codes is falling and like rain tears represents the activity of the virtual reality environment.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/NBYHl1jm.jpg\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/NBYHl1jm.jpg\" height=\"267\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECustom Matrix effect class\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; We will create a custom view based on \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EView\u003C\/code\u003E class. Firstly, we define some variables for the Digital Rain Effect with the \u003Ci\u003Esize of the code\u003C\/i\u003E, \u003Ci\u003Ethe size of a column\u003C\/i\u003E, \u003Ci\u003Ethe position of the bottom text\u003C\/i\u003E for each column and then the characters that will be used for the code (I will use only alphabet chars). Note that you can put the characters you want here or why not a custom font: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic class MatrixEffect extends View {\u003Cbr \/\u003E\u003Cbr \/\u003E    private static Random random;\u003Cbr \/\u003E    private int width, height;\u003Cbr \/\u003E    private Canvas canvas;\u003Cbr \/\u003E    private Bitmap canvasBmp;\u003Cbr \/\u003E    private int fontSize = 40;\u003Cbr \/\u003E    private int columnSize;\u003Cbr \/\u003E    private char[] chars = \"ABCDEFGHIJKLMNOPQRSTUVWSYZabcdefghijklmnopqrstuvwyz\".toCharArray();\u003Cbr \/\u003E    private int[] txtPosByColumn;\u003Cbr \/\u003E    private Paint paintTxt, paintBg, paintBgBmp, paintInitBg;\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Now, in the constructor, we'll initialize all \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EPaint\u003C\/code\u003E variables, which define that the text (running code) color is green, the background is black. You also need to create a new \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003ERandom\u003C\/code\u003E object here (to random text codes later): \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epublic MatrixEffect(Context context, AttributeSet attrs) {\u003Cbr \/\u003E        super(context, attrs);\u003Cbr \/\u003E        random = new Random();\u003Cbr \/\u003E\u003Cbr \/\u003E        paintTxt = new Paint();\u003Cbr \/\u003E        paintTxt.setStyle(Paint.Style.FILL);\u003Cbr \/\u003E        paintTxt.setColor(Color.GREEN);\u003Cbr \/\u003E        paintTxt.setTextSize(fontSize);\u003Cbr \/\u003E\u003Cbr \/\u003E        paintBg = new Paint();\u003Cbr \/\u003E        paintBg.setColor(Color.BLACK);\u003Cbr \/\u003E        paintBg.setAlpha(5);\u003Cbr \/\u003E        paintBg.setStyle(Paint.Style.FILL);\u003Cbr \/\u003E\u003Cbr \/\u003E        paintBgBmp = new Paint();\u003Cbr \/\u003E        paintBgBmp.setColor(Color.BLACK);\u003Cbr \/\u003E\u003Cbr \/\u003E        paintInitBg = new Paint();\u003Cbr \/\u003E        paintInitBg.setColor(Color.BLACK);\u003Cbr \/\u003E        paintInitBg.setAlpha(255);\u003Cbr \/\u003E        paintInitBg.setStyle(Paint.Style.FILL);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; To get view width and height, we override the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonSizeChanged()\u003C\/code\u003E method of the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EView\u003C\/code\u003E class. We initialize the position of the first character for each column. We use a random position between the top of the screen and the middle of the screen and save in the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EtxtPosByColumn\u003C\/code\u003E array: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onSizeChanged(int w, int h, int oldw, int oldh) {\u003Cbr \/\u003E        super.onSizeChanged(w, h, oldw, oldh);\u003Cbr \/\u003E        width = w;\u003Cbr \/\u003E        height = h;\u003Cbr \/\u003E\u003Cbr \/\u003E        canvasBmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\u003Cbr \/\u003E        canvas = new Canvas(canvasBmp);\u003Cbr \/\u003E        canvas.drawRect(0, 0, width, height, paintInitBg);\u003Cbr \/\u003E        columnSize = width \/ fontSize;\u003Cbr \/\u003E\u003Cbr \/\u003E        txtPosByColumn = new int[columnSize + 1];\u003Cbr \/\u003E\u003Cbr \/\u003E        for (int x = 0; x \u0026lt; columnSize; x++) {\u003Cbr \/\u003E            txtPosByColumn[x] = random.nextInt(height \/ 2) + 1;\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Finally, we override the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EonDraw()\u003C\/code\u003E\u0026nbsp;of our custom view, call the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdrawCanvas\u003C\/code\u003E method and invalidate the view to force a redraw. With that call, the Matrix Effect could progress from top to bottom in infinite mode. Inside \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdrawCanvas()\u003C\/code\u003E, call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EdrawText()\u003C\/code\u003E method used to draw a random character for each column at the position indicated by \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EtxtPosByColumn\u003C\/code\u003E variable above: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E    @Override\u003Cbr \/\u003E    protected void onDraw(Canvas canvas) {\u003Cbr \/\u003E        super.onDraw(canvas);\u003Cbr \/\u003E        canvas.drawBitmap(canvasBmp, 0, 0, paintBgBmp);\u003Cbr \/\u003E        drawCanvas();\u003Cbr \/\u003E        invalidate();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void drawText() {\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; txtPosByColumn.length; i++) {\u003Cbr \/\u003E            canvas.drawText(\"\" + chars[random.nextInt(chars.length)], i * fontSize, txtPosByColumn[i] * fontSize, paintTxt);\u003Cbr \/\u003E\u003Cbr \/\u003E            if (txtPosByColumn[i] * fontSize \u0026gt; height \u0026amp;\u0026amp; Math.random() \u0026gt; 0.975) {\u003Cbr \/\u003E                txtPosByColumn[i] = 0;\u003Cbr \/\u003E            }\u003Cbr \/\u003E            txtPosByColumn[i]++;\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void drawCanvas() {\u003Cbr \/\u003E        canvas.drawRect(0, 0, width, height, paintBg);\u003Cbr \/\u003E        drawText();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUsage in Activity\/Fragment\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; In order to use this view, please declaring a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EMatrixEffectView\u003C\/code\u003E in your activity\/fragment layout (XML) file: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.androidmatrixeffect.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;info.devexchanges.androidmatrixeffect.MatrixEffectView\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"match_parent\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; And there is no special point in your activity programmatically code, just need \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 3px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetContentView()\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidmatrixeffect;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; You may have this output when running this application:  \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/X1Uh3MR.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/X1Uh3MR.gif\" height=\"640\" width=\"356\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/97jBk\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cb\u003E\u003Cu\u003EReferences\u003C\/u\u003E\u003C\/b\u003E: from original post in \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.ssaurel.com\/blog\/create-a-matrix-effect-on-android\/\" target=\"_blank\"\u003ESsaurel's blog\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E."},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/2255861527804224721\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/androip-tip-create-digital-rain-effect.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2255861527804224721"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/2255861527804224721"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/androip-tip-create-digital-rain-effect.html","title":"Androip Tip: create Digital Rain Effect (Matrix Effect)"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-7013431899076949289"},"published":{"$t":"2016-11-14T01:09:00.000+07:00"},"updated":{"$t":"2016-12-09T09:24:33.742+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"captcha"}],"title":{"type":"text","$t":"Implement Captcha in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Captcha is one of the authentication methods that you are not a robot. Through Wikipedia, a captcha is defined as: \u003Cbr \/\u003E\u003Cblockquote style=\"background-color: white; border-left-color: rgb(0, 188, 213); border-left-style: solid; border-width: 0px 0px 0px 2px; color: #444444; font-family: 'Open Sans', Arial, Verdana; font-size: 16px; font-style: italic; line-height: 27.4286px; margin: 0px 2rem 1rem; padding: 0.5rem; quotes: none; text-align: justify; vertical-align: baseline;\"\u003E\u003Cdiv style=\"border: 0px; line-height: 1.8; padding: 0px; vertical-align: baseline;\"\u003E\u003Cspan style=\"line-height: 1.8;\"\u003E(a backronym for \"Completely Automated Public Turing test to tell Computers and Humans Apart\") is a type of challenge-response test used in computing to determine whether or not the user is human.\u003C\/span\u003E\u003C\/div\u003E\u003C\/blockquote\u003E\u0026nbsp; \u0026nbsp; In web development, this topic is very popular and implement it in a web project is so simple. But in mobile programming in general and Android in particular, implementing captcha is not easy.\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Through this post, I will present the way to build a \"captcha bitmap image\" which can help you in developing \u003Ci\u003E\u003Cb\u003Eauthentication screens\u003C\/b\u003E\u003C\/i\u003E.\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/B8aMJc3.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/B8aMJc3.gif\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate text and math captcha classes\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There are 2 popular types of captcha: text and math operator. We'll create theme and display them as \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBitmap\u003C\/code\u003E. Now, please copy these 3 classes that define the \"Bitmap captcha\" to your project: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ECaptcha.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidcaptcha;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003Eimport java.util.Random;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.graphics.Bitmap;\u003Cbr \/\u003Eimport android.graphics.Color;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic abstract class Captcha {\u003Cbr \/\u003E protected Bitmap image;\u003Cbr \/\u003E protected String answer = \"\";\u003Cbr \/\u003E private int width;\u003Cbr \/\u003E protected int height;\u003Cbr \/\u003E protected int x = 0;\u003Cbr \/\u003E protected int y = 0;\u003Cbr \/\u003E protected static List\u003Cinteger\u003E usedColors;\u003Cbr \/\u003E \u003Cbr \/\u003E protected abstract Bitmap image();\u003Cbr \/\u003E\u003Cbr \/\u003E public static int color(){\u003Cbr \/\u003E     Random r = new Random();\u003Cbr \/\u003E     int number;\u003Cbr \/\u003E     do{\u003Cbr \/\u003E      number = r.nextInt(9);\u003Cbr \/\u003E     }while(usedColors.contains(number));\u003Cbr \/\u003E     usedColors.add(number);\u003Cbr \/\u003E     switch(number){\u003Cbr \/\u003E      case 0: return Color.BLACK;\u003Cbr \/\u003E      case 1: return Color.BLUE;\u003Cbr \/\u003E      case 2: return Color.CYAN;\u003Cbr \/\u003E      case 3: return Color.DKGRAY;\u003Cbr \/\u003E      case 4: return Color.GRAY;\u003Cbr \/\u003E      case 5: return Color.GREEN;\u003Cbr \/\u003E      case 6: return Color.MAGENTA;\u003Cbr \/\u003E      case 7: return Color.RED;\u003Cbr \/\u003E      case 8: return Color.YELLOW;\u003Cbr \/\u003E      case 9: return Color.WHITE;\u003Cbr \/\u003E      default: return Color.WHITE;\u003Cbr \/\u003E     }\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E    public int getWidth(){\u003Cbr \/\u003E     return this.width;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E    public void setWidth(int width){\u003Cbr \/\u003E     if(width \u0026gt; 0 \u0026amp;\u0026amp; width \u0026lt; 10000){\u003Cbr \/\u003E      this.width = width;\u003Cbr \/\u003E     }else{\u003Cbr \/\u003E      this.width = 300;\u003Cbr \/\u003E     }\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E    public int getHeight(){\u003Cbr \/\u003E     return this.height;\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E    public void setHeight(int height){\u003Cbr \/\u003E     if(height \u0026gt; 0 \u0026amp;\u0026amp; height \u0026lt; 10000){\u003Cbr \/\u003E      this.height = height;\u003Cbr \/\u003E     }else{\u003Cbr \/\u003E      this.height = 100;\u003Cbr \/\u003E     }\u003Cbr \/\u003E    }\u003Cbr \/\u003E    \u003Cbr \/\u003E public Bitmap getImage() {\u003Cbr \/\u003E  return this.image;\u003Cbr \/\u003E }\u003Cbr \/\u003E\u003Cbr \/\u003E public boolean checkAnswer(String ans) {\u003Cbr \/\u003E  return ans.equals(this.answer);\u003Cbr \/\u003E }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/integer\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ETextCaptcha.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidcaptcha;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.io.CharArrayWriter;\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.Random;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.graphics.Bitmap;\u003Cbr \/\u003Eimport android.graphics.Canvas;\u003Cbr \/\u003Eimport android.graphics.LinearGradient;\u003Cbr \/\u003Eimport android.graphics.Paint;\u003Cbr \/\u003Eimport android.graphics.Shader;\u003Cbr \/\u003Eimport android.graphics.Bitmap.Config;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class TextCaptcha extends Captcha {\u003Cbr \/\u003E\u003Cbr \/\u003E    protected TextOptions options;\u003Cbr \/\u003E    private int wordLength;\u003Cbr \/\u003E    private char mCh;\u003Cbr \/\u003E\u003Cbr \/\u003E    public enum TextOptions {\u003Cbr \/\u003E        UPPERCASE_ONLY,\u003Cbr \/\u003E        LOWERCASE_ONLY,\u003Cbr \/\u003E        NUMBERS_ONLY,\u003Cbr \/\u003E        LETTERS_ONLY,\u003Cbr \/\u003E        NUMBERS_AND_LETTERS\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public TextCaptcha(int wordLength, TextOptions opt) {\u003Cbr \/\u003E        new TextCaptcha(0, 0, wordLength, opt);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public TextCaptcha(int width, int height, int wordLength, TextOptions opt) {\u003Cbr \/\u003E        setHeight(height);\u003Cbr \/\u003E        setWidth(width);\u003Cbr \/\u003E        this.options = opt;\u003Cbr \/\u003E        usedColors = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        this.wordLength = wordLength;\u003Cbr \/\u003E        this.image = image();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected Bitmap image() {\u003Cbr \/\u003E        LinearGradient gradient = new LinearGradient(0, 0, getWidth() \/ this.wordLength, getHeight() \/ 2, color(), color(), Shader.TileMode.MIRROR);\u003Cbr \/\u003E        Paint p = new Paint();\u003Cbr \/\u003E        p.setDither(true);\u003Cbr \/\u003E        p.setShader(gradient);\u003Cbr \/\u003E        Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Config.ARGB_8888);\u003Cbr \/\u003E        Canvas c = new Canvas(bitmap);\u003Cbr \/\u003E        c.drawRect(0, 0, getWidth(), getHeight(), p);\u003Cbr \/\u003E        Paint tp = new Paint();\u003Cbr \/\u003E        tp.setDither(true);\u003Cbr \/\u003E        tp.setTextSize(getWidth() \/ getHeight() * 20);\u003Cbr \/\u003E\u003Cbr \/\u003E        Random r = new Random(System.currentTimeMillis());\u003Cbr \/\u003E        CharArrayWriter cab = new CharArrayWriter();\u003Cbr \/\u003E        this.answer = \"\";\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; this.wordLength; i++) {\u003Cbr \/\u003E            char ch = ' ';\u003Cbr \/\u003E            switch (options) {\u003Cbr \/\u003E                case UPPERCASE_ONLY:\u003Cbr \/\u003E                    ch = (char) (r.nextInt(91 - 65) + (65));\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                case LOWERCASE_ONLY:\u003Cbr \/\u003E                    ch = (char) (r.nextInt(123 - 97) + (97));\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                case NUMBERS_ONLY:\u003Cbr \/\u003E                    ch = (char) (r.nextInt(58 - 49) + (49));\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                case LETTERS_ONLY:\u003Cbr \/\u003E                    ch = getLetters(r);\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                case NUMBERS_AND_LETTERS:\u003Cbr \/\u003E                    ch = getLettersNumbers(r);\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E                default:\u003Cbr \/\u003E                    ch = getLettersNumbers(r);\u003Cbr \/\u003E                    break;\u003Cbr \/\u003E            }\u003Cbr \/\u003E            cab.append(ch);\u003Cbr \/\u003E            this.answer += ch;\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E        char[] data = cab.toCharArray();\u003Cbr \/\u003E        for (int i = 0; i \u0026lt; data.length; i++) {\u003Cbr \/\u003E            this.x += (30 - (3 * this.wordLength)) + (Math.abs(r.nextInt()) % (65 - (1.2 * this.wordLength)));\u003Cbr \/\u003E            this.y = 50 + Math.abs(r.nextInt()) % 50;\u003Cbr \/\u003E            Canvas cc = new Canvas(bitmap);\u003Cbr \/\u003E            tp.setTextSkewX(r.nextFloat() - r.nextFloat());\u003Cbr \/\u003E            tp.setColor(color());\u003Cbr \/\u003E            cc.drawText(data, i, 1, this.x, this.y, tp);\u003Cbr \/\u003E            tp.setTextSkewX(0);\u003Cbr \/\u003E        }\u003Cbr \/\u003E        return bitmap;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private char getLetters(Random r) {\u003Cbr \/\u003E        int rint = (r.nextInt(123 - 65) + (65));\u003Cbr \/\u003E        if (((rint \u0026gt; 90) \u0026amp;\u0026amp; (rint \u0026lt; 97)))\u003Cbr \/\u003E            getLetters(r);\u003Cbr \/\u003E        else\u003Cbr \/\u003E            mCh = (char) rint;\u003Cbr \/\u003E        return mCh;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private char getLettersNumbers(Random r) {\u003Cbr \/\u003E        int rint = (r.nextInt(123 - 49) + (49));\u003Cbr \/\u003E\u003Cbr \/\u003E        if (((rint \u0026gt; 90) \u0026amp;\u0026amp; (rint \u0026lt; 97)))\u003Cbr \/\u003E            getLettersNumbers(r);\u003Cbr \/\u003E        else if (((rint \u0026gt; 57) \u0026amp;\u0026amp; (rint \u0026lt; 65)))\u003Cbr \/\u003E            getLettersNumbers(r);\u003Cbr \/\u003E        else\u003Cbr \/\u003E            mCh = (char) rint;\u003Cbr \/\u003E        return mCh;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMathCaptcha.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.androidcaptcha;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003Eimport java.util.Random;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.graphics.Bitmap;\u003Cbr \/\u003Eimport android.graphics.Bitmap.Config;\u003Cbr \/\u003Eimport android.graphics.Canvas;\u003Cbr \/\u003Eimport android.graphics.LinearGradient;\u003Cbr \/\u003Eimport android.graphics.Paint;\u003Cbr \/\u003Eimport android.graphics.Shader;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MathCaptcha extends Captcha {\u003Cbr \/\u003E \u003Cbr \/\u003E protected MathOptions options;\u003Cbr \/\u003E \u003Cbr \/\u003E public enum MathOptions{\u003Cbr \/\u003E  PLUS_MINUS,\u003Cbr \/\u003E  PLUS_MINUS_MULTIPLY\u003Cbr \/\u003E }\u003Cbr \/\u003E \u003Cbr \/\u003E public MathCaptcha(int width, int height, MathOptions opt){\u003Cbr \/\u003E  this.height = height;\u003Cbr \/\u003E     setWidth(width);\u003Cbr \/\u003E     this.options = opt;\u003Cbr \/\u003E  usedColors = new ArrayList\u0026lt;Integer\u0026gt;();\u003Cbr \/\u003E  this.image = image();\u003Cbr \/\u003E }\u003Cbr \/\u003E \u003Cbr \/\u003E @Override\u003Cbr \/\u003E protected Bitmap image() {\u003Cbr \/\u003E     int one = 0;\u003Cbr \/\u003E     int two = 0;\u003Cbr \/\u003E     int math = 0;\u003Cbr \/\u003E\u003Cbr \/\u003E     LinearGradient gradient = new LinearGradient(0, 0, getWidth() \/ 2, this.height \/ 2, color(), color(), Shader.TileMode.MIRROR);\u003Cbr \/\u003E     Paint p = new Paint();\u003Cbr \/\u003E     p.setDither(true);\u003Cbr \/\u003E     p.setShader(gradient);\u003Cbr \/\u003E     Bitmap bitmap = Bitmap.createBitmap(getWidth(), this.height, Config.ARGB_8888);\u003Cbr \/\u003E     Canvas c = new Canvas(bitmap);\u003Cbr \/\u003E     c.drawRect(0, 0, getWidth(), this.height, p);\u003Cbr \/\u003E     \u003Cbr \/\u003E     LinearGradient fontGrad = new LinearGradient(0, 0, getWidth() \/ 2, this.height \/ 2, color(), color(), Shader.TileMode.CLAMP);\u003Cbr \/\u003E     Paint tp = new Paint();\u003Cbr \/\u003E     tp.setDither(true);\u003Cbr \/\u003E     tp.setShader(fontGrad);\u003Cbr \/\u003E     tp.setTextSize(getWidth() \/ this.height * 20);\u003Cbr \/\u003E     Random r = new Random(System.currentTimeMillis());\u003Cbr \/\u003E  one = r.nextInt(9) + 1;\u003Cbr \/\u003E  two = r.nextInt(9) + 1;\u003Cbr \/\u003E  math = r.nextInt((options == MathOptions.PLUS_MINUS_MULTIPLY)?3:2);\u003Cbr \/\u003E  if (one \u0026lt; two) {\u003Cbr \/\u003E   Integer temp = one;\u003Cbr \/\u003E   one = two;\u003Cbr \/\u003E   two = temp;\u003Cbr \/\u003E  }\u003Cbr \/\u003E  \u003Cbr \/\u003E  switch (math) {\u003Cbr \/\u003E   case 0:\u003Cbr \/\u003E    this.answer = (one + two) + \u0026quot;\u0026quot;;\u003Cbr \/\u003E    break;\u003Cbr \/\u003E   case 1:\u003Cbr \/\u003E    this.answer = (one - two) + \u0026quot;\u0026quot;;\u003Cbr \/\u003E       break;\u003Cbr \/\u003E   case 2:\u003Cbr \/\u003E    this.answer = (one * two) + \u0026quot;\u0026quot;;\u003Cbr \/\u003E       break;\u003Cbr \/\u003E  }\u003Cbr \/\u003E     char[] data = new char[]{String.valueOf(one).toCharArray()[0], oper(math), String.valueOf(two).toCharArray()[0]};\u003Cbr \/\u003E     for (int i=0; i\u0026lt;data.length; i++) {\u003Cbr \/\u003E         x += 30 + (Math.abs(r.nextInt()) % 65);\u003Cbr \/\u003E         y = 50 + Math.abs(r.nextInt()) % 50;\u003Cbr \/\u003E         Canvas cc = new Canvas(bitmap);\u003Cbr \/\u003E         if(i != 1)\u003Cbr \/\u003E          tp.setTextSkewX(r.nextFloat() - r.nextFloat());\u003Cbr \/\u003E         cc.drawText(data, i, 1, x, y, tp);\u003Cbr \/\u003E         tp.setTextSkewX(0);\u003Cbr \/\u003E     }\u003Cbr \/\u003E     return bitmap;\u003Cbr \/\u003E }\u003Cbr \/\u003E \u003Cbr \/\u003E public static char oper(Integer math) {\u003Cbr \/\u003E  switch (math) {\u003Cbr \/\u003E  case 0:\u003Cbr \/\u003E   return '+';\u003Cbr \/\u003E  case 1:\u003Cbr \/\u003E   return '-';\u003Cbr \/\u003E  case 2:\u003Cbr \/\u003E   return '*';\u003Cbr \/\u003E  }\u003Cbr \/\u003E  return '+';\u003Cbr \/\u003E }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I get these classes from \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"https:\/\/github.com\/floydfix\/Android-Easy-Captcha\" target=\"_blank\"\u003EAndroid-Easy-Captcha\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E project on Github and fix some errors in code! \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EUsage in Activity\/Fragment\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see at the constructors above, we can initialize a new text or math captcha easily by call: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003ETextCaptcha textCaptcha = new TextCaptcha(600, 150, 4, TextCaptcha.TextOptions.LETTERS_ONLY);\u003Cbr \/\u003EMathCaptcha mathCaptcha = new MathCaptcha(600, 150, MathCaptcha.MathOptions.PLUS_MINUS);\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp;You will now have a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBitmap\u003C\/code\u003E with 600x150 pixels. In order to display it to \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EImageView\u003C\/code\u003E, only need to call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetImage()\u003C\/code\u003E method (which return a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBitmap\u003C\/code\u003E object): \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EimageView.setImageBitmap(textCaptcha.getImage());\u003Cbr \/\u003EimageView1.setImageBitmap(mathCaptcha.getImage());\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; The \"captcha image\" may be look like this: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/IUgHiz4.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/IUgHiz4.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECheck answer from user input\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; With \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EcheckAnswer()\u003C\/code\u003E method, we can check whether user input true or false (from \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EEditText\u003C\/code\u003E) with captcha value: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003E                \/\/checking text captcha\u003Cbr \/\u003E                if (!textCaptcha.checkAnswer(edtTextCaptcha.getText().toString().trim())) {\u003Cbr \/\u003E                    edtTextCaptcha.setError(\"Captcha is not match\");\u003Cbr \/\u003E                    numberOfCaptchaFalse++;\u003Cbr \/\u003E                } else {\u003Cbr \/\u003E                    Log.d(\"Main\", \"captcha is match!\");\u003Cbr \/\u003E                }\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; Of course, this is the sample output when user input wrong value: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/SxNs1vP.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/SxNs1vP.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003EImportant Note\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: By default, text captcha distinguishes uppercase and lowercase. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; You can make your own output when user input right captcha value, simply showing a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EToast\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/5l0hLYe.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/5l0hLYe.png\" height=\"640\" width=\"360\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, you've learned the way to create text and math captcha in Android and apply to your own work. Hope this post is helpful with authentication matter in your application. As asual, you can download my sample project by click the button below! \u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/92PrI\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/7013431899076949289\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/implement-captcha-in-android.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7013431899076949289"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/7013431899076949289"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/implement-captcha-in-android.html","title":"Implement Captcha in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-3249909341871619719"},"published":{"$t":"2016-11-11T14:09:00.001+07:00"},"updated":{"$t":"2016-11-11T14:17:53.099+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"Android UI"},{"scheme":"http://www.blogger.com/atom/ns#","term":"Bottom Navigation View"},{"scheme":"http://www.blogger.com/atom/ns#","term":"material design"}],"title":{"type":"text","$t":"Bottom Navigation View by Design Support Library in Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; Bottom Navigation View was introduced for a long time ago in \u003Ca href=\"https:\/\/material.google.com\/components\/bottom-navigation.html\" target=\"_blank\"\u003EMaterial design guideline\u003C\/a\u003E but it hasn’t been easy for us to implement it into our apps. Some applications have built their own solutions, whilst others have used a third-party open-source libraries to get the job done. I also had a post about using a library to make this design, you should take a glance \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/bottom-navigation-bar-in-android.html\" target=\"_blank\"\u003Ehere\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E!\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/mql3eyX.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/mql3eyX.png\" height=\"265\" width=\"320\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; But now, with the release of Design Support Library version \u003Cb\u003E\u003Ci\u003E25.0.0\u003C\/i\u003E\u003C\/b\u003E, Google now provide an \u003Cb\u003E\u003Ci\u003Eofficial widget\u003C\/i\u003E\u003C\/b\u003E to make this design. This is a good new for Android developers, from now on, we have not depended on any third-party library anymore, just only need to use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E\u0026nbsp;in your layout design. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cspan style=\"color: #274e13;\"\u003EDEMO VIDEO\u003C\/span\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ciframe allowfullscreen=\"\" class=\"YOUTUBE-iframe-video\" data-thumbnail-src=\"https:\/\/i9.ytimg.com\/vi\/if6OyNkl1MM\/default.jpg?sqp=CKSelcEF\u0026amp;rs=AOn4CLDtOKyNRY0cL1eB-26Ghd5X3jL1lg\" frameborder=\"0\" height=\"333\" src=\"https:\/\/www.youtube.com\/embed\/if6OyNkl1MM?feature=player_embedded\" width=\"400\"\u003E\u003C\/iframe\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EAdding Design Support Library dependency\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; It is included in the Design Support Library, starting with version \u003Cb\u003E\u003Ci\u003E25.0.0\u003C\/i\u003E\u003C\/b\u003E. You can include it in your \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E file with the following line (you'll also need the AppCompat Support Library as the Design Support Library's dependency): \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Ecompile 'com.android.support:appcompat-v7:25.0.0'  \u003Cbr \/\u003Ecompile 'com.android.support:design:25.0.0' \u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring in activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Next we simply need to add the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E widget to our desired layout file. Remember that this should be aligned with the bottom of the screen with all content displaying above it. We can add this view like so: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactivity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;RelativeLayout xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.bottomnavigationview.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;FrameLayout\u003Cbr \/\u003E        android:id=\"@+id\/fragment\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:padding=\"@dimen\/activity_horizontal_margin\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;\/FrameLayout\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;android.support.design.widget.BottomNavigationView\u003Cbr \/\u003E        android:id=\"@+id\/bottom_navigation_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        app:itemBackground=\"@color\/colorPrimaryDark\"\u003Cbr \/\u003E        app:itemIconTint=\"@color\/white\"\u003Cbr \/\u003E        app:itemTextColor=\"@color\/white\"\u003Cbr \/\u003E        app:menu=\"@menu\/menu_bottom_navigation\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see, there are 4 important attributes of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemBackground\u003C\/code\u003E: the background color or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EDrawable\u003C\/code\u003E of the items. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemBackgroundResource()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemIconTint\u003C\/code\u003E: the icon tint for items. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemIconTintList()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemTextColor\u003C\/code\u003E: the text color for the item labels. Can be set from code with the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetItemTextColor()\u003C\/code\u003E method.\u003C\/li\u003E\u003Cli\u003E\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Emenu\u003C\/code\u003E: the menu resource to be used to display items in the bottom navigation menu. Can be set from code with\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EinflateMenu()\u003C\/code\u003E method.\u003C\/li\u003E\u003C\/ul\u003E\u0026nbsp; \u0026nbsp; If you add this to your app and run it on your device, you’ll see a shiny new bottom navigation view like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/jZxIt8c.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/jZxIt8c.png\" height=\"61\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreate a menu for Bottom Navigation View\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; At the XML code above, we provided a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Emenu\u003C\/code\u003E attribute for our \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E. It looks exactly the same as any other menu that we’d use throughout our app, let put a menu resource file in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/menu\u003C\/code\u003E folder: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Emenu_bottom_navigation.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;menu xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/songs\"\u003Cbr \/\u003E        android:icon=\"@drawable\/song\"\u003Cbr \/\u003E        android:title=\"All songs\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/genre\"\u003Cbr \/\u003E        android:icon=\"@drawable\/genre\"\u003Cbr \/\u003E        android:title=\"Genres\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/album\"\u003Cbr \/\u003E        android:icon=\"@drawable\/album\"\u003Cbr \/\u003E        android:title=\"Albums\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:id=\"@+id\/artist\"\u003Cbr \/\u003E        android:icon=\"@drawable\/artist\"\u003Cbr \/\u003E        android:title=\"Artists\" \/\u0026gt;\u003Cbr \/\u003E\u0026lt;\/menu\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003EImportant Note\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: the maximum number of items we can display now is 5. You can check it through call \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EgetMaxItem()\u003C\/code\u003E method. \u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle selected\/unselected states\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Using the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E we can easily handle the display of both selected and unselected menu items. Firstly, create a selector file for our selected\/unselected colors (this file is put in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003Eres\/color\u003C\/code\u003E folder): \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Ecolor_states.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-xml\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;selector xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:color=\"#757575\"\u003Cbr \/\u003E        android:state_checked=\"false\"\/\u0026gt;\u003Cbr \/\u003E    \u0026lt;item\u003Cbr \/\u003E        android:color=\"@color\/colorAccent\"\u003Cbr \/\u003E        android:state_checked=\"true\"\/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E\u0026lt;\/selector\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, change the\u0026nbsp;\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EitemIconTint\u003C\/code\u003E attribute value of your \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.design.widget.BottomNavigationView\u003Cbr \/\u003E        android:id=\"@+id\/bottom_navigation_view\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_alignParentBottom=\"true\"\u003Cbr \/\u003E        app:itemBackground=\"@color\/colorPrimaryDark\"\u003Cbr \/\u003E        app:itemIconTint=\"@color\/color_states\"\u003Cbr \/\u003E        app:itemTextColor=\"@color\/white\"\u003Cbr \/\u003E        app:menu=\"@menu\/menu_bottom_navigation\" \/\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u0026nbsp; \u0026nbsp; You will have this output: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/eJOL8jq.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/eJOL8jq.png\" height=\"61\" width=\"400\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EHandle menu items click event\u003C\/h3\u003E\u003C\/div\u003ENow we’ve implemented our menu we need to be able to react when it’s interacted with. In programmatically code, we can use the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EsetOnNavigationItemSelectedListener()\u003C\/code\u003E method of \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: 'Source Code Pro', Monaco, monospace; font-size: 13px; padding: 1px 5px; word-wrap: break-word;\"\u003EBottomNavigationView\u003C\/code\u003E to set a listener for menu item events: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003EbottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\u003Cbr \/\u003E            @Override\u003Cbr \/\u003E            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\u003Cbr \/\u003E                switch (item.getItemId()) {\u003Cbr \/\u003E                    case R.id.artist:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.genre:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.album:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    case R.id.songs:\u003Cbr \/\u003E\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                    default:\u003Cbr \/\u003E                        break;\u003Cbr \/\u003E                }\u003Cbr \/\u003E                return true;\u003Cbr \/\u003E            }\u003Cbr \/\u003E        });\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; I hope you can see now just how straight forward it is to implement the Bottom Navigation view using the design support library. At this time, this widget is still not perfect. For example, we now cannot custom it's behavior to show\/hide it when scrolling screen, hope that Google will make it better soon!\u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Of course, if you need more code of this project, please check it out on \u003Cb\u003E\u003Ca href=\"http:\/\/viid.me\/9v0Jk\" target=\"_blank\"\u003E@Github\u003C\/a\u003E\u003C\/b\u003E, I will replace corresponding fragments when menu items clicked, output of my sample project like this:\u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/hacz6jI.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/hacz6jI.gif\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Cb\u003E\u003Cu\u003ERead more\u003C\/u\u003E\u003C\/b\u003E:\u003Cbr \/\u003E\u003Cul\u003E\u003Cli\u003E\u003Ca href=\"https:\/\/material.google.com\/components\/bottom-navigation.html\" target=\"_blank\"\u003EMaterial design guidelines\u003C\/a\u003E\u003C\/li\u003E\u003Cli\u003EMy \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2016\/08\/bottom-navigation-bar-in-android.html\" target=\"_blank\"\u003Eprevious post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E about Bottom Navigation View\u003C\/li\u003E\u003C\/ul\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/viid.me\/9v0Jk\" target=\"_blank\"\u003EDOWNLOAD CODE\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/3249909341871619719\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/bottom-navigation-view-by-design.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3249909341871619719"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/3249909341871619719"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/bottom-navigation-view-by-design.html","title":"Bottom Navigation View by Design Support Library in Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"media$thumbnail":{"xmlns$media":"http://search.yahoo.com/mrss/","url":"https:\/\/img.youtube.com\/vi\/if6OyNkl1MM\/default.jpg","height":"72","width":"72"},"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]},{"id":{"$t":"tag:blogger.com,1999:blog-5499848987087947915.post-8257482202271786668"},"published":{"$t":"2016-11-09T16:15:00.000+07:00"},"updated":{"$t":"2016-11-10T08:18:56.519+07:00"},"category":[{"scheme":"http://www.blogger.com/atom/ns#","term":"cardview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"gridview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"listview"},{"scheme":"http://www.blogger.com/atom/ns#","term":"recyclerview"}],"title":{"type":"text","$t":"Combining grid view and list view on a screen by using RecyclerViews Android"},"content":{"type":"html","$t":"\u0026nbsp; \u0026nbsp; As you can read at my \u003Cb\u003E\u003Ci\u003E\u003Ca href=\"http:\/\/www.devexchanges.info\/2015\/03\/combining-gridview-and-listview-in-one.html\" target=\"_blank\"\u003Eprevious post\u003C\/a\u003E\u003C\/i\u003E\u003C\/b\u003E, if you use \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EGridView\u003C\/code\u003E to build a grid layout and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E to make a list layout in Android, putting these 2 widgets into a single screen is not easy, my solution is making a custom \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EGridView\u003C\/code\u003E which expanding it's full height and set it as the \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E's header later.  \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; But now, Google has released \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E - the successor of 2 old widgets (\u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EGridView\u003C\/code\u003E), we can build this design easily because of it's own scroll and reuse mechanism. \u003Cbr \/\u003E\u0026nbsp; \u0026nbsp; Now, take a few time to read some important steps in this \"combining work\"! \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/MAPP5GPl.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/MAPP5GPl.png\" height=\"400\" width=\"240\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EDeclaring Activity layout\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Firstly, you only need to put 2 \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E object to your activity\/fragment layout. For better scroll later, please wrap theme in a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ENestedScrollView\u003C\/code\u003E like this: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eactiity_main.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;?xml version=\"1.0\" encoding=\"utf-8\"?\u0026gt;\u003Cbr \/\u003E\u0026lt;android.support.v4.widget.NestedScrollView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:tools=\"http:\/\/schemas.android.com\/tools\"\u003Cbr \/\u003E    android:id=\"@+id\/activity_main\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"match_parent\"\u003Cbr \/\u003E    android:paddingBottom=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:paddingLeft=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingRight=\"@dimen\/activity_horizontal_margin\"\u003Cbr \/\u003E    android:paddingTop=\"@dimen\/activity_vertical_margin\"\u003Cbr \/\u003E    android:background=\"#ffffe0\"\u003Cbr \/\u003E    tools:context=\"info.devexchanges.gridlistrecyclerview.MainActivity\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;LinearLayout\u003Cbr \/\u003E        android:orientation=\"vertical\"\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:paddingBottom=\"10dp\"\u003Cbr \/\u003E            android:text=\"@string\/os\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E            android:id=\"@+id\/grid\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:paddingBottom=\"10dp\"\u003Cbr \/\u003E            android:paddingTop=\"10dp\"\u003Cbr \/\u003E            android:text=\"@string\/corporation\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;android.support.v7.widget.RecyclerView\u003Cbr \/\u003E            android:id=\"@+id\/list\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;\/LinearLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v4.widget.NestedScrollView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EProviding custom layouts for grid\/list row\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Of course, you always need to creating layout for each \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E item. In this project, every item is a \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ECardView\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_list.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.v7.widget.CardView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:layout_marginBottom=\"8dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/image\"\u003Cbr \/\u003E            android:layout_width=\"60dp\"\u003Cbr \/\u003E            android:layout_height=\"60dp\"\u003Cbr \/\u003E            android:layout_marginLeft=\"5dp\"\u003Cbr \/\u003E            android:contentDescription=\"@string\/app_name\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_centerInParent=\"true\"\u003Cbr \/\u003E            android:layout_toRightOf=\"@+id\/image\"\u003Cbr \/\u003E            android:gravity=\"center\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v7.widget.CardView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003Eitem_grid.xml\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-aspnet\"\u003E\u0026lt;android.support.v7.widget.CardView xmlns:android=\"http:\/\/schemas.android.com\/apk\/res\/android\"\u003Cbr \/\u003E    xmlns:app=\"http:\/\/schemas.android.com\/apk\/res-auto\"\u003Cbr \/\u003E    android:layout_width=\"match_parent\"\u003Cbr \/\u003E    android:layout_height=\"wrap_content\"\u003Cbr \/\u003E    android:layout_margin=\"5dp\"\u003Cbr \/\u003E    app:cardCornerRadius=\"10dp\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E    \u0026lt;RelativeLayout\u003Cbr \/\u003E        android:layout_width=\"match_parent\"\u003Cbr \/\u003E        android:layout_height=\"wrap_content\"\u003Cbr \/\u003E        android:layout_gravity=\"center\"\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;ImageView\u003Cbr \/\u003E            android:id=\"@+id\/image\"\u003Cbr \/\u003E            android:layout_width=\"120dp\"\u003Cbr \/\u003E            android:layout_height=\"120dp\"\u003Cbr \/\u003E            android:layout_centerHorizontal=\"true\"\u003Cbr \/\u003E            android:layout_marginTop=\"5dp\"\u003Cbr \/\u003E            android:contentDescription=\"@null\" \/\u0026gt;\u003Cbr \/\u003E\u003Cbr \/\u003E        \u0026lt;TextView\u003Cbr \/\u003E            android:id=\"@+id\/text\"\u003Cbr \/\u003E            android:layout_width=\"match_parent\"\u003Cbr \/\u003E            android:layout_height=\"wrap_content\"\u003Cbr \/\u003E            android:layout_below=\"@+id\/image\"\u003Cbr \/\u003E            android:layout_marginTop=\"5dp\"\u003Cbr \/\u003E            android:background=\"@color\/colorPrimaryDark\"\u003Cbr \/\u003E            android:gravity=\"center\"\u003Cbr \/\u003E            android:padding=\"5dp\"\u003Cbr \/\u003E            android:textColor=\"#ffffff\"\u003Cbr \/\u003E            android:textStyle=\"bold\" \/\u0026gt;\u003Cbr \/\u003E    \u0026lt;\/RelativeLayout\u0026gt;\u003Cbr \/\u003E\u0026lt;\/android.support.v7.widget.CardView\u0026gt;\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ECreating adapter classes\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; Now, we must create 2 adapter classes for 2 \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E based on \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView.Adapter\u003C\/code\u003E: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EListViewAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.gridlistrecyclerview.adapter;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.R;\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.RecyclerViewItem;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class ListViewAdapter extends RecyclerView.Adapter\u0026lt;ListViewAdapter.ViewHolder\u0026gt; {\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E    private List\u0026lt;RecyclerViewItem\u0026gt; items;\u003Cbr \/\u003E\u003Cbr \/\u003E    public ListViewAdapter(Activity activity, List\u0026lt;RecyclerViewItem\u0026gt; items) {\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E        this.items = items;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\u003Cbr \/\u003E        LayoutInflater inflater = activity.getLayoutInflater();\u003Cbr \/\u003E        View view = inflater.inflate(R.layout.item_list, parent, false);\u003Cbr \/\u003E\u003Cbr \/\u003E        return new ViewHolder(view);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(ViewHolder viewHolder, final int position) {\u003Cbr \/\u003E        viewHolder.imageView.setImageResource(items.get(position).getDrawableId());\u003Cbr \/\u003E        viewHolder.textView.setText(items.get(position).getName());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemCount() {\u003Cbr \/\u003E        return items.size();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    \/**\u003Cbr \/\u003E     * View holder to display each RecylerView item\u003Cbr \/\u003E     *\/\u003Cbr \/\u003E    protected class ViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        private ImageView imageView;\u003Cbr \/\u003E        private TextView textView;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            imageView = (ImageView) view.findViewById(R.id.image);\u003Cbr \/\u003E            textView = (TextView)view.findViewById(R.id.text);\u003Cbr \/\u003E        }\u003Cbr \/\u003E\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EGridViewAdapter.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.gridlistrecyclerview.adapter;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.app.Activity;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003Eimport android.view.LayoutInflater;\u003Cbr \/\u003Eimport android.view.View;\u003Cbr \/\u003Eimport android.view.ViewGroup;\u003Cbr \/\u003Eimport android.widget.ImageView;\u003Cbr \/\u003Eimport android.widget.TextView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.List;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.R;\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.RecyclerViewItem;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class GridViewAdapter extends RecyclerView.Adapter\u0026lt;GridViewAdapter.ViewHolder\u0026gt; {\u003Cbr \/\u003E    private List\u0026lt;RecyclerViewItem\u0026gt; items;\u003Cbr \/\u003E    private Activity activity;\u003Cbr \/\u003E\u003Cbr \/\u003E    public GridViewAdapter(Activity activity, List\u0026lt;RecyclerViewItem\u0026gt; items) {\u003Cbr \/\u003E        this.activity = activity;\u003Cbr \/\u003E        this.items = items;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int viewType) {\u003Cbr \/\u003E        LayoutInflater inflater = activity.getLayoutInflater();\u003Cbr \/\u003E        View view = inflater.inflate(R.layout.item_grid, viewGroup, false);\u003Cbr \/\u003E\u003Cbr \/\u003E        return new ViewHolder(view);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public void onBindViewHolder(GridViewAdapter.ViewHolder viewHolder, int position) {\u003Cbr \/\u003E        viewHolder.imageView.setImageResource(items.get(position).getDrawableId());\u003Cbr \/\u003E        viewHolder.textView.setText(items.get(position).getName());\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    public int getItemCount() {\u003Cbr \/\u003E        return items.size();\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    \/**\u003Cbr \/\u003E     * View holder to display each RecylerView item\u003Cbr \/\u003E     *\/\u003Cbr \/\u003E    protected class ViewHolder extends RecyclerView.ViewHolder {\u003Cbr \/\u003E        private ImageView imageView;\u003Cbr \/\u003E        private TextView textView;\u003Cbr \/\u003E\u003Cbr \/\u003E        public ViewHolder(View view) {\u003Cbr \/\u003E            super(view);\u003Cbr \/\u003E            textView = (TextView)view.findViewById(R.id.text);\u003Cbr \/\u003E            imageView = (ImageView) view.findViewById(R.id.image);\u003Cbr \/\u003E        }\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConfiguration in Activity\/Fragment\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; There is no special point in your activity or fragment programmatically code, locating all xml elements from layout file, create \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ELayoutManager\u003C\/code\u003E for \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerViews\u003C\/code\u003E, initializing adapters and attaching them,...This is full code for my main activity: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003EMainActivity.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.gridlistrecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport android.os.Bundle;\u003Cbr \/\u003Eimport android.support.v7.app.AppCompatActivity;\u003Cbr \/\u003Eimport android.support.v7.widget.GridLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.LinearLayoutManager;\u003Cbr \/\u003Eimport android.support.v7.widget.RecyclerView;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport java.util.ArrayList;\u003Cbr \/\u003E\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.adapter.GridViewAdapter;\u003Cbr \/\u003Eimport info.devexchanges.gridlistrecyclerview.adapter.ListViewAdapter;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class MainActivity extends AppCompatActivity {\u003Cbr \/\u003E\u003Cbr \/\u003E    private RecyclerView listView;\u003Cbr \/\u003E    private RecyclerView gridView;\u003Cbr \/\u003E    private ListViewAdapter listViewAdapter;\u003Cbr \/\u003E    private GridViewAdapter gridViewAdapter;\u003Cbr \/\u003E    private ArrayList\u0026lt;RecyclerViewItem\u0026gt; corporations;\u003Cbr \/\u003E    private ArrayList\u0026lt;RecyclerViewItem\u0026gt; operatingSystems;\u003Cbr \/\u003E\u003Cbr \/\u003E    @Override\u003Cbr \/\u003E    protected void onCreate(Bundle savedInstanceState) {\u003Cbr \/\u003E        super.onCreate(savedInstanceState);\u003Cbr \/\u003E        setContentView(R.layout.activity_main);\u003Cbr \/\u003E\u003Cbr \/\u003E        listView = (RecyclerView) findViewById(R.id.list);\u003Cbr \/\u003E        gridView = (RecyclerView) findViewById(R.id.grid);\u003Cbr \/\u003E\u003Cbr \/\u003E        setDummyData();\u003Cbr \/\u003E\u003Cbr \/\u003E        listView.setHasFixedSize(true);\u003Cbr \/\u003E        gridView.setHasFixedSize(true);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set layout manager and adapter for \"ListView\"\u003Cbr \/\u003E        LinearLayoutManager horizontalManager = new LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false);\u003Cbr \/\u003E        listView.setLayoutManager(horizontalManager);\u003Cbr \/\u003E        listViewAdapter = new ListViewAdapter(this, corporations);\u003Cbr \/\u003E        listView.setAdapter(listViewAdapter);\u003Cbr \/\u003E\u003Cbr \/\u003E        \/\/set layout manager and adapter for \"GridView\"\u003Cbr \/\u003E        GridLayoutManager layoutManager = new GridLayoutManager(this, 2);\u003Cbr \/\u003E        gridView.setLayoutManager(layoutManager);\u003Cbr \/\u003E        gridViewAdapter = new GridViewAdapter(this, operatingSystems);\u003Cbr \/\u003E        gridView.setAdapter(gridViewAdapter);\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    private void setDummyData() {\u003Cbr \/\u003E        corporations = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.microsoft, \"Microsoft\"));\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.apple, \"Apple\"));\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.google, \"Google\"));\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.oracle, \"Oracle\"));\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.yahoo, \"Yahoo\"));\u003Cbr \/\u003E        corporations.add(new RecyclerViewItem(R.drawable.mozilla, \"Mozilla\"));\u003Cbr \/\u003E\u003Cbr \/\u003E        operatingSystems = new ArrayList\u0026lt;\u0026gt;();\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.bbos, \"BlackBerry OS\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.ios, \"iOS\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.tizen, \"Tizen\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.android, \"Android\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.symbian, \"Symbian\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.firefox_os, \"Firefox OS\"));\u003Cbr \/\u003E        operatingSystems.add(new RecyclerViewItem(R.drawable.wp_os, \"Windows Phone OS\"));\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003EAnd this is the POJO class of this project: \u003Cbr \/\u003E\u003Cdiv\u003E\u003Cspan style=\"color: #007a00;\"\u003E\u003Cu\u003E\u003Cb\u003ERecyclerViewItem.java\u003C\/b\u003E\u003C\/u\u003E\u003C\/span\u003E\u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-java\"\u003Epackage info.devexchanges.gridlistrecyclerview;\u003Cbr \/\u003E\u003Cbr \/\u003Epublic class RecyclerViewItem {\u003Cbr \/\u003E\u003Cbr \/\u003E    private int drawableId;\u003Cbr \/\u003E    private String name;\u003Cbr \/\u003E\u003Cbr \/\u003E    public RecyclerViewItem(int drawableId, String name) {\u003Cbr \/\u003E        this.drawableId = drawableId;\u003Cbr \/\u003E        this.name = name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public int getDrawableId() {\u003Cbr \/\u003E        return drawableId;\u003Cbr \/\u003E    }\u003Cbr \/\u003E\u003Cbr \/\u003E    public String getName() {\u003Cbr \/\u003E        return name;\u003Cbr \/\u003E    }\u003Cbr \/\u003E}\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; \u003Ccode class=\"inline\" style=\"background: rgb(245, 247, 248); border-radius: 3px; border: 1px solid rgb(228, 228, 228); box-sizing: border-box; font-family: \u0026quot;source code pro\u0026quot;, monaco, monospace; font-size: 13px; line-height: 25.6px; padding: 4px 4px 1px;\"\u003E\u003Cb\u003E\u003Cspan style=\"color: #cc0000;\"\u003ENOTE\u003C\/span\u003E\u003C\/b\u003E\u003C\/code\u003E: Never forget to put \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E and \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ECardView\u003C\/code\u003E dependencies to your app-level \u003Cb\u003E\u003Ci\u003Ebuild.gradle\u003C\/i\u003E\u003C\/b\u003E file: \u003Cbr \/\u003E\u003Cpre class=\"line-numbers\"\u003E\u003Ccode class=\"language-js\"\u003Ecompile 'com.android.support:recyclerview-v7:25.0.0'\u003Cbr \/\u003Ecompile 'com.android.support:cardview-v7:25.0.0'\u003Cbr \/\u003E\u003C\/code\u003E\u003C\/pre\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003ERunning application\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; You'll have this output after complete this project: \u003Cbr \/\u003E\u003Cdiv class=\"separator\" style=\"clear: both; text-align: center;\"\u003E\u003Ca href=\"http:\/\/i.imgur.com\/9E1pVsG.gif\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"\u003E\u003Cimg border=\"0\" src=\"http:\/\/i.imgur.com\/9E1pVsG.gif\" height=\"400\" width=\"225\" \/\u003E\u003C\/a\u003E\u003C\/div\u003E\u003Cbr \/\u003E\u003Cdiv br=\"\" gt=\"\" style=\"border-radius: 3px; border: 1px solid rgb(102 , 204 , 204); box-shadow: rgb(136 , 193 , 204) 0px 0px 30px inset; color: #222222; font-family: \u0026quot;times new roman\u0026quot; , \u0026quot;palatino linotype\u0026quot; , \u0026quot;palatino\u0026quot; , serif; font-size: 17px; font-stretch: normal; line-height: 26px; margin-bottom: 10px; margin-top: 10px; padding: 8px;\"\u003E\u003Ch3 style=\"margin: 0px; position: relative;\"\u003EConclusions\u003C\/h3\u003E\u003C\/div\u003E\u0026nbsp; \u0026nbsp; As you can see on the code above, \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E can be put in \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EScrollView\u003C\/code\u003E or \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ENestedScrollView\u003C\/code\u003E, which \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003EListView\/GridView\u003C\/code\u003E cannot do. During work, as a Android developer, you should pay attention to the \u003Ci\u003Eupdate features from Google\u003C\/i\u003E to deal with the topic that problematic formerly. Through this post, I hope you can understand more about using \u003Ccode style=\"background: rgba(2, 130, 190, 0.0745098); border-radius: 15px; border: 1px solid rgba(2, 130, 190, 0.0784314); box-sizing: border-box; color: #333333; font-family: Menlo, Courier, monospace; font-size: 14.4px; padding: 1px 5px; word-wrap: break-word;\"\u003ERecyclerView\u003C\/code\u003E in building list interface. Finally, you can take full code be click the button below! \u003Cbr \/\u003E\u003Cbr \/\u003E\u003Cdiv class=\"button_github\"\u003E\u003Ca href=\"http:\/\/sh.st\/9wXDN\" target=\"_blank\"\u003EView Project on Github\u003C\/a\u003E\u003C\/div\u003E"},"link":[{"rel":"replies","type":"application/atom+xml","href":"http:\/\/www.devexchanges.info\/feeds\/8257482202271786668\/comments\/default","title":"Post Comments"},{"rel":"replies","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/combining-grid-view-and-list-view-in.html#comment-form","title":"0 Comments"},{"rel":"edit","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8257482202271786668"},{"rel":"self","type":"application/atom+xml","href":"http:\/\/www.blogger.com\/feeds\/5499848987087947915\/posts\/default\/8257482202271786668"},{"rel":"alternate","type":"text/html","href":"http:\/\/www.devexchanges.info\/2016\/11\/combining-grid-view-and-list-view-in.html","title":"Combining grid view and list view on a screen by using RecyclerViews Android"}],"author":[{"name":{"$t":"Hồng Thái"},"uri":{"$t":"https:\/\/plus.google.com\/117595713441950780620"},"email":{"$t":"noreply@blogger.com"},"gd$image":{"rel":"http://schemas.google.com/g/2005#thumbnail","width":"32","height":"32","src":"\/\/lh4.googleusercontent.com\/-lZh5XqLvw8A\/AAAAAAAAAAI\/AAAAAAAABRI\/bisLJ4NcvPY\/s512-c\/photo.jpg"}}],"thr$total":{"$t":"0"},"gd$extendedProperty":[{"name":"commentSource","value":"1"},{"name":"commentModerationMode","value":"FILTERED_POSTMOD"}]}]}});